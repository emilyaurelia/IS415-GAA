---
title: "In-class Exercise 3: Kernel Density Estimation"
author: "Emily Aurelia"
format:
  html:
    toc-depth: 4
execute: 
  warning: false #to remove the warning in the webpage
date: "`r Sys.Date()`"
---

# Review of Hands-On Exercise 3

```{r}
pacman::p_load(maptools, sf, raster, spatstat, tmap, tidyverse)
```

```{r}
childcare_sf <- st_read("data/geospatial/ChildCareServices.geojson") %>% st_transform(crs = 3414)
sg_sf <- st_read(dsn = "data/geospatial", layer="CostalOutline")
mpsz_sf <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")

```

```{r}
plot(mpsz_sf)
```

```{r}
#to get Singapore coastal outline
sg_sf <- mpsz_sf %>% st_union()
```

```{r}
sg_sf_combine <- mpsz_sf %>% st_combine()
plot(sg_sf_combine) #will include all the polygons that are available in the mpsz_sf
```

```{r}
plot(sg_sf)
```

```{r}
childcare_ppp <- as.ppp(childcare_sf) #to immediately change the sf to ppp without changing to sp 
summary(childcare_ppp)
```

We can check the duplication in a ppp object using `duplicated()` function

```{r}
any(duplicated(childcare_ppp))
```

#### Creating owin object

```{r}
sg_owin <- as.owin(sg_sf) #must use sf layer
sg_owin
```

the output object can be displayed using plot() function

```{r}
plot(sg_owin)
```

#### Combining points of childcare points within the SG boundary

```{r}
childcareSG_ppp <- childcare_ppp[sg_owin]
plot(childcareSG_ppp)
```

```{r}
pg <- mpsz_sf %>% filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>% filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>% filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>% filter(PLN_AREA_N == "JURONG WEST")
```

```{r}
plot(pg, main="PUNGOOL")
plot(tm, main="TAMPINES")
plot(ck, main="CHOA CHU KANG")
plot(jw, main="JURONG WEST")
```

#In-Class Exercise 3

```{r}
pacman::p_load(sf, spNetwork, tmap, classInt, viridis, tidyverse)
```

```{r}
network <- st_read(dsn="data/geospatial", layer = "Punggol_St")
childcare <- st_read(dsn="data/geospatial", layer ="Punggol_CC")
```

```{r}
tmap_mode('view')
tm_shape(childcare) +
  tm_dots() +
  tm_shape(network) +
  tm_lines()
tmap_mode('plot')
```

```{r}
lixels <- lixelize_lines(network, 750, mindist = 375)
```

```{r}
samples <- lines_center(lixels)
```

```{r}
densities <- nkde(network, # IMPORTANT
                  events = childcare,
                  w = rep(1, nrow(childcare)), #IMPORTANT
                  samples = samples, #IMPORTANT
                  kernel_name = 'quartic', #kernel methods
                  bw = 300, #bandwith
                  div = "bw",
                  method = "simple",
                  digits = 1,
                  tol = 1,
                  grid_shape= c(1, 1),
                  max_depth = 8,
                  agg = 5, #we aggregate events within a 5m radius(faster calculation)
                  sparse = TRUE,
                  verbose = FALSE)
```

```{r}
samples$density <- densities
lixels$density <- densities
# rescaling to help the mapping
samples$density <- samples$density*1000
lixels$density <- lixels$density*1000
```

```{r}
tmap_mode('view')
tm_shape(lixels) +
  tm_lines(col="density") +
  tm_shape(childcare) +
  tm_dots()
tmap_mode("plot")
```
