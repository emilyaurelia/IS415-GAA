---
title: "In-class Exercise 5: Global and Local Measures of Spatial Autocorrelation - sfdep methods"
author: "Emily Aurelia"
format:
  html:
    toc-depth: 4
execute: 
  warning: false #to remove the warning in the webpage
date: "`r Sys.Date()`"
---

## Load packages

```{r}
pacman::p_load(sf, sfdep, tmap, tidyverse)
```

## Data

```{r}
hunan <- st_read(dsn = "data/geospatial", layer = "Hunan")
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

```{r}
hunan_GDPPC <- left_join(hunan, hunan2012) %>% select(1:4, 7, 15)
```

## Plot the choropleth map

```{r}
tmap_mode("plot")
tm_shape(hunan_GDPPC) +
  tm_fill("GDPPC",
          style = "quantile",
          palette = "Blues",
          title = "GDPPC") +
  tm_layout(main.title = "Distribution of GDP per capita by county, Hunan Province",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```

### Deriving contiguity weights: Queen's method

```{r}
wm_q <- hunan_GDPPC %>% mutate(nb = st_contiguity(geometry),
                               wt = st_weights(nb,
                                               style = "W"),
                               .before = 1 #the two things that are derived will be put before the first column (appear in front of the table)
                               #queen = TRUE
                               )
```

This code combines the computing of contiguity spatial weights with row-standardised weight matrix in hands-on exercise 5

## Moran I

```{r}
moranI <- global_moran(wm_q$GDPPC,
                       wm_q$nb,
                       wm_q$wt)
glimpse(moranI)
#reality need more than one data point for this 
```

```{r}
global_moran_test(wm_q$GDPPC,
                  wm_q$nb,
                  wm_q$wt)
#the statistical test to find out if the statistical value is significant or not
```

The Monte Carlo simulation is usually used to calculate the statistical test. For sfdep, it is supported by global_moran_perm(). It is also a good practice to set the seed using set.seed().

```{r}
set.seed(1234)
global_moran_perm(wm_q$GDPPC,
                  wm_q$nb,
                  wm_q$wt,
                  nsim = 999)
#to do permutation (to simulate), the number of simulation in this case is 100 as the iteration starts from 0
```

We always test the null hypothesis, show if there is confidence in proving the null hypothesis
