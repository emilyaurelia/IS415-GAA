[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-Home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "",
    "text": "With the growing of smart cities all over the world, it is important for the government to be able to know the movement of the people and see what they can do to make the lives of the people better. This requires data of the human mobility to know where people are moving from and to. As now we have the advancement of Information and Communication Technologies (ICT) like smart phones, smart watches, and GPS devices, we can acquire large volumes of data relating to human mobility. With this, we can better examine the movement of the people in the city and better plan and manage the architecture and services provided in the smart city.\nIn this Take Home exercise, we will be applying appropriate spatial point patterns analysis methods to discover the geographical and spatio-temporal distribution of Grab hailing services locations in Singapore."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#packages",
    "title": "Take-Home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "Packages",
    "text": "Packages\n\nsf - allows import, management, manipulation, analysis and processing of vector-based geospatial in R\nspatstat - offers a comprehensive set of tools for statistical analysis of spatial point patterns, will be used to perform 1st and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer\nraster - reads, writes, manipulates, analyses and model for gridded spatial data, used to convert image output generate by spatstat into raster format\nmaptools - provides a set of tools for manipulating geographic data, mainly use to convert spatial objects into ppp format of spatstat\ntmap - provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API\nreadr - for fast and efficient reading of rectangular data files\ntidyr - to easily reshape and tidy data, including functions for pivoting and gathering columns\ndplyr - useful for data manipulation, providing functions for filtering, summarizing, and transforming data frames\narrow - enables efficient data interchange between different systems and languages by standardizing how data is represented in memory\n\n\npacman::p_load(sf, spatstat, raster, maptools, tmap, tidyverse, arrow, spNetwork, viridis, classInt, colorspace, gifski)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#aspatial-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#aspatial-data",
    "title": "Take-Home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "Aspatial Data",
    "text": "Aspatial Data\n\nGrab-Posisi - a dataset of Grab taxi location points\n\n\ngrab &lt;- open_dataset(\"data/aspatial/GrabPosisi\") |&gt; as_tibble()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#geospatial-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#geospatial-data",
    "title": "Take-Home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "Geospatial Data",
    "text": "Geospatial Data\n\nRoad data set from OpenStreetMap (Malaysia, Singapore, and Brunei coverage)\n\n\nroad &lt;- st_read(dsn = \"data/geospatial/malaysia-singapore-brunei-latest-free.shp\", layer = \"gis_osm_roads_free_1\")\n\nReading layer `gis_osm_roads_free_1' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\geospatial\\malaysia-singapore-brunei-latest-free.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1759836 features and 10 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 99.66041 ymin: 0.8021131 xmax: 119.2601 ymax: 7.514393\nGeodetic CRS:  WGS 84\n\n\n\nMaster Plan 2019 Subzone Boundary (No Sea)\n\n\nmpsz2019 &lt;- st_read(\"data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaGEOJSON.geojson\")\n\nReading layer `MasterPlan2019SubzoneBoundaryNoSeaGEOJSON' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\geospatial\\MasterPlan2019SubzoneBoundaryNoSeaGEOJSON.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#aspatial-data-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#aspatial-data-1",
    "title": "Take-Home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "Aspatial Data",
    "text": "Aspatial Data\n\nConverting data type of pingtimestamp(int) to date-time(dttm)\nAs we want to find the starting and ending points of the Grab taxi location, we need to find the starting and ending time of the trip. However, the current pingtimestamp is in the integer format, so that currently it is not that readable. As such, we need to transform the data type of pingtimestamp into date-time format.\n\ngrab$pingtimestamp &lt;- as_datetime(grab$pingtimestamp)\nglimpse(grab)\n\n\n\nFinding the start of the trip\nNow we find the starting location by arranging the pingtimestamp in an ascending order for each trip and get the earliest time.\n\nstart_grab &lt;- grab %&gt;%\n  group_by(trj_id) %&gt;% # group based on the trips\n  arrange(pingtimestamp) %&gt;% # arrange the time in ascending order\n  filter(row_number() == 1) %&gt;% # choose the first timing\n  mutate(weekday = wday(pingtimestamp,\n                        label = TRUE,\n                        abbr = TRUE),\n         start_hr = hour(pingtimestamp),\n         day = factor(mday(pingtimestamp)))\n\n\n\nFinding the end of the trip\nWe also need to find the ending location by arranging the pingtimestamp in an descending order for each trip and get the latest time.\n\nend_grab &lt;- grab %&gt;%\n  group_by(trj_id) %&gt;% # group based on the trips\n  arrange(desc(pingtimestamp)) %&gt;% # arrange the time in descending order\n  filter(row_number() == 1) %&gt;% # choose the first timing\n  mutate(weekday = wday(pingtimestamp,\n                        label = TRUE,\n                        abbr = TRUE),\n         start_hr = hour(pingtimestamp),\n         day = factor(mday(pingtimestamp)))\n\nend_grab\n\n\n\nConvert the dataframe into sf and change the projection coordinate system\nAfter finding the starting and ending timing for each trip, we want to make the two dataframes to be an sf data type to be able to process it with the other files. First, we need to change it to an sf data type using the st_as_sf() function to change the longitude(rawlng) and latitude(rawlat) of the starting locations into points. Then we transform the projection coordinate system to Singapore’s.\n\nstart_sf &lt;- st_as_sf(start_grab,\n                      coords = c(\"rawlng\", \"rawlat\"),\n                      crs = 4326) |&gt;\n  st_transform(crs = 3414)\n\nend_sf &lt;- st_as_sf(end_grab,\n                      coords = c(\"rawlng\", \"rawlat\"),\n                      crs = 4326) |&gt;\n  st_transform(crs = 3414)\n\n\n\nSave the sf into RDS and call to use\nAs the dataset can be big and it takes a long time to load,\n\nsaveRDS(start_sf, file = \"start_sf.rds\")\nsaveRDS(end_sf, file = \"end_sf.rds\")\n\n\nstart_sf &lt;- readRDS(\"start_sf.rds\")\nend_sf &lt;- readRDS(\"end_sf.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#geospatial-data-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#geospatial-data-1",
    "title": "Take-Home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "Geospatial Data",
    "text": "Geospatial Data\n\nCheck the projection layers of the Road and the Master Plan 2019 Subzone Boundary\n\nroadmpsz2019\n\n\n\nst_crs(road)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\n\n\n\nst_crs(mpsz2019)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\n\n\n\nFrom the result of the code above, we can see that both of the data have the same projection, which is WGS 84 with the CRS of EPSG 4326.\n\n\nChange the projection to Singapore’s projected coordinate system\nHowever, the projection mentioned above does not fit the Singapore’s projection, so we need to change both of the projection to SVY21 / Singapore TM with the CRS of EPSG 3414.\n\nroadmpsz2019\n\n\n\nroad &lt;- st_transform(road, 3414)\nst_crs(road)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nmpsz2019 &lt;- st_zm(mpsz2019, zm=\"Z\")\nmpsz2019 &lt;- st_transform(mpsz2019, 3414)\nst_crs(mpsz2019)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\n\n\nSet the Singapore Mainland boundary\nWe already set the projection coordinate system for mpsz2019 and road to the Singapore’s projected coordinate system. With this, we can find the boundary for Singapore using st_union() of the mpsz2019.\nSince we want to exclude the outer islands, we need to remove the polygons of these outer islands using the filter() function from the dplyr package.\n\nmain_sg &lt;- mpsz2019 %&gt;% filter(!grepl(\"ISLANDS\", Description))\n\nThen we can plot the Singapore mainland to see the mainland boundary of our Singapore map.\n\nsg_boundary &lt;- st_union(main_sg)\nplot(sg_boundary)\n\n\n\n\n\n\nFiltering to Singapore roads\nNow, we need to filter the roads to those which are in Singapore. This can be done using st_intersection() or st_filter()\n\nroad_sg &lt;- st_intersection(road, sg_boundary)\nplot(road_sg[\"geometry\"])\n\n\nsg_road &lt;- st_filter(road, sg_boundary, .pred = st_intersects)\nplot(sg_road[\"geometry\"])\n\nAs the running time of st_intersection() and st_filter() to filter the roads in Singapore is too long, we can save the data inside an RDS file with saveRDS(), so the next time we want to use the data, we can just load this file using readRDS()\n\nsaveRDS(sg_road, file = \"sg_road.rds\")\nsaveRDS(road_sg, file = \"road_sg.rds\")\n\n\nsg_road &lt;- readRDS(\"sg_road.rds\")\nplot(sg_road[\"geometry\"])\n\n\n\n\nThe plot above shows all the roads that are available in Singapore. It can also be divided into classes as seen below.\n\nclasses &lt;- list()\nfor (class in unique(sg_road$fclass)){\n  classes[[class]] &lt;- qtm(sg_road |&gt; filter(sg_road$fclass == class)) +\n    tm_layout(main.title = class)\n}\n\ntmap_arrange(classes)\n\n\n\n\nAs we can see from the plot above, there are a lot of roads available in Singapore. However, not all roads can be used by cars, and some of the roads are not accessible by the passengers. As such, we need to filter out the roads so that we only use the roads that can be accessible as a pick-up point, which is the starting location of the trip.\n\nsg_road_filtered &lt;- sg_road %&gt;% \n  filter(sg_road$fclass %in% c('primary', 'secondary', 'residential', 'tertiary', 'trunk', 'motorway', 'motorway_link', 'primary_link', 'secondary_link', 'tertiary_link', 'trunk_link', 'unclassified'))\nplot(sg_road_filtered[\"geometry\"])\n\n\n\n\nWe can save sg_road_filtered into an RDS file to load it quicker in the future.\n\nsaveRDS(sg_road_filtered, \"sg_road_filtered.rds\")\n\n\nsg_road_filtered &lt;- readRDS(\"sg_road_filtered.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-Class Exercise 2",
    "section": "",
    "text": "Load the libraries needed for this In-Class Exercise\npacman::p_load(arrow, lubridate, tidyverse, tmap, sf)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#getting-started",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#getting-started",
    "title": "In-Class Exercise 2",
    "section": "",
    "text": "Load the libraries needed for this In-Class Exercise\npacman::p_load(arrow, lubridate, tidyverse, tmap, sf)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-grab-posisi-dataset",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-grab-posisi-dataset",
    "title": "In-Class Exercise 2",
    "section": "Importing Grab-Posisi Dataset",
    "text": "Importing Grab-Posisi Dataset\n\n\nImport Dataset\ndf &lt;- read_parquet(\"data/GrabPosisi/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\")\ndf\n\n\n\n\nConvert data type of pingtimestamp from integer to date-time\ndf$pingtimestamp &lt;- as_datetime(df$pingtimestamp)\n\n\n\n\nSave the reformatted df into a new rds file called part0.rds\nwrite_rds(df, \"data/rds/part0.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#extracting-trip-starting-locations",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#extracting-trip-starting-locations",
    "title": "In-Class Exercise 2",
    "section": "Extracting trip starting locations",
    "text": "Extracting trip starting locations\n\n\nCode\norigin_df &lt;- df %&gt;% \n  group_by(trj_id) %&gt;% \n  arrange(pingtimestamp) %&gt;% #arrange the time in ascending order\n  filter(row_number()==1) %&gt;% #choose the first location \n  mutate(weekday = wday(pingtimestamp, \n                        label=TRUE,\n                        abbr=TRUE),\n         start_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n\norigin_df"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#extracting-trip-ending-locations",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#extracting-trip-ending-locations",
    "title": "In-Class Exercise 2",
    "section": "Extracting trip ending locations",
    "text": "Extracting trip ending locations\n\n\nCode\ndestination_df &lt;- df %&gt;% \n  group_by(trj_id) %&gt;% \n  arrange(desc(pingtimestamp)) %&gt;% #arrange the time in descending order\n  filter(row_number()==1) %&gt;% #choose the first location \n  mutate(weekday = wday(pingtimestamp, \n                        label=TRUE,\n                        abbr=TRUE),\n         end_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n\ndestination_df\n\n\n\n\nto save the dataframe as a rds file\n#can use echo: false so that this code is not shown\nwrite_rds(origin_df, \"data/rds/origin_df.rds\")\n\nwrite_rds(destination_df, \"data/rds/destination_df.rds\")\n\n\n\n\nto read the rds file\norigin_df &lt;- read_rds(\"data/rds/origin_df.rds\")\ndestination_df &lt;- read_rds(\"data/rds/destination_df.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "",
    "text": "Spatial Point Pattern Analysis: to evaluate the patter or distribution of a set of points on a surface.\nCan be the location of:\n\nevents such as crime, traffic accident and disease onset\nbusiness services such as coffee and fastfood outlets, or facilities such as childcare and eldercare\n\nThis hands-on exercise aims to discover spatial point processes of childcare centres in Singapore using function of spatstat\nQuestions to answer:\n\nare the childcare centres in Singapore randomly distributed throughout the country?\nif the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#overview",
    "title": "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "",
    "text": "Spatial Point Pattern Analysis: to evaluate the patter or distribution of a set of points on a surface.\nCan be the location of:\n\nevents such as crime, traffic accident and disease onset\nbusiness services such as coffee and fastfood outlets, or facilities such as childcare and eldercare\n\nThis hands-on exercise aims to discover spatial point processes of childcare centres in Singapore using function of spatstat\nQuestions to answer:\n\nare the childcare centres in Singapore randomly distributed throughout the country?\nif the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#data",
    "title": "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Data",
    "text": "Data\n\nCHILDCARE (geojson format) - a point feature data providing both location and attribute information of childcare centres\nMP14_SUBZONE_WEB_PL - a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. (ESRI shapefile format, downloaded from data.gov.sg)\nCostalOutline, a polygon feature data showing the national boundary of Singapore. (provided by SLA, ESRI shapefile format)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#installing-and-loading-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#installing-and-loading-r-packages",
    "title": "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Installing and Loading R packages",
    "text": "Installing and Loading R packages\n\nsf - designed to import, manage, and process vector-based geospatial in R\nspatstat - has a wide-range of useful functions for point pattern analysis, will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer\nraster - reads, writes, manipulates, analyses and model of gridded spatial data, used to convert image output generate by spastat into raster format\nmaptools - provides a set of tools for manipulating geographic data, mainly use to convert Spatial objects into ppp format of spatstat\ntmap - provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API\n\n\npacman::p_load(maptools, sf, raster, spatstat, tmap)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#spatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#spatial-data-wrangling",
    "title": "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Spatial Data Wrangling",
    "text": "Spatial Data Wrangling\n\nImporting the spatial data\nst_read() of sf package - to import the three geospatial data sets into R\n\nchildcare_sf &lt;- st_read(\"data/geospatial/ChildCareServices.geojson\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `ChildCareServices' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data\\geospatial\\ChildCareServices.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf &lt;- st_read(dsn = \"data/geospatial\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nEnsure that the three geospatial data set are projected in the same projection system\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nSetting the correct crs for mpsz_sf and sg_sf\n\nmpsz_sf &lt;- st_set_crs(mpsz_sf, 3414)\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nsg_sf &lt;- st_set_crs(sg_sf, 3414)\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\nMapping the geospatial data sets\nPlot a map to show the spatial patterns\n\ntmap_mode(\"plot\")\nqtm(mpsz_sf) +\n  qtm(childcare_sf)\n\n\n\n\nThe geospatial layers are within the same map extend, which means that their referencing systems and coordinate values referred to similar spatial context. !Important in geospatial analysis!\nPrepare a pin map\n\ntmap_mode('view')\ntm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\n\nThis interactive mode allows us to navigate and zoom around the map freely. We can:\n\nquery the information of each simple feature (the point) by clicking them\nchange the background of the internet map layer (there are three internet map layers: ESRI.WorldGrayCanvas, OpenStreetMap, ESRI.WorldTopoMap)\n\nReminder: Always remember to switch back to plot mode after the interactive map because each interactive map will consume a connection. You should also display a max of 10 interactive maps (not too excessively) in one RMarkdown document when publishing in Netlify\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\nConverting simple feature data frame to sp’s Spatial* class\n\nConverting sf data frames to sp’s Spatial* class\nas_Spatial() of sf - convert the three geospatial data ffrom simple feature data frame to sp’s Spatial* class\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1925 \nextent      : 11810.03, 45404.24, 25596.33, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;100044&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;44, TELOK BLANGAH DRIVE, #01 - 19/51, SINGAPORE 100044&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;PCF SPARKLETOTS PRESCHOOL @ TELOK BLANGAH BLK 44 (CC)&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;349C54F201805938&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                                            &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;99982&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;35, ALLANBROOKE ROAD, SINGAPORE 099982&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;ISLANDER PRE-SCHOOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;4F63ACF93EFABE7F&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\n\n\nConverting the Spatial* class into generic sp format\nspastat requires the analytical data in pp object form\nThe way to transform Spatial* classes into ppp object:\nSpatial* classes –&gt; Spatial object –&gt; ppp object\nConvert Spatial* classes to generic sp objects.\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\nmpsz_sp &lt;- as(mpsz, \"SpatialPolygons\")\n\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1925 \nextent      : 11810.03, 45404.24, 25596.33, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nmpsz_sp\n\nclass       : SpatialPolygons \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\n\nConverting the generic sp format into spatstat’s ppp format\nas.ppp() function of spatstat - to convert the spatial data into spatstat’s ppp object format\n\nchildcare_ppp &lt;- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1925 points\nwindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n\n\nPlot childcare_ppp\n\nplot(childcare_ppp)\n\n\n\n\nSummary statistic of the ppp object\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1925 points\nAverage intensity 2.417323e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n                    (33590 x 23700 units)\nWindow area = 796335000 square units\n\n\nNotice the warning message about duplicates. In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.\n\n\nHandling duplicated points\nCheck hte duplication in a ppp object\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nmultiplicity() - count the number of co-incidence point\n\nmultiplicity(childcare_ppp)\n\nTo know how many locations have more than one point event\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 338\n\n\nTo view the locations of the duplicated point events\n\ntmap_mode('view')\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nThree ways to overcome data duplication:\n\nDelete the duplicates, but will lose some useful point events\njittering - add a small perturbation to the duplicate points so that they do not occupy the exact same space\nmake each point “unique” and then attach the duplicates of the points to the patterns as marks, as attributes of the points –&gt; would need analytical techniques that take into account these marks\n\nJittering approach:\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\n\nCreating owin object\nIt is a good practice to confine the analysis with a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\nConvert sgSpatialPolygon object into owin object of spatstat\n\nsg_owin &lt;- as(sg_sp, \"owin\")\n\n\nplot(sg_owin)\n\n\n\n\n\nsummary(sg_owin)\n\n\n\nCombining point events object and owin object\nExtract childcare events that are located within Singapore\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\nThe output object combined both the point and polygon feature in one ppp object class as shown below.\n\nsummary(childcareSG_ppp)\n\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#first-order-spatial-point-patterns-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#first-order-spatial-point-patterns-analysis",
    "title": "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "First-order Spatial Point Patterns Analysis",
    "text": "First-order Spatial Point Patterns Analysis\nLearn how to perform first-order SPPA by using spatstat package.\n\nderiving kernel density estimation (KDE) layer for visualising and exploring the intensity of point processes,\nperforming Confirmatory Spatial Point Patterns Analysis by using Nearest Neighbour statistics.\n\n\nKernel Density Estimation\nLearn how to compute the kernel density estimation (KDE) of childcare services in Singapore\nComputing kernel density estimation using automatic bandwidth selection method\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\nThe intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is FALSE.\n\n\nkde_childcareSG_bw &lt;- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nplot(kde_childcareSG_bw)\n\n\n\n\nThe density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in “number of points per square meter”.\nRetrieve the bandwidth used to compute the kde layer\n\nbw &lt;- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n306.6986 \n\n\nRescalling KDE values\nrescale() - convert the unit measurement from meter to kilometer\n\nchildcareSG_ppp.km &lt;- rescale(childcareSG_ppp, 1000, \"km\")\n\n\nkde_childcareSG.bw &lt;- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\n\n\nWorking with different automatic bandwidth methods\nThree other functions to determine bandwidth: bw.CvL(), bw.scott(), bw.ppl()\n\n bw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\n\n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.159749 1.396455 \n\n\n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.3066986 \n\n\nbw.ppl() - produce more appropriate values when the pattern consists predominantly of tight clusters\nbw.diggle() - when the purpose of study is to detect a single tight cluster in the midst of random noise\nbw.diggle vs bw.ppl\n\nkde_childcareSG.ppl &lt;- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")\n\n\n\n\n\n\nWorking with different kernel methods\nBy default, the kernel method used in density.ppp() is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics.\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#fixed-and-adaptive-kde",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#fixed-and-adaptive-kde",
    "title": "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Fixed and Adaptive KDE",
    "text": "Fixed and Adaptive KDE\n\nComputing KDE by using fixed bandwidth\nCompute a KDE layer by defining a bandwidth of 600 meter\n\nkde_childcareSG_600 &lt;- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\nSince the unit measurement of childcareSG_ppp.km is in kilometer, the value in sigma=0.6 represents 0.6km\n\nVery sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural\n\n\n\nComputing KDE by using adaptive bandwidth\nTo overcome the problem faced in fixed bandwidth\ndensity.adaptive() of spatstat - to derive adaptive kernel density estimation\n\nkde_childcareSG_adaptive &lt;- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\nCompare the fixed and adaptive kernel density estimation outputs\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\n\nConverting KDE output into grid object\nResult is the same, just for suitable mapping purposes\n\ngridded_kde_childcareSG_bw &lt;- as.SpatialGridDataFrame.im(kde_childcareSG.bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\nConverting gridded output into raster\nraster() of raster package - convert the gridded kernel density objects into RasterLayer object\n\nkde_childcareSG_bw_raster &lt;- raster(gridded_kde_childcareSG_bw)\n\nProperty of kde_childcareSG_bw_raster RasterLayer\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -1.014191e-14, 32.45281  (min, max)\n\n\nAssigning projection systems\nInclude the CRS information on kde_childcareSG_bw_raster RasterLayer\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : v \nvalues     : -1.014191e-14, 32.45281  (min, max)\n\n\n\n\nVisualising the output in tmap\nDisplay the raster in cartographic quality map using tmap package.\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\nComparing Spatial Point Patterns using KDE\nExtracting study area\nExtract the target planning areas\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\nPlotting target planning areas\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\nConverting the spatial point data frame into generic sp format\nConvert these SpatialPolygonsDataFrame layers into generic spatialpolygons layers.\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\nCreating owin object\nConvert these SpatialPolygons objects into owin objects that is required by spatstat.\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\nCombining childcare points and the study area\nExtract childcare that is within the specific region\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\nrescale() function - to trasnform the unit of measurement from metre to kilometre.\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nTo plot these four study areas and the locations of the childcare centres.\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\nComputing KDE\nTo compute the KDE of these four planning area. bw.diggle method is used to derive the bandwidth of each\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\n\n\n\n\nComputing fixed bandwidth KDE\nFor comparison purposes, we will use 250m as the bandwidth.\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#nearest-neighbour-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#nearest-neighbour-analysis",
    "title": "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Nearest Neighbour Analysis",
    "text": "Nearest Neighbour Analysis\nPerform the Clark-Evans test of aggregation for a spatial point pattern by using clarkevans.test() of statspat.\nThe test hypotheses are:\nHo = The distribution of childcare services are randomly distributed.\nH1= The distribution of childcare services are not randomly distributed.\nThe 95% confident interval will be used.\n\nTesting spatial point patterns using Clark and Evans Test\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.5062, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\nWhat conclusion can you draw from the test result?\nThe output shows that the p-value is less than 0.05. Therefore, we reject the null hypothesis and conclude that the distribution of childcare services are not randomly distributed. We can also see that the R value is less than 1. This means that the distribution of childcare services are clustered.\n\n\nClark and Evans Test: Choa Chu Kang planning area\nclarkevans.test() of spatstat - to performs Clark-Evans test of aggregation for childcare centre in Choa Chu Kang planning area.\n\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.8594, p-value = 0.02068\nalternative hypothesis: two-sided\n\n\n\n\nClark and Evans Test: Tampines planning area\nThe similar test is used to analyse the spatial point patterns of childcare centre in Tampines planning area.\n\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.68387, p-value = 6.087e-11\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#second-order-spatial-point-patterns-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#second-order-spatial-point-patterns-analysis",
    "title": "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Second-order Spatial Point Patterns Analysis",
    "text": "Second-order Spatial Point Patterns Analysis"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#analysing-spatial-point-process-using-g-function",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#analysing-spatial-point-process-using-g-function",
    "title": "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Analysing Spatial Point Process Using G-Function",
    "text": "Analysing Spatial Point Process Using G-Function\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, you will learn how to compute G-function estimation by using Gest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\nChoa Chu Kang planning area\nComputing G-function estimation\nGest() of spatstat package - to compute G-function\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-function\n\nG_CK.csr &lt;- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\nTampines planning area\nComputing G-function estimation\n\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\nTo perform hypothesis testing\n\nG_tm.csr &lt;- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_tm.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#analysing-spatial-point-process-using-f-function",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#analysing-spatial-point-process-using-f-function",
    "title": "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Analysing Spatial Point Process Using F-Function",
    "text": "Analysing Spatial Point Process Using F-Function\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, you will learn how to compute F-function estimation by using Fest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\nChoa Chu Kang planning area\nComputing F-function estimation\nFest() of spatat package - to compute F-function\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with F-function\n\nF_CK.csr &lt;- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_CK.csr)\n\n\n\n\n\n\nTampines planning area\nComputing F-function estimation\nMonte Carlo test with F-function\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\nHypothesis Testing\n\nF_tm.csr &lt;- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_tm.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#analysing-spatial-point-process-using-k-function",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#analysing-spatial-point-process-using-k-function",
    "title": "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Analysing Spatial Point Process Using K-Function",
    "text": "Analysing Spatial Point Process Using K-Function\nK-function measures the number of events found up to a given distance of any particular event. In this section, you will learn how to compute K-function estimates by using Kest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\nChoa Chu Kang planning area\nComputing K-function estimate\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nHypothesis Testing\n\nK_ck.csr &lt;- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\nTampines planning area\nComputing K-function estimation\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nHypothesis Testing\n\nK_tm.csr &lt;- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#analysing-spatial-point-process-using-l-function",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#analysing-spatial-point-process-using-l-function",
    "title": "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Analysing Spatial Point Process Using L-Function",
    "text": "Analysing Spatial Point Process Using L-Function\nIn this section, you will learn how to compute L-function estimation by using Lest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\nChoa Chu Kang planning area\nComputing L-function estimation\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.\nHypothesis Testing\n\nL_ck.csr &lt;- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\nTampines planning area\nComputing L-function estimate\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nHypothesis Testing\n\nL_tm.csr &lt;- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this section, I will install and load tidyverse and sf packages\n\npacman::p_load(tidyverse, sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this section, I will install and load tidyverse and sf packages\n\npacman::p_load(tidyverse, sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\n\nImporting polygon feature data in shapefile format\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nImporting polyline feature data in shapefile form\n\ncyclingpath = st_read(dsn = \"data/geospatial\",\n                      layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\n\nImporting GIS data in kml format\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Checking the Content of A Simple Feature Data Frame",
    "text": "Checking the Content of A Simple Feature Data Frame\n\nWorking with st_geometry()\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\n\n\nWorking with glimpse()\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n\nWorking with head()\n\nhead(mpsz, 5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Plotting the Geospatial Data",
    "text": "Plotting the Geospatial Data\n\n\n\n\n\n\nplot(st_geometry(mpsz))\n\n\n\n\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-projection",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-projection",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Working with Projection",
    "text": "Working with Projection\n\nAssigning EPSG code to a simple feature data frame\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\nTransforming the projection of preschool from wgs84 to svy21\n\npreschool3414 &lt;- st_transform(preschool,\n                              crs = 3414)\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-and-converting-an-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-and-converting-an-aspatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Importing and Converting An Aspatial Data",
    "text": "Importing and Converting An Aspatial Data\n\nImporting the aspatial data\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,457 × 75\n       id listing_url            scrape_id last_scraped source name  description\n    &lt;dbl&gt; &lt;chr&gt;                      &lt;dbl&gt; &lt;date&gt;       &lt;chr&gt;  &lt;chr&gt; &lt;lgl&gt;      \n 1  71609 https://www.airbnb.co…   2.02e13 2023-12-27   previ… Vill… NA         \n 2  71896 https://www.airbnb.co…   2.02e13 2023-12-26   city … Home… NA         \n 3  71903 https://www.airbnb.co…   2.02e13 2023-12-26   city … Home… NA         \n 4 275343 https://www.airbnb.co…   2.02e13 2023-12-26   city … Rent… NA         \n 5 275344 https://www.airbnb.co…   2.02e13 2023-12-26   city … Rent… NA         \n 6 289234 https://www.airbnb.co…   2.02e13 2023-12-27   previ… Home… NA         \n 7 294281 https://www.airbnb.co…   2.02e13 2023-12-27   city … Rent… NA         \n 8 324945 https://www.airbnb.co…   2.02e13 2023-12-26   city … Rent… NA         \n 9 330095 https://www.airbnb.co…   2.02e13 2023-12-26   city … Rent… NA         \n10 369141 https://www.airbnb.co…   2.02e13 2023-12-27   city … Plac… NA         \n# ℹ 3,447 more rows\n# ℹ 68 more variables: neighborhood_overview &lt;chr&gt;, picture_url &lt;chr&gt;,\n#   host_id &lt;dbl&gt;, host_url &lt;chr&gt;, host_name &lt;chr&gt;, host_since &lt;date&gt;,\n#   host_location &lt;chr&gt;, host_about &lt;chr&gt;, host_response_time &lt;chr&gt;,\n#   host_response_rate &lt;chr&gt;, host_acceptance_rate &lt;chr&gt;,\n#   host_is_superhost &lt;lgl&gt;, host_thumbnail_url &lt;chr&gt;, host_picture_url &lt;chr&gt;,\n#   host_neighbourhood &lt;chr&gt;, host_listings_count &lt;dbl&gt;, …\n\n\n\n\nCreating a simple feature data frame from an aspatial data frame\n\nlistings_sf &lt;- st_as_sf(listings,\n                        coords = c(\"longitude\", \"latitude\"),\n                        crs = 4326) %&gt;%\n  st_transform(crs = 3414)\n\n\nglimpse(listings_sf)\n\nRows: 3,457\nColumns: 74\n$ id                                           &lt;dbl&gt; 71609, 71896, 71903, 2753…\n$ listing_url                                  &lt;chr&gt; \"https://www.airbnb.com/r…\n$ scrape_id                                    &lt;dbl&gt; 2.023123e+13, 2.023123e+1…\n$ last_scraped                                 &lt;date&gt; 2023-12-27, 2023-12-26, …\n$ source                                       &lt;chr&gt; \"previous scrape\", \"city …\n$ name                                         &lt;chr&gt; \"Villa in Singapore · ★4.…\n$ description                                  &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ neighborhood_overview                        &lt;chr&gt; NA, NA, \"Quiet and view o…\n$ picture_url                                  &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_id                                      &lt;dbl&gt; 367042, 367042, 367042, 1…\n$ host_url                                     &lt;chr&gt; \"https://www.airbnb.com/u…\n$ host_name                                    &lt;chr&gt; \"Belinda\", \"Belinda\", \"Be…\n$ host_since                                   &lt;date&gt; 2011-01-29, 2011-01-29, …\n$ host_location                                &lt;chr&gt; \"Singapore\", \"Singapore\",…\n$ host_about                                   &lt;chr&gt; \"Hi My name is Belinda -H…\n$ host_response_time                           &lt;chr&gt; \"N/A\", \"N/A\", \"N/A\", \"wit…\n$ host_response_rate                           &lt;chr&gt; \"N/A\", \"N/A\", \"N/A\", \"100…\n$ host_acceptance_rate                         &lt;chr&gt; \"100%\", \"100%\", \"100%\", \"…\n$ host_is_superhost                            &lt;lgl&gt; FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_picture_url                             &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_neighbourhood                           &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ host_listings_count                          &lt;dbl&gt; 5, 5, 5, 51, 51, 5, 7, 51…\n$ host_total_listings_count                    &lt;dbl&gt; 15, 15, 15, 68, 68, 15, 8…\n$ host_verifications                           &lt;chr&gt; \"['email', 'phone']\", \"['…\n$ host_has_profile_pic                         &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                &lt;chr&gt; NA, NA, \"Singapore, Singa…\n$ neighbourhood_cleansed                       &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ neighbourhood_group_cleansed                 &lt;chr&gt; \"East Region\", \"East Regi…\n$ property_type                                &lt;chr&gt; \"Private room in villa\", …\n$ room_type                                    &lt;chr&gt; \"Private room\", \"Private …\n$ accommodates                                 &lt;dbl&gt; 3, 1, 2, 1, 1, 4, 2, 1, 1…\n$ bathrooms                                    &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ bathrooms_text                               &lt;chr&gt; \"1 private bath\", \"Shared…\n$ bedrooms                                     &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ beds                                         &lt;dbl&gt; 3, 1, 2, 1, 1, 5, 1, 1, 1…\n$ amenities                                    &lt;chr&gt; \"[]\", \"[]\", \"[]\", \"[]\", \"…\n$ price                                        &lt;chr&gt; \"$150.00\", \"$80.00\", \"$80…\n$ minimum_nights                               &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ maximum_nights                               &lt;dbl&gt; 365, 365, 365, 999, 999, …\n$ minimum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ maximum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ minimum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ maximum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ minimum_nights_avg_ntm                       &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ maximum_nights_avg_ntm                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ calendar_updated                             &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              &lt;dbl&gt; 30, 30, 30, 6, 6, 29, 30,…\n$ availability_60                              &lt;dbl&gt; 34, 60, 60, 6, 6, 33, 60,…\n$ availability_90                              &lt;dbl&gt; 55, 90, 90, 6, 6, 54, 90,…\n$ availability_365                             &lt;dbl&gt; 55, 91, 91, 183, 183, 54,…\n$ calendar_last_scraped                        &lt;date&gt; 2023-12-27, 2023-12-26, …\n$ number_of_reviews                            &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 1…\n$ number_of_reviews_ltm                        &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 2…\n$ number_of_reviews_l30d                       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ first_review                                 &lt;date&gt; 2011-12-19, 2011-07-30, …\n$ last_review                                  &lt;date&gt; 2020-01-17, 2019-10-13, …\n$ review_scores_rating                         &lt;dbl&gt; 4.44, 4.16, 4.41, 4.40, 4…\n$ review_scores_accuracy                       &lt;dbl&gt; 4.37, 4.22, 4.39, 4.16, 4…\n$ review_scores_cleanliness                    &lt;dbl&gt; 4.00, 4.09, 4.52, 4.26, 4…\n$ review_scores_checkin                        &lt;dbl&gt; 4.63, 4.43, 4.63, 4.47, 4…\n$ review_scores_communication                  &lt;dbl&gt; 4.78, 4.43, 4.64, 4.42, 4…\n$ review_scores_location                       &lt;dbl&gt; 4.26, 4.17, 4.50, 4.53, 4…\n$ review_scores_value                          &lt;dbl&gt; 4.32, 4.04, 4.36, 4.63, 4…\n$ license                                      &lt;chr&gt; NA, NA, NA, \"S0399\", \"S03…\n$ instant_bookable                             &lt;lgl&gt; FALSE, FALSE, FALSE, TRUE…\n$ calculated_host_listings_count               &lt;dbl&gt; 5, 5, 5, 51, 51, 5, 7, 51…\n$ calculated_host_listings_count_entire_homes  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0…\n$ calculated_host_listings_count_private_rooms &lt;dbl&gt; 5, 5, 5, 51, 51, 5, 6, 51…\n$ calculated_host_listings_count_shared_rooms  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            &lt;dbl&gt; 0.13, 0.16, 0.30, 0.15, 0…\n$ geometry                                     &lt;POINT [m]&gt; POINT (41972.5 3639…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Geoprocessing with sf package",
    "text": "Geoprocessing with sf package\n\nBuffering\n\nbuffer_cycling &lt;- st_buffer(cyclingpath,\n                            dist = 5, nQuadSegs = 30)\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]\n\n\n\n\nPoint-in-polygon count\n\nmpsz3414$`PreSch Count` &lt;- lengths(st_intersects(mpsz3414, preschool3414))\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;% st_area()\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Emily",
    "section": "",
    "text": "Hi! I am Emily, a Year 3 Information Systems student majoring in Business Analytics with second major Data Science and Analytics.\nThis website is part of my current course, IS415 Geospatial Analytics and Application, where I will be exploring geospatial analytics with R.\nHope that this website will show all my works and beneficial for me to showcase the works I have done in terms of Geospatial analytics.\nThank you! :)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R",
    "section": "",
    "text": "This hands on exercise will teach how to plot functional and truthful choropleth maps using an R package called tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R",
    "section": "",
    "text": "This hands on exercise will teach how to plot functional and truthful choropleth maps using an R package called tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R",
    "section": "Getting Started",
    "text": "Getting Started\nThere are a total of 5 packages to be used in this exercise:\n\ntmap to plot choropleth maps\nreadr for importing\ntidyr for tidying data\ndplyr for wrangling data\nsf for handling geospatial data\n\nThree of which are part of the tidyverse package.\nTo load these packages:\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data-into-r",
    "title": "Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R",
    "section": "Importing Data into R",
    "text": "Importing Data into R\n\nThe Data\n\nMaster Plan 2014 Subzone Boundary (Web)\n\nin ESRI shapefile format\nfrom data.gov.sg\nconsist of the geographical boundary of Singapore at the planning subzone level\n\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020\n\naspatial data file\nfrom the Department of Statistics, Singapore\nPA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile\n\n\n\n\nImporting Geospatial Data into R\nst_read() from sf package -&gt; to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nTo examine the content of mpsz:\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\nOnly the first 10 records are shown\n\n\nImporting Attribute Data into R\nread_csv() from readr package to import and read respopagsextod2011to2020.csv into RStudio\nassign the file into an R dataframe called popdata\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\nData Preparation\nPrepare a data table with year 2020 values before a thematic map can be prepared. The data should include these variables:\n\nYOUNG: age group 0 to 4 until age group 20 t0 24,\nECONOMY ACTIVE: age group 25 to 29 until age group 60 to 64\nAGED: age group 65 and above\nTOTAL: all age group\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\nData Wrangling\n\nFunctions used: - pivot_wider() of tidyr package - mutate(), filter(), group_by() and select() of dplyr package\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\npopdata\n\n# A tibble: 984,656 × 7\n   PA         SZ                     AG     Sex     TOD                Pop  Time\n   &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;            &lt;dbl&gt; &lt;dbl&gt;\n 1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 1- and 2-Ro…     0  2011\n 2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 3-Room Flats    10  2011\n 3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 4-Room Flats    30  2011\n 4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 5-Room and …    50  2011\n 5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HUDC Flats (exc…     0  2011\n 6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Landed Properti…     0  2011\n 7 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Condominiums an…    40  2011\n 8 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Others               0  2011\n 9 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females HDB 1- and 2-Ro…     0  2011\n10 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females HDB 3-Room Flats    10  2011\n# ℹ 984,646 more rows\n\n\n\nJoining the attribute data and geospatial data\n\nWe need to make sure that the content of the data of PA and SZ with PLN_AREA_N and SUBZONE_N are the same since we want to combine the data in popdata2020 and mpsz together\nchange the value of PA and SZ to uppercase to make it the same with PLN_AREA_N and SUBZONE_N:\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nleft_join() of dplyr to join the geographical data and attribute table using planning subzone name (SUBZONE_N and SZ) as the common identifier\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nThe output of the code above will have the same data format as the left dataframe, in this case is mpsz\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R",
    "section": "Choropleth Mapping Geospatial Data Using tmap",
    "text": "Choropleth Mapping Geospatial Data Using tmap\nChoropleth map is used to show data that is based on spatial areas such as countries, provinces, states, counties or census units.\nThere are two approaches that can be used to prepare thematic map using tmap: - Plotting a thematic map quickly by using qtm() - Plotting highly customisable thematic map by using tmap elements\n\nPlotting a choropleth map quickly by using qtm()\nqtm() provides a good default visualization in many cases\na cartographic standard choropleth map:\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\nLearning Note: - tmap_mode() with “plot” option -&gt; to produce a static map\n-   for interactive mode, use \"view\" option \n-   fill argument is used to map the attribute (i.e DEPENDENCY)\n\n\nCreating a choropleth map by using tmap’s elements\nDisadvantage of qtm(): - makes aesthetic of individual layers harder to control.\ntmap’s drawing elements should be used to make a high quality cartographic choropleth map:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\nDrawing a base map\n\nBasic building block of tmap: - tm_shape(): to define the input data - (one or more) tm_fill(): - (one or more) tm_polygons(): draw the planning subzone polygons\nBase map:\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\nDrawing a choropleth map using tm_polygons()\n\nassign the target variable such as Dependency to tm_polygons() -&gt; to draw a choropleth map showing the geographical distribution os a selected variable by planning subzone\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\nLearning Notes: - Default interval binning used to draw the choropleth map: “pretty - Default colour scheme used: YlOrRd of ColorBrewer - By default, missing values will be shaded in grey\n\nDrawing a choropleth map using tm_fill() and tm_border()\n\ntm_fill(): shades the polygons by using the default colour scheme tm_borders(): adds the borders of the shapefile onto the choropleth map\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nadd boundary of the planning subzones:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\nArguments for tm_borders(): - alpha: transparency between 0 (totally transparent) and 1 (not transparent); by default, the alpha value of the col is used - col: border colour - lwd: border line width, default is 1 - lty: border line type, default is “solid”\n\n\nData Classification methods of tmap\nTen data classification methods of tmap: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks\nstyle argument of tm_fill() or tm_polygons() is used to define a data classification method\n\nPlotting choropleth maps with built-in classification methods\n\na jenks data classification using 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nan equal data classification method using 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nDIY:\na sd data classification method using 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\na quantile data classification method using 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\na kmeans data classification method using 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\na hclust data classification method using 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\na bclust data classification method using 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"bclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\na fisher data classification method using 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\na pretty data classification method using 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nDIY:\na quantile data classification method using 2 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\na quantile data classification method using 6 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\na quantile data classification method using 10 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\na quantile data classification method using 20 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe more the quantile or the classes, the more the color separation and the easier it is to classify which region has higher and lower dependency ratio\n\nPlotting choropleth map with custom break\n\nbreaks argument to customize the breakpoints –&gt; to have n categories, n+1 elements must be specified in the breaks option (ascending order)\nshow descriptive statistics of DEPENDENCY field:\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nFrom the statistic above, looking at the 1st and 3rd quartile, we can set the break points at 0.60, 0.70, 0.80, and 0.90. We also need to include a minimum of 0 and a maximum of 1.00. Thus, our breaks vector is c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#colour-scheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#colour-scheme",
    "title": "Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R",
    "section": "Colour Scheme",
    "text": "Colour Scheme\n\nUsing ColourBrewer palette\npalette argument of tm_fill() to assign the preferred colour:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nwe can use the “-” prefix to reverse the colour shading:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Blues\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#map-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#map-layouts",
    "title": "Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R",
    "section": "Map Layouts",
    "text": "Map Layouts\nRefers to the combination of all map elements into a cohesive map.\n\nMap Legend\nyou can modify the placement, format and appearance of the legend:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMap Style\ntmap_style() to change the layout settings of the map:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\nCartographic Furniture\nto draw other map furniture such as compass, scale bar and grid lines\ntm_compass(): to show compass tm_scale_bar(): to show scale bar tm_grid(): to show grid lines for the map\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nto reset the style:\n\ntmap_style(\"white\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#drawing-small-multiple-choropleth-maps",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#drawing-small-multiple-choropleth-maps",
    "title": "Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R",
    "section": "Drawing Small Multiple Choropleth Maps",
    "text": "Drawing Small Multiple Choropleth Maps\nSmall multiple maps (facet maps): many maps, arranged side by side, sometimes stacked vertically\nCan be plotted in three ways: - assigning multiple values to at least one of the aesthetic arguments - defining a group-by variable in tm_facets - creating multiple stand-alone maps with tmap_arrange()\n\nBy assigning multiple values to at least one of the aesthetic arguments\ndefining ncols in tm_fill():\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\nassigning multiple values to at least one of the aesthetic arguments:\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\nBy defining a group-by variable in tm_facets()\nmultiple small choropleth maps:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nBy creating multiple stand-alone maps with tmap_arrange()\ncreating multiple stand-alone maps with tmap_arrange():\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#mapping-spatial-object-meeting-a-selection-criterion",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#mapping-spatial-object-meeting-a-selection-criterion",
    "title": "Hands-on Exercise 2: Thematic Mapping and GeoVisualisation with R",
    "section": "Mapping Spatial Object Meeting a Selection Criterion",
    "text": "Mapping Spatial Object Meeting a Selection Criterion\nuse selection function to map spatial objects meeting the selection criterion:\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "",
    "text": "This exercise will teach how to:\n\nimport geospatial data using appropriate function(s) of sf package\nimport csv file using functions from readr package\nperform relational join using appropriate join function of dplyr package\ncompute spatial weights using appropriate functions of spdep package\ncalculate spatially lagged variables using appropriate functions of spdep package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#overview",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "",
    "text": "This exercise will teach how to:\n\nimport geospatial data using appropriate function(s) of sf package\nimport csv file using functions from readr package\nperform relational join using appropriate join function of dplyr package\ncompute spatial weights using appropriate functions of spdep package\ncalculate spatially lagged variables using appropriate functions of spdep package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#study-area-and-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#study-area-and-data",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "Study Area and Data",
    "text": "Study Area and Data\n\nHunan county boundary layer - ESRI shapefile format\nHunan_2012.csv - csv file containing Hunan’s local development indicators in 2012\n\n\nGetting Started\nLoad the required packages\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "Getting the Data Into R Environment",
    "text": "Getting the Data Into R Environment\n\nImport shapefile into R environment\nst_read() of sf package - import Hunan shapefile into R, the imported shapefile will be simple features Object of sf\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImport csv file into R environment\nread_csv() of readr package - read Hunan_2012.csv, output is R dataframe class\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\nPerforming relational join\nleft_join() of dplyr package - to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe\n\nhunan &lt;- left_join(hunan, hunan2012) %&gt;% select(1:4, 7, 15)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-regional-development-indicator",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-regional-development-indicator",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "Visualizing Regional Development Indicator",
    "text": "Visualizing Regional Development Indicator\nqtm() of tmap package - prepare a basemap and a choropleth map showing the distribution of GDPPC 2012\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-contiguity-spatial-weights",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-contiguity-spatial-weights",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\npoly2nb() of spdep package - to compute contiguity weight matrices of the study area.\nThe function builds a neighbours list based on regions with contiguous boundaries. The “queen” argument, if not indicated as FALSE, will return a list of first order neighbours using the Queen criteria\n\nComputing (QUEEN) contiguity based neighbours\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary shows 88 are units in Hunan, where there are 11 most connected neighbour areas, while 2 area units have noly one neighbour\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nThe above polygon 1 has 5 neighbours. The output is the polygon IDs as stored in the hunan SpatialPolygonDataFrame class\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nWe can retrieve the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nYou can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nCreating (ROOK) Contiguity based neighbours\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary above shows that there are 88 area units in Hunan, where therea re 10 most connected neighbours and two area units with only one neighbours\n\n\nVisualizing Contiguity weights\nConnectivity graph - takes a point and displays a line to each neighboring point.\nFor working with polygons:\n\nuse polygon centroids (get the latitude and longitude)\n\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\nCheck first few observations\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\nPlotting Queen contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\nPlotting Rook contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\nPlotting both Queen and Rook contiguity based neighbours maps\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-distance-based-neighbours",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-distance-based-neighbours",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "Computing distance based neighbours",
    "text": "Computing distance based neighbours\ndnearneigh() of spdep package - to derive distance-based weight matrices\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\nDetermine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nComputing fixed distance weight matrix\ndnearneigh() - to compute the distance weight matrix\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n#Quiz: There are an average of 3.681818 neighbours per region\nNext, we will use str() to display the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\nPlotting fixed distance weight matrix\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\nComputing adaptive distnace weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\nstr(knn6) #to display content of matrix\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nNotice each county has 6 neighbours\nPlotting distance based neighbours\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#weights-based-on-idw",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#weights-based-on-idw",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "Weights based on IDW",
    "text": "Weights based on IDW\nIn this section, you will learn how to derive a spatial weight matrix based on Inversed Distance method.\nFirst, we will compute the distances between areas by using nbdists() of spdep.\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\nRow-standardised weight matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon’s eight neighbors type:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#application-of-spatial-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#application-of-spatial-weight-matrix",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "Application of Spatial Weight Matrix",
    "text": "Application of Spatial Weight Matrix\nIn this section, you will learn how to create four different spatial lagged variables, they are:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and\nspatial window sum.\n\n\nSpatial lag with row-standardized weights\nFinally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecalled in the previous section, we retrieved the GDPPC of these five countries by using the code chunk below\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\n#Question: The meaning of spatial lag with row-standardized weights is the weights that are assigned accordingly to the neighbouring observations.\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nSpatial lag as a sum of neighboring values\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\n#Question: It is the sum of the weights that is assigned to the neighbours\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan &lt;- left_join(hunan, lag.res)\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nSpatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep\n\nwm_qs &lt;- include.self(wm_q)\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five.\nNow we obtain weights with nb2listw()\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNote: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\nNote: For more effective comparison, it is advicible to use the core tmap mapping functions.\n\n\nSpatial window sum\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNote: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)\n\n\n\n\nNote: For more effective comparison, it is advicible to use the core tmap mapping functions."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class Exercise 3: Kernel Density Estimation",
    "section": "",
    "text": "Review of Hands-On Exercise 3\n\npacman::p_load(maptools, sf, raster, spatstat, tmap, tidyverse)\n\n\nchildcare_sf &lt;- st_read(\"data/geospatial/ChildCareServices.geojson\") %&gt;% st_transform(crs = 3414)\n\nReading layer `ChildCareServices' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\In-class_Ex\\In-class_Ex03\\data\\geospatial\\ChildCareServices.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nsg_sf &lt;- st_read(dsn = \"data/geospatial\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\In-class_Ex\\In-class_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\nmpsz_sf &lt;- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\In-class_Ex\\In-class_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nplot(mpsz_sf)\n\n\n\n\n\n#to get Singapore coastal outline\nsg_sf &lt;- mpsz_sf %&gt;% st_union()\n\n\nsg_sf_combine &lt;- mpsz_sf %&gt;% st_combine()\nplot(sg_sf_combine) #will include all the polygons that are available in the mpsz_sf\n\n\n\n\n\nplot(sg_sf)\n\n\n\n\n\nchildcare_ppp &lt;- as.ppp(childcare_sf) #to immediately change the sf to ppp without changing to sp \nsummary(childcare_ppp)\n\nMarked planar point pattern:  1925 points\nAverage intensity 2.417323e-06 points per square unit\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1925 character character \n\nWindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n                    (33590 x 23700 units)\nWindow area = 796335000 square units\n\n\nWe can check the duplication in a ppp object using duplicated() function\n\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\n\n\nCreating owin object\n\nsg_owin &lt;- as.owin(sg_sf) #must use sf layer\nsg_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [2667.54, 56396.44] x [15748.72, 50256.33] units\n\n\nthe output object can be displayed using plot() function\n\nplot(sg_owin)\n\n\n\n\n\n\nCombining points of childcare points within the SG boundary\n\nchildcareSG_ppp &lt;- childcare_ppp[sg_owin]\nplot(childcareSG_ppp)\n\n\n\n\n\npg &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"JURONG WEST\")\n\n\nplot(pg, main=\"PUNGOOL\")\n\n\n\nplot(tm, main=\"TAMPINES\")\n\n\n\nplot(ck, main=\"CHOA CHU KANG\")\n\n\n\nplot(jw, main=\"JURONG WEST\")\n\n\n\n\n#In-Class Exercise 3\n\npacman::p_load(sf, spNetwork, tmap, classInt, viridis, tidyverse)\n\n\nnetwork &lt;- st_read(dsn=\"data/geospatial\", layer = \"Punggol_St\")\n\nReading layer `Punggol_St' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\In-class_Ex\\In-class_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\n\nchildcare &lt;- st_read(dsn=\"data/geospatial\", layer =\"Punggol_CC\")\n\nReading layer `Punggol_CC' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\In-class_Ex\\In-class_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n\n\n\ntmap_mode('view')\ntm_shape(childcare) +\n  tm_dots() +\n  tm_shape(network) +\n  tm_lines()\n\n\n\n\n\ntmap_mode('plot')\n\n\nlixels &lt;- lixelize_lines(network, 750, mindist = 375)\n\n\nsamples &lt;- lines_center(lixels)\n\n\ndensities &lt;- nkde(network, # IMPORTANT\n                  events = childcare,\n                  w = rep(1, nrow(childcare)), #IMPORTANT\n                  samples = samples, #IMPORTANT\n                  kernel_name = 'quartic', #kernel methods\n                  bw = 300, #bandwith\n                  div = \"bw\",\n                  method = \"simple\",\n                  digits = 1,\n                  tol = 1,\n                  grid_shape= c(1, 1),\n                  max_depth = 8,\n                  agg = 5, #we aggregate events within a 5m radius(faster calculation)\n                  sparse = TRUE,\n                  verbose = FALSE)\n\n\nsamples$density &lt;- densities\nlixels$density &lt;- densities\n# rescaling to help the mapping\nsamples$density &lt;- samples$density*1000\nlixels$density &lt;- lixels$density*1000\n\n\ntmap_mode('view')\ntm_shape(lixels) +\n  tm_lines(col=\"density\") +\n  tm_shape(childcare) +\n  tm_dots()\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "Welcome to IS415 Geospatial Analytics and Applications\nThis is the course website of IS415. You will find my course work on this website.\nHands-On Exercise:\n\nHands-on Exercise 1\nHands-on Exercise 2\nHands-on Exercise 3\nHands-on Exercise 4\nHands-on Exercise 5\nHands-on Exercise 6\nHands-on Exercise 7\nHands-on Exercise 8\nHands-on Exercise 9\n\nIn-Class Exercise:\n\nIn-Class Exercise 2\nIn-Class Exercise 3\nIn-Class Exercise 4\nIn-Class Exercise 5\nIn-Class Exercise 6\nIn-Class Exercise 7\nIn-Class Exercise 9\n\nTake Home Exercise:\n\nTake Home Exercise 1\nTake Home Exercise 2"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-Class Exercise 4",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)\n\n\nhunan &lt;- st_read(dsn =\"data\", layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\In-class_Ex\\In-class_Ex04\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nhunan2012 &lt;- read_csv(\"data/Hunan_2012.csv\")\n\n\nhunan &lt;- left_join(hunan, hunan2012) %&gt;% select(1:4, 7, 15) #doesnt indicate the same column because have the same column name in both dataset"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#review-of-hands-on",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#review-of-hands-on",
    "title": "In-Class Exercise 4",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)\n\n\nhunan &lt;- st_read(dsn =\"data\", layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\In-class_Ex\\In-class_Ex04\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nhunan2012 &lt;- read_csv(\"data/Hunan_2012.csv\")\n\n\nhunan &lt;- left_join(hunan, hunan2012) %&gt;% select(1:4, 7, 15) #doesnt indicate the same column because have the same column name in both dataset"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#queens-method-to-find-neihgbours",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#queens-method-to-find-neihgbours",
    "title": "In-Class Exercise 4",
    "section": "Queens Method to find neihgbours",
    "text": "Queens Method to find neihgbours\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nWhen you interpret the average number of links, interpret it in integers. You can choose to run down or run up, will mean the same but must give the number in integers\nTo get the ID of the neighbours\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nTo get the names of the neighbours\n\nhunan$County[wm_q[[1]]]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\""
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#rooks-method-to-find-neihgbours",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#rooks-method-to-find-neihgbours",
    "title": "In-Class Exercise 4",
    "section": "Rooks Method to find neihgbours",
    "text": "Rooks Method to find neihgbours\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n## Distance Weight Matrices\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords &lt;- cbind(longitude, latitude)\n\nNote: Don’t sort the tables as the data will be different if you sort the table, thus you cannot combine the data as the combined longitude and latitude will be different. So extract the data with the raw table\nCalculate the distance to find the furthest distance possible (always round up to not miss any points)\n\nk1 &lt;- knn2nb(knearneigh(coords))\n\n\n#will derive the distance between the neighbour, when longlat = TRUE, use great distance projection so that the projection is according to the region, return in kilometer\nk1dists &lt;- unlist(nbdists(k1, coords, longlat=TRUE)) \nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nTo find the neighbours within the 62km radius\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat=TRUE) #to find the neighbour within the 62 km radius\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nFind a specific number of neighbour\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6)) #to find the number of neighbours indicated as the k value, will go quite further to find the neighbour\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#row-standardized",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#row-standardized",
    "title": "In-Class Exercise 4",
    "section": "Row standardized",
    "text": "Row standardized\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy=TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#in-class-exercise",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#in-class-exercise",
    "title": "In-Class Exercise 4",
    "section": "In Class Exercise",
    "text": "In Class Exercise\n\npacman::p_load(sf, spdep,tmap, tidyverse, knitr, GWmodel)\n\n\nhunan &lt;- st_read(dsn = \"data\", layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\In-class_Ex\\In-class_Ex04\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nhunan2012 &lt;- read_csv(\"data/Hunan_2012.csv\")\nhunan &lt;- left_join(hunan, hunan2012) %&gt;% select(1:4, 7, 15)\n\n\nhunan_sp &lt;- hunan %&gt;% as_Spatial()\n\n\ngwstat &lt;- gwss(data = hunan_sp,\n               vars = \"GDPPC\", #vector variable name(s) to be summarized, can include more than one\n               bw = 6, #bandwidth used in weighting function\n               kernel = \"bisquare\", #function chosen (gaussian, exponential, bisquare, tricube, boxcar)\n              adaptive = TRUE, #if TRUE calculate an adaptive kernel where the bandwidth corresponds to the number of nearest neighbours; if FALSE, fixed kernel is found (bandwidth is a fixed distance)\n              longlat = T) #decimal degree when longlat=T, projected coordinate system when longlat=F\n\n\nhunan_sp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 88 \nextent      : 108.7831, 114.2544, 24.6342, 30.12812  (xmin, xmax, ymin, ymax)\ncrs         : +proj=longlat +datum=WGS84 +no_defs \nvariables   : 6\nnames       :  NAME_2,  ID_3, NAME_3,         ENGTYPE_3, County, GDPPC \nmin values  : Changde, 21098,  Anhua, Autonomous County,  Anhua,  8497 \nmax values  : Zhuzhou, 21201, Zixing,          District, Zixing, 88656 \n\n\n\ngwstat\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n\n   ***********************Calibration information*************************\n\n   Local summary statistics calculated for variables:\n    GDPPC\n   Number of summary points: 88\n   Kernel function: bisquare \n   Summary points: the same locations as observations are used.\n   Adaptive bandwidth: 6 (number of nearest neighbours)\n   Distance metric: Great Circle distance metric is used.\n\n   ************************Local Summary Statistics:**********************\n   Summary information for Local means:\nGDPPC_LM \n    Min.  1st Qu.   Median  3rd Qu.     Max. \n10313.11 17616.21 21981.39 28547.05 73545.30 \n   Summary information for local standard deviation :\nGDPPC_LSD \n      Min.    1st Qu.     Median    3rd Qu.       Max. \n  926.3095  3319.0782  5041.7997  7602.3637 24377.4421 \n   Summary information for local variance :\nGDPPC_LVar \n       Min.     1st Qu.      Median     3rd Qu.        Max. \n   858049.3  11030994.6  25419746.0  57798649.1 594259684.0 \n   Summary information for Local skewness:\nGDPPC_LSKe \n       Min.     1st Qu.      Median     3rd Qu.        Max. \n-3.74328455 -0.06903772  0.74202796  1.20539540  5.98374890 \n   Summary information for localized coefficient of variation:\nGDPPC_LCV \n      Min.    1st Qu.     Median    3rd Qu.       Max. \n0.04955751 0.15100369 0.22079470 0.33316203 0.95567593 \n\n   ************************************************************************\n\n\n\nlm &lt;- qtm(gwstat$SDF, \"GDPPC_LM\")\nlsd &lt;- qtm(gwstat$SDF, \"GDPPC_LSD\")\nlvar &lt;- qtm(gwstat$SDF, \"GDPPC_LVar\")\nlske &lt;- qtm(gwstat$SDF, \"GDPPC_LSKe\")\nlcv &lt;- qtm(gwstat$SDF, \"GDPPC_LCV\")\ntmap_arrange(lm, lsd, lvar, lske, lcv, ncol = 2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#review-of-hands-on-exercise-4",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#review-of-hands-on-exercise-4",
    "title": "In-Class Exercise 4",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)\n\n\nhunan &lt;- st_read(dsn =\"data\", layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\In-class_Ex\\In-class_Ex04\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nhunan2012 &lt;- read_csv(\"data/Hunan_2012.csv\")\n\n\nhunan &lt;- left_join(hunan, hunan2012) %&gt;% select(1:4, 7, 15) #doesnt indicate the same column because have the same column name in both dataset"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#queens-method-to-find-neighbours",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#queens-method-to-find-neighbours",
    "title": "In-Class Exercise 4",
    "section": "Queens Method to find neighbours",
    "text": "Queens Method to find neighbours\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nWhen you interpret the average number of links, interpret it in integers. You can choose to run down or run up, will mean the same but must give the number in integers\nTo get the ID of the neighbours\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nTo get the names of the neighbours\n\nhunan$County[wm_q[[1]]]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\""
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "We will learn how to compute Global Measures of Spatial Autocorrelation (GMSA) by using spdep package.\nObjective of this hands-on exercise:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics.\n\n\n\n\n\n\nWe want to find if there is an even distribution of development geographically. If the answer is No, then the next question is “Is there sign of spatial clustering?”. If the answer is yes, then the next questions will be “Where are these clusters?”\nWe will be using the development indicator (i.e GDP per capita) of Hunan Province, People Republic of China\n\n\n\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)\n\n\n\n\n\n\n\nst_read() of sf package - to import Hunan shapefile into R\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\nread_csv() of readr package\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nleft_join() of dplyr package - to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe\n\nhunan &lt;- left_join(hunan, hunan2012) %&gt;% select(1:4, 7, 15)\n\n\n\n\nqtm() of tmap package - prepare basemap and choropleth map to show the distribution of GDPPC 2012\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n\n\n\n\n\n\n\n\nThis section will teach you how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation\n\n\nWe need to construct spatial weights of the study area to compute the global spatial autocorrelation statistics. The spatial weights are used to define the neighbourhood relationships between the geographical units (i.e county) in the study area\npoly2nb() of spdep package - compute contiguity weight matrices for the study area\nIt will output the neighbours list based on regions with contiguous boundaries.\nThe “queen” argument (default TRUE) will return a list of first order neighbours using the Queen criteria\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n\n\nThis section will teach about Moran’s I statistics testing using moran.test() of spdep\n\n\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nWhat statistical conclusion can you draw from the output?\n\nThere is a discrepancy in the GDPPC in the areas in Hunan, meaning that some areas have much higher GDPPC than the other, indicating that there is an uneven distribution of development in Hunan, looking at the very small p-value shown of 1.095e-06\nThe positive Moran I statistics of 0.300749970 also indicates that there is a positive spatial correlation\n\n\n\n\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nWhat statistical conclusion can you draw from the output above?\n\nSince the value of the Monte Carlo observed rank is high, the statistic of 0.30075 shows that the data is not random and justifying that there is a strong positive spatial autocorrelation in our data\n\n\n\n\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\nWhat statistical observation can you draw from the output above?\n\nSince the value of the Monte Carlo observed rank is high, the statistic of 0.30075 (far from the mean of 0) shows that the data is not random and justifying that there is a strong positive spatial autocorrelation in our data\n\n\nlibrary(ggplot2)\nggplot()+ \n  geom_histogram(aes(bperm$res), color=\"black\", fill=\"white\") +\n  geom_vline(aes(xintercept=mean(bperm$res)), color=\"red\") +\n  ggtitle(\"Histogram of bperm$res\") +\n  xlab(\"Simulated Moran's I\") +\n  ylab(\"Frequency\")\n\n\n\n\n\n\n\n\n\n\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nWhat statistical conclusion can you draw from the output above?\n\nAs the p-value of the test is low at 0.0001526, there is a spatial clustering happening, meaning that the development is not evenly distributed.\nAs the value of the statistic is below the expectation, then it means that the GDPPC has a positive spatial correlation\n\n\n\n\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nWhat statistical conclusion can you draw from the output above?\n\nSimilar to the values above, this means that there is positive spatial correlation for the GDPPC, meaning that there is prove to show that the GDPPC is not evenly distributed\n\n\n\n\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\nWhat statistical observation can you draw from the output?\n\nSince the value of the Monte Carlo observed rank is very low, the statistic of 0.69072 shows that the data is not random and justifying that there is a strong positive spatial autocorrelation in our data\n\n\n\n\n\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n\nsp.correlogram() of spdep package - compute 6-lag spatial correlogram of GDPPC\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nWhat statistical observation can you draw from the plot above?\n\nThe lag 1, 2, and 3 have positive Moran’s I statistics, meaning that it\n\n\n\n\nsp.correlogram() of spdep package - compute 6-lag correlogram fo GDPPC\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#overview",
    "title": "Hands-on Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "We will learn how to compute Global Measures of Spatial Autocorrelation (GMSA) by using spdep package.\nObjective of this hands-on exercise:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-started",
    "title": "Hands-on Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "We want to find if there is an even distribution of development geographically. If the answer is No, then the next question is “Is there sign of spatial clustering?”. If the answer is yes, then the next questions will be “Where are these clusters?”\nWe will be using the development indicator (i.e GDP per capita) of Hunan Province, People Republic of China\n\n\n\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "st_read() of sf package - to import Hunan shapefile into R\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\nread_csv() of readr package\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nleft_join() of dplyr package - to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe\n\nhunan &lt;- left_join(hunan, hunan2012) %&gt;% select(1:4, 7, 15)\n\n\n\n\nqtm() of tmap package - prepare basemap and choropleth map to show the distribution of GDPPC 2012\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#global-measures-of-spatial-autocorrelation-1",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#global-measures-of-spatial-autocorrelation-1",
    "title": "Hands-on Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "This section will teach you how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation\n\n\nWe need to construct spatial weights of the study area to compute the global spatial autocorrelation statistics. The spatial weights are used to define the neighbourhood relationships between the geographical units (i.e county) in the study area\npoly2nb() of spdep package - compute contiguity weight matrices for the study area\nIt will output the neighbours list based on regions with contiguous boundaries.\nThe “queen” argument (default TRUE) will return a list of first order neighbours using the Queen criteria\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#global-measures-of-spatial-autocorrelation-morans-i",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#global-measures-of-spatial-autocorrelation-morans-i",
    "title": "Hands-on Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "This section will teach about Moran’s I statistics testing using moran.test() of spdep\n\n\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nWhat statistical conclusion can you draw from the output?\n\nThere is a discrepancy in the GDPPC in the areas in Hunan, meaning that some areas have much higher GDPPC than the other, indicating that there is an uneven distribution of development in Hunan, looking at the very small p-value shown of 1.095e-06\nThe positive Moran I statistics of 0.300749970 also indicates that there is a positive spatial correlation\n\n\n\n\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nWhat statistical conclusion can you draw from the output above?\n\nSince the value of the Monte Carlo observed rank is high, the statistic of 0.30075 shows that the data is not random and justifying that there is a strong positive spatial autocorrelation in our data\n\n\n\n\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\nWhat statistical observation can you draw from the output above?\n\nSince the value of the Monte Carlo observed rank is high, the statistic of 0.30075 (far from the mean of 0) shows that the data is not random and justifying that there is a strong positive spatial autocorrelation in our data\n\n\nlibrary(ggplot2)\nggplot()+ \n  geom_histogram(aes(bperm$res), color=\"black\", fill=\"white\") +\n  geom_vline(aes(xintercept=mean(bperm$res)), color=\"red\") +\n  ggtitle(\"Histogram of bperm$res\") +\n  xlab(\"Simulated Moran's I\") +\n  ylab(\"Frequency\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#global-measures-of-spatial-autocorrelation-gearys-c",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#global-measures-of-spatial-autocorrelation-gearys-c",
    "title": "Hands-on Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "geary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nWhat statistical conclusion can you draw from the output above?\n\nAs the p-value of the test is low at 0.0001526, there is a spatial clustering happening, meaning that the development is not evenly distributed.\nAs the value of the statistic is below the expectation, then it means that the GDPPC has a positive spatial correlation\n\n\n\n\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nWhat statistical conclusion can you draw from the output above?\n\nSimilar to the values above, this means that there is positive spatial correlation for the GDPPC, meaning that there is prove to show that the GDPPC is not evenly distributed\n\n\n\n\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\nWhat statistical observation can you draw from the output?\n\nSince the value of the Monte Carlo observed rank is very low, the statistic of 0.69072 shows that the data is not random and justifying that there is a strong positive spatial autocorrelation in our data"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#spatial-correlogram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#spatial-correlogram",
    "title": "Hands-on Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "Spatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n\nsp.correlogram() of spdep package - compute 6-lag spatial correlogram of GDPPC\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nWhat statistical observation can you draw from the plot above?\n\nThe lag 1, 2, and 3 have positive Moran’s I statistics, meaning that it\n\n\n\n\nsp.correlogram() of spdep package - compute 6-lag correlogram fo GDPPC\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#overview-1",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#overview-1",
    "title": "Hands-on Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Overview",
    "text": "Overview\nIn this hands-on exercise, you will learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#cluster-and-outlier-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#cluster-and-outlier-analysis",
    "title": "Hands-on Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Cluster and Outlier Analysis",
    "text": "Cluster and Outlier Analysis\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, you will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\nComputing local Moran’s I\nlocalmoran() function of spdep package - computes li values, given a set of zi values and a list object providing neighbour weihgting information for the polygon associated with the zi values\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\nMapping the local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\nhunan.localMI &lt;- cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\nMapping local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chinks below.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMapping local Moran’s I p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMapping both local Moran’s I values and p-values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-a-lisa-cluster-map",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-a-lisa-cluster-map",
    "title": "Hands-on Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Creating a LISA Cluster Map",
    "text": "Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\nPlotting Moran Scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.\n\n\nPlotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\nPreparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\nNext, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif &lt;- 0.05       \n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\nIn fact, we can combined all the steps into one single code chunk as shown below:\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I &lt;- localMI[,1]   \nsignif &lt;- 0.05       \nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n\nPlotting LISA map\nNow, we can build the LISA map by using the code chunks below.\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\nWe can also include the local Moran’s I map and p-value map as shown below for easy comparison.\nWhat statistical observations can you draw from the LISA map above?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\nGetis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\nDeriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\nDeriving the centroid\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n\nDetermine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nComputing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe output spatial weights object is called wm62_lw.\n\n\n\nComputing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-gi-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-gi-statistics",
    "title": "Hands-on Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Computing Gi statistics",
    "text": "Computing Gi statistics\n\nGi statistics using fixed distance\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\nMapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\nWhat statistical observation can you draw from the Gi map above?\n\n\n\n\n\nGi statistics using adaptive distance\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\nMapping Gi values with adaptive distance weights\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\n\n\n\nWhat statistical observation can you draw from the Gi map above?"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#combination-of-aspatial-and-geospatial-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#combination-of-aspatial-and-geospatial-data",
    "title": "Take-Home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "Combination of Aspatial and Geospatial Data",
    "text": "Combination of Aspatial and Geospatial Data\nAfter getting the right data types and formats of the aspatial and geospatial data, it is time for us to combine both data, to see and check if there is still a need for refinement.\n\ntmap_mode(\"plot\")\ntm_shape(start_sf) +\n  tm_dots(col=\"red\") +\n  tm_shape(sg_road_filtered) +\n  tm_lines()\n\n\n\n\nFrom the plot above, we can see that there are still red dots that lie outside of the mainland of Singapore. This is because we have not filter out the points that lies outside of the mainland. As such, we need to remove these dots to be able to have a more accurate output to our analysis.\n\nstart_sf &lt;- st_intersection(sg_boundary, start_sf)\ntmap_mode(\"plot\")\ntm_shape(start_sf) +\n  tm_dots(col=\"red\") +\n  tm_shape(sg_road_filtered) +\n  tm_lines()\n\n\n\n\nAfter all the data processing to make the data align with each other, we need to change the format of the data to be able to process them for the Kernel Density Estimation (KDE). We start with changing the data type of the start_sf into ppp. Then, we check for duplicated data in the data.\n\nstart_ppp &lt;- as.ppp(start_sf)\nany(duplicated(start_ppp))\n\n[1] FALSE\n\n\nAfter changing the start_sf into ppp, we then need to prepare the owin object of the sg_boundary. This can be done by changing the sg_boundary from sf -&gt; Spatial* classes -&gt; sp -&gt; owin.\n\nsg_boundary_spatial &lt;- as_Spatial(sg_boundary)\nsg_boundary_sp &lt;- as(sg_boundary_spatial, \"SpatialPolygons\")\nsg_boundary_owin &lt;- as(sg_boundary_sp, \"owin\")\nplot(sg_boundary_owin)\n\n\n\n\n\nCombining starting points of Grab taxis with the Singapore boundary owin object\nNow, we can combine the start_ppp with the sg_boundary_owin to prepare the data for the Kernel Density Estimation (KDE)\n\nstart_grab_ppp = start_ppp[sg_boundary_owin]\nplot(start_grab_ppp)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#focusing-on-a-more-focused-area",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#focusing-on-a-more-focused-area",
    "title": "Take-Home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "Focusing on a more focused area",
    "text": "Focusing on a more focused area\nFrom our analysis for KDE, it is seen that the Central and the East region are the regions where many of the starting points are located. As such, it is much more interesting if we zoom closer to one part of the regions, in this case I chose Downtown and Changi, to know more about the trends of these starting locations.\nFirst, we need to prepare the data so that it can be analyzed further to get the NetKDE of these areas.\n\ndowntown &lt;- mpsz2019 %&gt;% filter(grepl(\"DOWNTOWN\", Description)) %&gt;% filter(!grepl(\"ISLAND\", Description)) %&gt;% st_union\ndowntown_road &lt;- st_intersection(sg_road_filtered, downtown) %&gt;% st_cast(\"LINESTRING\")\ndowntown_points &lt;- st_intersection(start_sf, downtown) %&gt;% st_cast(\"POINT\")\ndowntown_map &lt;- tm_shape(downtown_points) +\n  tm_dots(col=\"red\") +\n  tm_shape(downtown_road) +\n  tm_lines()\n\nchangi &lt;- mpsz2019 %&gt;% filter(grepl(\"CHANGI\", Description)) %&gt;% filter(!grepl(\"ISLAND\", Description)) %&gt;% st_union\nchangi_road &lt;- st_intersection(sg_road_filtered, changi) %&gt;% st_cast(\"LINESTRING\")\nchangi_points &lt;- st_intersection(start_sf, changi) %&gt;% st_cast(\"POINT\")\nchangi_map &lt;- tm_shape(changi_points) +\n  tm_dots(col=\"red\") +\n  tm_shape(changi_road) +\n  tm_lines()\n\ntmap_arrange(downtown_map, changi_map, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preparing-lixels-objects-and-generating-line-centre-points",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preparing-lixels-objects-and-generating-line-centre-points",
    "title": "Take-Home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "Preparing lixels objects and generating line centre points",
    "text": "Preparing lixels objects and generating line centre points\nTo compute the NetKDE, we need to cut the SpatialLines into lixels with a specified minimal distance. This can be done using the lixelize_lines() of spNetwork package. We then generate a SpatialPointsDataFrame with line center points with lines_center() of spNetwork.\n\nlixels_downtown &lt;- lixelize_lines(downtown_road, 750, mindist = 350)\nsamples_downtown &lt;- lines_center(lixels_downtown)\n\nlixels_changi &lt;- lixelize_lines(changi_road, 750, mindist = 350)\nsamples_changi &lt;- lines_center(lixels_changi)\n\nI indicated the length of lixel, lx_length, to 750m and the minimum length of a lixel, mindist, to be 350m."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#performing-netkde",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#performing-netkde",
    "title": "Take-Home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "Performing NetKDE",
    "text": "Performing NetKDE\nThis is the reference for the nkde() function of the spNetwork package.\n\nDowntown\n\ndensities_downtown &lt;- nkde(downtown_road, \n                  events = downtown_points, \n                  kernel_name=\"gaussian\", \n                  samples = samples_downtown, \n                  method = \"simple\", \n                  bw = 300, \n                  div = \"bw\", \n                  w = rep(1, nrow(downtown_points)), \n                  digits = 1, \n                  tol = 1, \n                  grid_shape = c(1,1), \n                  max_depth = 8, \n                  agg = 5, \n                  sparse = TRUE, \n                  verbose = FALSE)\nsamples_downtown$density &lt;- densities_downtown * 1000\nlixels_downtown$density &lt;- densities_downtown * 1000\n\n\nsaveRDS(samples_downtown, \"samples_downtown.rds\")\nsaveRDS(lixels_downtown, \"lixels_downtown.rds\")\n\n\nsamples_downtown &lt;- readRDS(\"samples_downtown.rds\")\nlixels_downtown &lt;- readRDS(\"lixels_downtown.rds\")\n\n\ntmap_mode('view')\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(lixels_downtown) +\n  tm_lines(col=\"density\", palette = \"Reds\", lwd=5) +\ntm_shape(downtown_points) +\n  tm_dots()+\ntm_shape(downtown) + \n  tm_borders()\n\n\n\n\n\n\n\ntmap_mode('plot')\n\n\n\nChangi\n\ndensities_changi &lt;- nkde(changi_road, \n                  events = changi_points, \n                  kernel_name=\"gaussian\", \n                  samples = samples_changi, \n                  method = \"simple\", \n                  bw = 300, \n                  div = \"bw\", \n                  w = rep(1, nrow(changi_points)), \n                  digits = 1, \n                  tol = 1, \n                  grid_shape = c(1,1), \n                  max_depth = 8, \n                  agg = 5, \n                  sparse = TRUE, \n                  verbose = FALSE)\nsamples_changi$density &lt;- densities_changi * 1000\nlixels_changi$density &lt;- densities_changi * 1000\n\n\nsaveRDS(samples_changi, \"samples_changi.rds\")\nsaveRDS(lixels_changi, \"lixels_changi.rds\")\n\n\nsamples_changi &lt;- readRDS(\"samples_changi.rds\")\nlixels_changi &lt;- readRDS(\"lixels_changi.rds\")\n\n\ntmap_mode('view')\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(lixels_changi)+\n  tm_lines(col=\"density\", palette = \"Reds\", lwd=5)+\ntm_shape(changi_points)+\n  tm_dots()\n\n\n\n\n\n\n\ntmap_mode('plot')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#analysis",
    "title": "Take-Home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "Analysis",
    "text": "Analysis\nFrom the two plots above, we can see that more roads in Downtown have an orange to red colour as compared to Changi, indicating that many of the starting location points are located across the roads in Downtown. This also correlates with the fact that the Downtown area has more visitors, such as tourists, office workers, and students, who are frequent Grab ride-hailers. As compared to Changi, the only place that is concentrated with the starting points is in the Airport where many visitors are hailing a Grab ride to town."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#visualiation-of-the-spatial-temporal-pattern",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#visualiation-of-the-spatial-temporal-pattern",
    "title": "Take-Home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "Visualiation of the Spatial-Temporal Pattern",
    "text": "Visualiation of the Spatial-Temporal Pattern\n\nsample_time &lt;- seq(0, max(downtown_points$time), 1)\n\n\ntnkde_densities &lt;- tnkde(lines = downtown_road,\n                         events = downtown_points,\n                         time_field = \"time\",\n                         w = rep(1, nrow(downtown_points)), \n                         samples_loc = samples_downtown,\n                         samples_time = sample_time, \n                         kernel_name = \"quartic\",\n                         bw_net = 700, bw_time = 1,\n                         adaptive = TRUE,\n                         trim_bw_net = 900,\n                         trim_bw_time = 1.5,\n                         method = \"discontinuous\",\n                         div = \"bw\", max_depth = 10,\n                         digits = 2, tol = 0.01,\n                         agg = 15, grid_shape = c(1,1), \n                         verbose  = FALSE)\n\n\nall_densities &lt;- c(tnkde_densities$k)\ncolor_breaks &lt;- classIntervals(all_densities, n = 10, style = \"kmeans\")\n\n\nall_maps &lt;- lapply(1:ncol(tnkde_densities$k), function(i){\n  time &lt;- hms::hms(minutes = sample_time[[i]])\n  \n  samples_downtown$density &lt;- tnkde_densities$k[,i]\n  \n  map1 &lt;- tm_shape(downtown_road) +\n    tm_lines(alpha = 0.5) +\n    tm_shape(samples_downtown) + \n    tm_dots(col = \"density\", size = 0.01, breaks = color_breaks$brks, palette = sequential_hcl(10, 'Purple-Blue')) + \n    tm_layout(legend.show=FALSE, main.title = as.character(time), main.title.size = 0.5)\n  \n  return(map1)\n})\n\ntmap_animation(all_maps, filename = \"downtown_points.gif\", \n               width = 1000, height = 1000, dpi = 300, delay = 50)\n\n\nknitr::include_graphics(\"downtown_points.gif\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#analysis-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#analysis-1",
    "title": "Take-Home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "Analysis",
    "text": "Analysis\nAt the hours of 9 to 11, it is the most demand for Grab as we can see from the gif that the blue colours almost fill up the map on the 9th, 10th and 11th hour."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class Exercise 5: Global and Local Measures of Spatial Autocorrelation - sfdep methods",
    "section": "",
    "text": "pacman::p_load(sf, sfdep, tmap, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#load-packages",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#load-packages",
    "title": "In-class Exercise 5: Global and Local Measures of Spatial Autocorrelation - sfdep methods",
    "section": "",
    "text": "pacman::p_load(sf, sfdep, tmap, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#data",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#data",
    "title": "In-class Exercise 5: Global and Local Measures of Spatial Autocorrelation - sfdep methods",
    "section": "Data",
    "text": "Data\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\In-class_Ex\\In-class_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\nhunan_GDPPC &lt;- left_join(hunan, hunan2012) %&gt;% select(1:4, 7, 15)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#plot-the-choropleth-map",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#plot-the-choropleth-map",
    "title": "In-class Exercise 5: Global and Local Measures of Spatial Autocorrelation - sfdep methods",
    "section": "Plot the choropleth map",
    "text": "Plot the choropleth map\n\ntmap_mode(\"plot\")\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_layout(main.title = \"Distribution of GDP per capita by county, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n\n\n\n\nDeriving contiguity weights: Queen’s method\n\nwm_q &lt;- hunan_GDPPC %&gt;% mutate(nb = st_contiguity(geometry),\n                               wt = st_weights(nb,\n                                               style = \"W\"),\n                               .before = 1 #the two things that are derived will be put before the first column (appear in front of the table)\n                               #queen = TRUE\n                               )\n\nThis code combines the computing of contiguity spatial weights with row-standardised weight matrix in hands-on exercise 5"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#moran-i",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#moran-i",
    "title": "In-class Exercise 5: Global and Local Measures of Spatial Autocorrelation - sfdep methods",
    "section": "Moran I",
    "text": "Moran I\n\nmoranI &lt;- global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\nglimpse(moranI)\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n\n#reality need more than one data point for this \n\n\nglobal_moran_test(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n#the statistical test to find out if the statistical value is significant or not\n\nThe Monte Carlo simulation is usually used to calculate the statistical test. For sfdep, it is supported by global_moran_perm(). It is also a good practice to set the seed using set.seed().\n\nset.seed(1234)\nglobal_moran_perm(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt,\n                  nsim = 999)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n#to do permutation (to simulate), the number of simulation in this case is 100 as the iteration starts from 0\n\nWe always test the null hypothesis, show if there is confidence in proving the null hypothesis"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Exercise 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "We will learn how to compute Global Measures of Spatial Autocorrelation (GMSA) by using spdep package.\nObjective of this hands-on exercise:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics.\n\n\n\n\n\n\nWe want to find if there is an even distribution of development geographically. If the answer is No, then the next question is “Is there sign of spatial clustering?”. If the answer is yes, then the next questions will be “Where are these clusters?”\nWe will be using the development indicator (i.e GDP per capita) of Hunan Province, People Republic of China\n\n\n\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)\n\n\n\n\n\n\n\nst_read() of sf package - to import Hunan shapefile into R\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\nread_csv() of readr package\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nleft_join() of dplyr package - to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe\n\nhunan &lt;- left_join(hunan, hunan2012) %&gt;% select(1:4, 7, 15)\n\n\n\n\nqtm() of tmap package - prepare basemap and choropleth map to show the distribution of GDPPC 2012\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n\n\n\n\n\n\n\n\nThis section will teach you how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation\n\n\nWe need to construct spatial weights of the study area to compute the global spatial autocorrelation statistics. The spatial weights are used to define the neighbourhood relationships between the geographical units (i.e county) in the study area\npoly2nb() of spdep package - compute contiguity weight matrices for the study area\nIt will output the neighbours list based on regions with contiguous boundaries.\nThe “queen” argument (default TRUE) will return a list of first order neighbours using the Queen criteria\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n\n\nThis section will teach about Moran’s I statistics testing using moran.test() of spdep\n\n\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nWhat statistical conclusion can you draw from the output?\n\nThere is a discrepancy in the GDPPC in the areas in Hunan, meaning that some areas have much higher GDPPC than the other, indicating that there is an uneven distribution of development in Hunan, looking at the very small p-value shown of 1.095e-06\nThe positive Moran I statistics of 0.300749970 also indicates that there is a positive spatial correlation\n\n\n\n\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nWhat statistical conclusion can you draw from the output above?\n\nSince the value of the Monte Carlo observed rank is high, the statistic of 0.30075 shows that the data is not random and justifying that there is a strong positive spatial autocorrelation in our data\n\n\n\n\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\nWhat statistical observation can you draw from the output above?\n\nSince the value of the Monte Carlo observed rank is high, the statistic of 0.30075 (far from the mean of 0) shows that the data is not random and justifying that there is a strong positive spatial autocorrelation in our data\n\n\nlibrary(ggplot2)\nggplot()+ \n  geom_histogram(aes(bperm$res), color=\"black\", fill=\"white\") +\n  geom_vline(aes(xintercept=mean(bperm$res)), color=\"red\") +\n  ggtitle(\"Histogram of bperm$res\") +\n  xlab(\"Simulated Moran's I\") +\n  ylab(\"Frequency\")\n\n\n\n\n\n\n\n\n\n\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nWhat statistical conclusion can you draw from the output above?\n\nAs the p-value of the test is low at 0.0001526, there is a spatial clustering happening, meaning that the development is not evenly distributed.\nAs the value of the statistic is below the expectation, then it means that the GDPPC has a positive spatial correlation\n\n\n\n\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nWhat statistical conclusion can you draw from the output above?\n\nSimilar to the values above, this means that there is positive spatial correlation for the GDPPC, meaning that there is prove to show that the GDPPC is not evenly distributed\n\n\n\n\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\nWhat statistical observation can you draw from the output?\n\nSince the value of the Monte Carlo observed rank is very low, the statistic of 0.69072 shows that the data is not random and justifying that there is a strong positive spatial autocorrelation in our data\n\n\n\n\n\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n\nsp.correlogram() of spdep package - compute 6-lag spatial correlogram of GDPPC\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nWhat statistical observation can you draw from the plot above?\n\nThe lag 1, 2, and 3 have positive Moran’s I statistics, meaning that it\n\n\n\n\nsp.correlogram() of spdep package - compute 6-lag correlogram fo GDPPC\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#overview",
    "title": "Hands-on Exercise 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "We will learn how to compute Global Measures of Spatial Autocorrelation (GMSA) by using spdep package.\nObjective of this hands-on exercise:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "title": "Hands-on Exercise 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "We want to find if there is an even distribution of development geographically. If the answer is No, then the next question is “Is there sign of spatial clustering?”. If the answer is yes, then the next questions will be “Where are these clusters?”\nWe will be using the development indicator (i.e GDP per capita) of Hunan Province, People Republic of China\n\n\n\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "st_read() of sf package - to import Hunan shapefile into R\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\emilyaurelia\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\nread_csv() of readr package\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nleft_join() of dplyr package - to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe\n\nhunan &lt;- left_join(hunan, hunan2012) %&gt;% select(1:4, 7, 15)\n\n\n\n\nqtm() of tmap package - prepare basemap and choropleth map to show the distribution of GDPPC 2012\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation-1",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation-1",
    "title": "Hands-on Exercise 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "This section will teach you how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation\n\n\nWe need to construct spatial weights of the study area to compute the global spatial autocorrelation statistics. The spatial weights are used to define the neighbourhood relationships between the geographical units (i.e county) in the study area\npoly2nb() of spdep package - compute contiguity weight matrices for the study area\nIt will output the neighbours list based on regions with contiguous boundaries.\nThe “queen” argument (default TRUE) will return a list of first order neighbours using the Queen criteria\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation-morans-i",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation-morans-i",
    "title": "Hands-on Exercise 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "This section will teach about Moran’s I statistics testing using moran.test() of spdep\n\n\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nWhat statistical conclusion can you draw from the output?\n\nThere is a discrepancy in the GDPPC in the areas in Hunan, meaning that some areas have much higher GDPPC than the other, indicating that there is an uneven distribution of development in Hunan, looking at the very small p-value shown of 1.095e-06\nThe positive Moran I statistics of 0.300749970 also indicates that there is a positive spatial correlation\n\n\n\n\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nWhat statistical conclusion can you draw from the output above?\n\nSince the value of the Monte Carlo observed rank is high, the statistic of 0.30075 shows that the data is not random and justifying that there is a strong positive spatial autocorrelation in our data\n\n\n\n\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\nWhat statistical observation can you draw from the output above?\n\nSince the value of the Monte Carlo observed rank is high, the statistic of 0.30075 (far from the mean of 0) shows that the data is not random and justifying that there is a strong positive spatial autocorrelation in our data\n\n\nlibrary(ggplot2)\nggplot()+ \n  geom_histogram(aes(bperm$res), color=\"black\", fill=\"white\") +\n  geom_vline(aes(xintercept=mean(bperm$res)), color=\"red\") +\n  ggtitle(\"Histogram of bperm$res\") +\n  xlab(\"Simulated Moran's I\") +\n  ylab(\"Frequency\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation-gearys-c",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation-gearys-c",
    "title": "Hands-on Exercise 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "geary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nWhat statistical conclusion can you draw from the output above?\n\nAs the p-value of the test is low at 0.0001526, there is a spatial clustering happening, meaning that the development is not evenly distributed.\nAs the value of the statistic is below the expectation, then it means that the GDPPC has a positive spatial correlation\n\n\n\n\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nWhat statistical conclusion can you draw from the output above?\n\nSimilar to the values above, this means that there is positive spatial correlation for the GDPPC, meaning that there is prove to show that the GDPPC is not evenly distributed\n\n\n\n\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\nWhat statistical observation can you draw from the output?\n\nSince the value of the Monte Carlo observed rank is very low, the statistic of 0.69072 shows that the data is not random and justifying that there is a strong positive spatial autocorrelation in our data"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatial-correlogram",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatial-correlogram",
    "title": "Hands-on Exercise 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "Spatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n\nsp.correlogram() of spdep package - compute 6-lag spatial correlogram of GDPPC\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nWhat statistical observation can you draw from the plot above?\n\nThe lag 1, 2, and 3 have positive Moran’s I statistics, meaning that it\n\n\n\n\nsp.correlogram() of spdep package - compute 6-lag correlogram fo GDPPC\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#overview-1",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#overview-1",
    "title": "Hands-on Exercise 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "Overview",
    "text": "Overview\nIn this hands-on exercise, you will learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#cluster-and-outlier-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#cluster-and-outlier-analysis",
    "title": "Hands-on Exercise 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "Cluster and Outlier Analysis",
    "text": "Cluster and Outlier Analysis\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, you will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\nComputing local Moran’s I\nlocalmoran() function of spdep package - computes li values, given a set of zi values and a list object providing neighbour weihgting information for the polygon associated with the zi values\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\nMapping the local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\nhunan.localMI &lt;- cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\nMapping local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chinks below.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMapping local Moran’s I p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMapping both local Moran’s I values and p-values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#creating-a-lisa-cluster-map",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#creating-a-lisa-cluster-map",
    "title": "Hands-on Exercise 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "Creating a LISA Cluster Map",
    "text": "Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\nPlotting Moran Scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.\n\n\nPlotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\nPreparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\nNext, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif &lt;- 0.05       \n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\nIn fact, we can combined all the steps into one single code chunk as shown below:\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I &lt;- localMI[,1]   \nsignif &lt;- 0.05       \nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n\nPlotting LISA map\nNow, we can build the LISA map by using the code chunks below.\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\nWe can also include the local Moran’s I map and p-value map as shown below for easy comparison.\nWhat statistical observations can you draw from the LISA map above?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\nGetis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\nDeriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\nDeriving the centroid\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n\nDetermine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nComputing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe output spatial weights object is called wm62_lw.\n\n\n\nComputing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-gi-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-gi-statistics",
    "title": "Hands-on Exercise 6: Global and Local Measures of Spatial Autocorrelation",
    "section": "Computing Gi statistics",
    "text": "Computing Gi statistics\n\nGi statistics using fixed distance\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\nMapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\nWhat statistical observation can you draw from the Gi map above?\n\n\n\n\n\nGi statistics using adaptive distance\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\nMapping Gi values with adaptive distance weights\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\n\n\n\nWhat statistical observation can you draw from the Gi map above?"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/data/geospatial/TAINAN_VILLAGE.html",
    "href": "Take-home_Ex/Take-home_Ex02/data/geospatial/TAINAN_VILLAGE.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“TWD97”,DATUM[“Taiwan Datum 1997”,ELLIPSOID[“GRS 1980”,6378137,298.257222101,LENGTHUNIT[“metre”,1]]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“Taiwan, Republic of China - onshore and offshore - Taiwan Island, Penghu (Pescadores) Islands.”],BBOX[17.36,114.32,26.96,123.61]],ID[“EPSG”,3824]] +proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs 27230 3824 EPSG:3824 TWD97 longlat EPSG:7019 true"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "",
    "text": "It has been reported that Taiwan had a very high record of dengue fever cases of 26703 in the year 2023. This is the worst outbreak case since 2015, where Taiwan faced the worst dengue fever outbreak with 43,000 dengue cases and 228 deaths. It is reported that more than 80% of the cases occurred in the months fo August to November of 2023 and during the epidemiology week 31 to 50. Most of these dengue cases are reported at Tainan City."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#aspatial-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#aspatial-data",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Aspatial Data",
    "text": "Aspatial Data\n\nDengue_Daily.csv\n\nThis is an aspatial data of the reported dengue cases in Taiwan since 1998\n\n\n\ndengue &lt;- read_csv(\"data/aspatial/Dengue_Daily.csv\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#geospatial-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#geospatial-data",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Geospatial Data",
    "text": "Geospatial Data\n\nTAIWAN_VILLAGE_2020\n\nThis is a geospatial data of the village boundaries of Taiwan in the form of an ESRI shapefile format. It is already in the Taiwan Geographic Coordinate System.\n\n\n\n\nReading layer `TAINAN_VILLAGE' from data source \n  `C:\\Users\\emily\\OneDrive\\Documents\\SMU\\Y3S2\\Geospatial Analysis\\IS415-GAA\\Take-home_Ex\\Take-home_Ex02\\data\\geospatial\\TAINAN_VILLAGE.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 649 features and 10 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 120.0269 ymin: 22.88751 xmax: 120.6563 ymax: 23.41374\nGeodetic CRS:  TWD97"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#aspatial-data-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#aspatial-data-1",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Aspatial Data",
    "text": "Aspatial Data\n\nFilter by Dates of the Epidemiology Week\nWe are only interested in the epidemiology week 31 to 50 in the year 2023, which is when most of the dengue cases are happening. There is a function from lubridate, epiweek(), which can give the epidemiology week of the specific year. As such, we will use mutate() and epiweek() to create a column, epiweek, to identify the epidemiology week of the dates, and then using the filter() function to filter the data that has the epidemiology week of 31 to 50 in the year 2023.\n\ndengue &lt;- dengue |&gt; \n  mutate(EPIWEEK = epiweek(發病日)) |&gt; \n  filter(year(發病日) == 2023 & between(EPIWEEK, 31, 50))\n\n\n\nRemove Unused Columns\nIn this case study, we want to focus more on the locations of where the cases occur. As such, there are only 4 columns that we will require, which are:\n\n發病日: Onset date\n最小統計區中心點X: x-coordinate (longitude)\n最小統計區中心點Y: y-coordinate (latitude)\nepiweek: the epidemiology week of the case\n\n\ndengue &lt;- dengue |&gt; \n  select(發病日, 最小統計區中心點X, 最小統計區中心點Y, EPIWEEK)\n\n\n\nChecking and Handling of Missing Data\nLet us now check for rows that contains any missing values.\n\ncolSums(is.na(dengue))\n\n           發病日 最小統計區中心點X 最小統計區中心點Y           EPIWEEK \n                0                 0                 0                 0 \n\n\nFrom the output above, we can see that there are 0 rows that contains missing coordinates. However, we need to see if there are rows that contains any “None” strings.\n\ndengue_None &lt;- dengue |&gt; \n  filter(最小統計區中心點X == \"None\" | 最小統計區中心點Y == \"None\")\nglimpse(dengue_None)\n\nRows: 14\nColumns: 4\n$ 發病日            &lt;date&gt; 2023-08-18, 2023-08-24, 2023-09-15, 2023-09-15, 202…\n$ 最小統計區中心點X &lt;chr&gt; \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"Non…\n$ 最小統計區中心點Y &lt;chr&gt; \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"Non…\n$ EPIWEEK           &lt;dbl&gt; 33, 34, 37, 37, 38, 38, 39, 39, 39, 42, 42, 43, 43, …\n\n\nIt is shown that there are a total of 14 rows that have missing coordinates. This is a very small portion of the dataset. As such, let us just remove the 14 rows from the dataset.\n\ndengue &lt;- dengue |&gt; \n  filter(最小統計區中心點X != \"None\" | 最小統計區中心點Y != \"None\")\n\n\n\nChange the Data Type of the x and y coordinates\nWhen we look at the glimpse() of the dengue dataframe, the type of data for the x and y coordinates are &lt;chr&gt;.\n\nglimpse(dengue)\n\nRows: 25,461\nColumns: 4\n$ 發病日            &lt;date&gt; 2023-07-30, 2023-07-30, 2023-07-30, 2023-07-30, 202…\n$ 最小統計區中心點X &lt;chr&gt; \"120.220182286\", \"120.218036763\", \"120.235449178\", \"…\n$ 最小統計區中心點Y &lt;chr&gt; \"22.976075790\", \"22.980068070\", \"23.013736726\", \"23.…\n$ EPIWEEK           &lt;dbl&gt; 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, …\n\n\nAs such, we need to change these columns into a numerical type or &lt;dbl&gt; using the mutate_at() and as.numeric() function.\n\ndengue &lt;- dengue |&gt; \n  mutate_at(c('最小統計區中心點X', '最小統計區中心點Y'),as.numeric)\nglimpse(dengue)\n\nRows: 25,461\nColumns: 4\n$ 發病日            &lt;date&gt; 2023-07-30, 2023-07-30, 2023-07-30, 2023-07-30, 202…\n$ 最小統計區中心點X &lt;dbl&gt; 120.2202, 120.2180, 120.2354, 120.2456, 120.2465, 12…\n$ 最小統計區中心點Y &lt;dbl&gt; 22.97608, 22.98007, 23.01374, 23.01932, 23.01821, 23…\n$ EPIWEEK           &lt;dbl&gt; 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, …\n\n\n\n\nChange the Dengue Dataset into sf\nTo know where the coordinate of the dengue cases lies on the map, we need to change the dengue dataset into a sf object to get the point data of each dengue case. However, we need to ensure that the projection system of the Tainan geospatial data and the dengue dataset are the same. As such, let us take a look at the projection system that is used by the Tainan dataset.\n\nst_crs(tainan)\n\nCoordinate Reference System:\n  User input: TWD97 \n  wkt:\nGEOGCRS[\"TWD97\",\n    DATUM[\"Taiwan Datum 1997\",\n        ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"Taiwan, Republic of China - onshore and offshore - Taiwan Island, Penghu (Pescadores) Islands.\"],\n        BBOX[17.36,114.32,26.96,123.61]],\n    ID[\"EPSG\",3824]]\n\n\nNow we know that the Tainan geospatial data is set on the TWD97 with EPSG:3824. So, let’s use st_as_sf() function to change the dengue dataset into a sf object and use st_transform() to change the projection to EPSG:3824.\n\ndengue_sf &lt;- st_as_sf(dengue,\n                        coords = c(\"最小統計區中心點X\", \"最小統計區中心點Y\"),\n                        crs = 4326) |&gt;\n  st_transform(crs = 3824)\nst_crs(dengue_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3824 \n  wkt:\nGEOGCRS[\"TWD97\",\n    DATUM[\"Taiwan Datum 1997\",\n        ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"Taiwan, Republic of China - onshore and offshore - Taiwan Island, Penghu (Pescadores) Islands.\"],\n        BBOX[17.36,114.32,26.96,123.61]],\n    ID[\"EPSG\",3824]]"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#geospatial-data-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#geospatial-data-1",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Geospatial Data",
    "text": "Geospatial Data\n\nInspect and Narrow Down the Area of Focus\nFirst, let’s see what the Tainan dataset looks like.\n\ntmap_mode(\"plot\")\nqtm(tainan)\n\n\n\n\nThe plot shows the map of the whole Tainan City. However, we want to focus more on the villages and are confined to the D01, D02, D04, D06, D07, D08, D32 and D39 counties of Tainan City.\n\ntainan &lt;- tainan |&gt; \n  filter(TOWNID %in% c('D01', 'D02', 'D04', 'D06', 'D07', 'D08', 'D32', 'D39'))\nqtm(tainan)\n\n\n\n\n\ntm_shape(tainan) +\n  tm_fill(col=\"TOWNID\") +\n  tm_borders()\n\n\n\n\n\n\nSetting the Boundaries\nNow we have gotten the villages that we want. It is time for us to set the big area boundary to be able to find the dengue cases that are within the area of interest.\n\ntainan_sf &lt;- st_union(tainan)\nplot(tainan_sf)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#combining-aspatial-data-and-geospatial-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#combining-aspatial-data-and-geospatial-data",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Combining Aspatial Data and Geospatial Data",
    "text": "Combining Aspatial Data and Geospatial Data\n\nFind Dengue Cases within the Focus Area\nUpon further investigation, the data points of the dengue dataset lies all around Taiwan. As such, we need to narrow down the data points into the counties that we have selected.\n\ndengue_vill_sf &lt;- st_intersection(dengue_sf, tainan)\nglimpse(dengue_vill_sf)\n\nsaveRDS(dengue_vill_sf, file = \"rds/dengue_vill_sf.rds\")\n\n\ndengue_vill_sf &lt;- readRDS(\"rds/dengue_vill_sf.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#plot-time-series-graph-on-the-cases",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#plot-time-series-graph-on-the-cases",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Plot time series graph on the cases",
    "text": "Plot time series graph on the cases\nSince this is a time-series data and we want to know further about the cases that happened over the course of the year, let us plot the time-series graph.\n\ndengue_time &lt;- dengue |&gt; \n  group_by(發病日) |&gt; \n  summarise(n = n())\nglimpse(dengue_time)\n\nRows: 140\nColumns: 2\n$ 發病日 &lt;date&gt; 2023-07-30, 2023-07-31, 2023-08-01, 2023-08-02, 2023-08-03, 20…\n$ n      &lt;int&gt; 23, 42, 45, 45, 49, 49, 58, 65, 77, 69, 67, 56, 79, 72, 71, 74,…\n\n\n\nggplot(dengue_time, aes(x = 發病日, y = n)) +\n  geom_line()\n\n\n\n\nAs we can see in the graph, the dengue cases mostly happen between September to mid-November, with it’s peak in October. This may be due to the rainy season in October, such that there are plenty of spaces for the Aides aegypti mosquitos to breed. We will further inspect whether the dengue cases is dependent on time."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#plot-heat-map-on-the-graph-to-see-the-area-that-is-concentrated-on-having-the-dengue-cases",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#plot-heat-map-on-the-graph-to-see-the-area-that-is-concentrated-on-having-the-dengue-cases",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Plot heat map on the graph to see the area that is concentrated on having the dengue cases",
    "text": "Plot heat map on the graph to see the area that is concentrated on having the dengue cases\nNext, let take a look at the distribution of the location where the dengue cases are happening. We can plot the points of the cases in the Tainan map.\n\ntmap_mode(\"plot\")\ntm_shape(tainan_sf) +\n  tm_fill() +\n  tm_borders() +\n  tm_shape(dengue_vill_sf) +\n  tm_dots()\n\n\n\n\nAs we can see from the plot above, most of the cases are happening in the central of map, meaning that the spread of the dengue cases may be location-based.\nFrom the two speculations made above, let us further analyse whether there are any spatial and spatio-temporal relationship of the dengue cases."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#dengue-fever-layer-in-spacetime-s3-class-of-sfdep",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#dengue-fever-layer-in-spacetime-s3-class-of-sfdep",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Dengue Fever Layer in spacetime s3 class of sfdep",
    "text": "Dengue Fever Layer in spacetime s3 class of sfdep\n\nCreate empty dataframe\n\nvill_code_unique &lt;- unique(tainan$VILLCODE)\nepiwk_unique &lt;- unique(dengue$EPIWEEK)\ndengue_empty &lt;- expand.grid(VILLCODE = vill_code_unique, EPIWEEK = epiwk_unique) |&gt; mutate(VILLCODE = as.character(VILLCODE))\n\n\n\nCombine the sf objects to find cases in each village\n\ndengue_vill &lt;- st_join(tainan, dengue_sf, join=st_contains) \ndengue_vill_summ &lt;- dengue_vill |&gt; group_by(VILLNAME, VILLCODE, TOWNID, EPIWEEK) |&gt; summarise(num_cases = n())\nsaveRDS(dengue_vill, \"rds/dengue_vill.rds\")\nsaveRDS(dengue_vill_summ, \"rds/dengue_vill_summ.rds\")\n\n\ndengue_vill &lt;- readRDS(\"rds/dengue_vill.rds\")\ndengue_vill_summ &lt;- readRDS(\"rds/dengue_vill_summ.rds\")\n\n\n\nCreate dataframe to compile all the number of cases in each village per week\n\ndengue_df &lt;- st_drop_geometry(dengue_vill_summ)\ndengue_df &lt;- left_join(dengue_empty, dengue_df, by=c(\"VILLCODE\" = \"VILLCODE\", \"EPIWEEK\" = \"EPIWEEK\"))\ndengue_df &lt;- dengue_df |&gt; select(VILLCODE, VILLNAME, TOWNID, EPIWEEK, num_cases) |&gt; mutate(num_cases = replace_na(num_cases, 0))\ntainan_village &lt;- tainan |&gt; st_drop_geometry() |&gt; select(VILLCODE, VILLNAME, TOWNID)\ndengue_df &lt;- rows_patch(dengue_df, tainan_village, by=c(\"VILLCODE\"))\n\n\n\nCreate spacetime object\n\ndengue_st &lt;- spacetime(\n  .data = dengue_df, \n  .geometry = tainan, \n  .loc_col = \"VILLCODE\", \n  .time_col = \"EPIWEEK\"\n)\n\n\n\nActivate the spacetime object into data and check for spacetime cube object\n\n\n        VILLCODE VILLNAME TOWNID EPIWEEK num_cases\n1    67000350032   青草里    D06      31         0\n2    67000270011   保安里    D32      31         1\n3    67000370005   赤嵌里    D08      31         0\n4    67000330004   大成里    D02      31         0\n5    67000350028   城北里    D06      31         0\n6    67000350030   城南里    D06      31         0\n7    67000370009   法華里    D08      31         0\n8    67000350017   海南里    D06      31         0\n9    67000350049   國安里    D06      31         0\n10   67000350018   溪心里    D06      31         0\n11   67000350020   淵東里    D06      31         0\n12   67000350029   城中里    D06      31         0\n13   67000350027   城東里    D06      31         0\n14   67000350026   學東里    D06      31         0\n15   67000310013   東灣里    D39      31         0\n16   67000310015   南灣里    D39      31         0\n17   67000310016   崑山里    D39      31         4\n18   67000310012   大灣里    D39      31         2\n19   67000310001   五王里    D39      31        34\n20   67000310034   安康里    D39      31         2\n21   67000310035   西橋里    D39      31         1\n22   67000310002   網寮里    D39      31         0\n23   67000310005   大橋里    D39      31         1\n24   67000310033   東橋里    D39      31         4\n25   67000310007   烏竹里    D39      31         1\n26   67000310006   王行里    D39      31         0\n27   67000320003   大智里    D01      31         5\n28   67000320041   崇文里    D01      31         1\n29   67000320035   崇成里    D01      31         0\n30   67000320012   崇明里    D01      31         0\n31   67000320028   大福里    D01      31         0\n32   67000320032   崇德里    D01      31         6\n33   67000320016   大德里    D01      31         2\n34   67000320004   崇學里    D01      31        12\n35   67000320014   和平里    D01      31         2\n36   67000320019   崇善里    D01      31         5\n37   67000320015   路東里    D01      31         0\n38   67000320025   虎尾里    D01      31         2\n39   67000320029   忠孝里    D01      31         1\n40   67000320043   裕聖里    D01      31         1\n41   67000320040   崇信里    D01      31         3\n42   67000320039   德光里    D01      31        11\n43   67000320042   復興里    D01      31         0\n44   67000320013   自強里    D01      31         2\n45   67000320045   文聖里    D01      31         0\n46   67000320001   富裕里    D01      31         0\n47   67000320024   龍山里    D01      31         3\n48   67000320017   關聖里    D01      31         0\n49   67000320009   新東里    D01      31         1\n50   67000320020   富強里    D01      31         3\n51   67000320005   泉南里    D01      31         0\n52   67000320034   東聖里    D01      31         2\n53   67000320011   東安里    D01      31         0\n54   67000320038   大同里    D01      31         0\n55   67000320018   衛國里    D01      31         0\n56   67000320002   裕農里    D01      31         1\n57   67000320044   南聖里    D01      31         0\n58   67000320030   崇誨里    D01      31         1\n59   67000320036   東門里    D01      31         0\n60   67000320010   中西里    D01      31         0\n61   67000320031   東明里    D01      31         1\n62   67000320021   圍下里    D01      31         0\n63   67000320008   東光里    D01      31         1\n64   67000320007   後甲里    D01      31         0\n65   67000320027   莊敬里    D01      31         0\n66   67000320022   小東里    D01      31         2\n67   67000320023   大學里    D01      31         0\n68   67000320037   成大里    D01      31         0\n69   67000340033   公園里    D04      31         6\n70   67000340032   中樓里    D04      31         0\n71   67000340043   賢北里    D04      31         0\n72   67000340018   大豐里    D04      31         1\n73   67000340026   大港里    D04      31         0\n74   67000340023   正覺里    D04      31         0\n75   67000340042   大和里    D04      31         0\n76   67000340024   成功里    D04      31         0\n77   67000330020   佛壇里    D02      31         0\n78   67000330019   同安里    D02      31         1\n79   67000330037   松安里    D02      31         0\n80   67000330038   永寧里    D02      31         0\n81   67000330016   喜南里    D02      31         0\n82   67000330014   喜東里    D02      31         0\n83   67000330015   喜北里    D02      31         0\n84   67000330029   南都里    D02      31         1\n85   67000330039   南華里    D02      31         0\n86   67000330032   建南里    D02      31         0\n87   67000330026   明興里    D02      31         0\n88   67000330033   郡南里    D02      31         0\n89   67000330030   開南里    D02      31         0\n90   67000330013   明亮里    D02      31         2\n91   67000330036   鯤鯓里    D02      31         0\n92   67000330022   大忠里    D02      31         0\n93   67000330011   光明里    D02      31         1\n94   67000330034   府南里    D02      31         3\n95   67000330021   大林里    D02      31         0\n96   67000330009   國宅里    D02      31         0\n97   67000330008   田寮里    D02      31         1\n98   67000330024   新生里    D02      31         0\n99   67000330001   竹溪里    D02      31         0\n100  67000330003   明德里    D02      31         0\n101  67000330025   再興里    D02      31         1\n102  67000330031   彰南里    D02      31         0\n103  67000330028   金華里    D02      31         0\n104  67000330007   新興里    D02      31         1\n105  67000330035   文南里    D02      31         0\n106  67000330006   新昌里    D02      31         0\n107  67000330005   廣州里    D02      31         1\n108  67000330027   文華里    D02      31         0\n109  67000350039   溪頂里    D06      31         2\n110  67000350041   海佃里    D06      31         7\n111  67000350046   溪東里    D06      31         1\n112  67000350038   溪北里    D06      31         0\n113  67000350040   溪墘里    D06      31         5\n114  67000350050   安富里    D06      31         1\n115  67000350019   塩田里    D06      31         0\n116  67000350043   鳳凰里    D06      31         9\n117  67000350014   公親里    D06      31         0\n118  67000350033   砂崙里    D06      31         0\n119  67000360009   文平里    D07      31         0\n120  67000360010   國平里    D07      31         1\n121  67000360011   育平里    D07      31         0\n122  67000360007   華平里    D07      31         0\n123  67000360006   怡平里    D07      31         0\n124  67000360005   建平里    D07      31         0\n125  67000350042   幸福里    D06      31         3\n126  67000270008   上崙里    D32      31         0\n127  67000270007   後壁里    D32      31         1\n128  67000270012   成功里    D32      31         7\n129  67000270013   仁和里    D32      31         1\n130  67000270014   仁愛里    D32      31         2\n131  67000270004   仁德里    D32      31         4\n132  67000330018   興農里    D02      31         0\n133  67000330017   省躬里    D02      31         0\n134  67000270006   新田里    D32      31         0\n135  67000270003   一甲里    D32      31         1\n136  67000320026   德高里    D01      31         1\n137  67000320006   仁和里    D01      31         2\n138  67000270017   中洲里    D32      31         0\n139  67000310014   西灣里    D39      31         1\n140  67000310011   甲頂里    D39      31         1\n141  67000310003   永康里    D39      31         0\n142  67000310038   正強里    D39      31         3\n143  67000360004   漁光里    D07      31         0\n144  67000360002   金城里    D07      31         0\n145  67000310036   尚頂里    D39      31         0\n146  67000310019   復興里    D39      31         0\n147  67000310022   神洲里    D39      31         0\n148  67000310020   復國里    D39      31         3\n149  67000310032   三合里    D39      31         4\n150  67000310037   復華里    D39      31         5\n151  67000310030   二王里    D39      31         6\n152  67000320033   東智里    D01      31         1\n153  67000330023   大恩里    D02      31         0\n154  67000370033   西湖里    D08      31         0\n155  67000360015   平安里    D07      31         3\n156  67000370034   西賢里    D08      31         2\n157  67000350036   四草里    D06      31         0\n158  67000350006   安東里    D06      31         1\n159  67000350047   淵中里    D06      31         0\n160  67000350031   城西里    D06      31         0\n161  67000350022   佃東里    D06      31         0\n162  67000350010   新順里    D06      31         0\n163  67000310018   新樹里    D39      31         0\n164  67000310010   塩行里    D39      31         0\n165  67000350035   鹿耳里    D06      31         0\n166  67000350016   海西里    D06      31         0\n167  67000350023   佃西里    D06      31         0\n168  67000270019   文賢里    D32      31         0\n169  67000310041   龍埔里    D39      31         0\n170  67000310042   永明里    D39      31         1\n171  67000330040   鹽埕里    D02      31         0\n172  67000340051   北華里    D04      31         0\n173  67000340052   華德里    D04      31         0\n174  67000340053   福德里    D04      31         0\n175  67000340044   長勝里    D04      31         0\n176  67000340050   長興里    D04      31         0\n177  67000340049   大興里    D04      31         0\n178  67000340048   大光里    D04      31         0\n179  67000340047   小北里    D04      31         0\n180  67000340055   雙安里    D04      31         0\n181  67000340054   立人里    D04      31         0\n182  67000370042 小西門里    D08      31         1\n183  67000370044   兌悅里    D08      31         1\n184  67000370043 五條港里    D08      31         0\n185  67000370040   南美里    D08      31         0\n186  67000360017   王城里    D07      31         0\n187  67000360016   天妃里    D07      31         0\n188  67000370039   城隍里    D08      31         0\n189  67000370048   西和里    D08      31         0\n190  67000340046   北門里    D04      31         1\n191  67000310029   塩洲里    D39      31         0\n192  67000340004   東興里    D04      31         0\n193  67000340019   重興里    D04      31         0\n194  67000340020   和順里    D04      31         0\n195  67000340005   力行里    D04      31         0\n196  67000340041   文成里    D04      31         0\n197  67000340038   元寶里    D04      31         1\n198  67000340001   開元里    D04      31         0\n199  67000340040   成德里    D04      31         3\n200  67000370016   永華里    D08      31         0\n201  67000370007   郡王里    D08      31         0\n202  67000310043   塩興里    D39      31         0\n203  67000340056   元美里    D04      31         0\n204  67000370047   南廠里    D08      31         0\n205  67000370045   淺草里    D08      31         1\n206  67000370046   府前里    D08      31         0\n207  67000370041   南門里    D08      31         0\n208  67000340045   合興里    D04      31         1\n209  67000310017   北灣里    D39      31         0\n210  67000310040   北興里    D39      31         0\n211  67000310027   龍潭里    D39      31         0\n212  67000310004   埔園里    D39      31         2\n213  67000310009   三民里    D39      31         0\n214  67000340008   仁愛里    D04      31         0\n215  67000340007   振興里    D04      31         1\n216  67000340039   永祥里    D04      31         0\n217  67000340025   文元里    D04      31         0\n218  67000370011   開山里    D08      31         0\n219  67000370031   大涼里    D08      31         0\n220  67000370022   藥王里    D08      31         0\n221  67000370025   光賢里    D08      31         2\n222  67000270015   二行里    D32      31         0\n223  67000270016   大甲里    D32      31         0\n224  67000270005   仁義里    D32      31         2\n225  67000270002   土庫里    D32      31         0\n226  67000270001   太子里    D32      31         0\n227  67000350007   安西里    D06      31         0\n228  67000350051   大安里    D06      31         0\n229  67000350037   安和里    D06      31         0\n230  67000350045   理想里    D06      31         0\n231  67000350009   安慶里    D06      31         0\n232  67000350044   梅花里    D06      31         0\n233  67000350008   頂安里    D06      31         1\n234  67000350002   安順里    D06      31         0\n235  67000350012   總頭里    D06      31         0\n236  67000350011   原佃里    D06      31         0\n237  67000350001   東和里    D06      31         0\n238  67000310028   光復里    D39      31         0\n239  67000310026   勝利里    D39      31        11\n240  67000310021   建國里    D39      31         0\n241  67000310031   六合里    D39      31         4\n242  67000350021   淵西里    D06      31         0\n243  67000350013   長安里    D06      31         0\n244  67000310039   中華里    D39      31         3\n245  67000310024   成功里    D39      31         2\n246  67000310025   中興里    D39      31         2\n247  67000310023   西勢里    D39      31         0\n248  67000310008   蔦松里    D39      31         0\n249  67000350034   顯宮里    D06      31         0\n250  67000350004   州南里    D06      31         0\n251  67000350048   布袋里    D06      31         0\n252  67000350005   州北里    D06      31         0\n253  67000350003   塭南里    D06      31         0\n254  67000350024   公塭里    D06      31         0\n255  67000350025   南興里    D06      31         0\n256  67000360012   億載里    D07      31         1\n257  67000360008   平通里    D07      31         0\n258  67000350015   海東里    D06      31         1\n259  67000350032   青草里    D06      32         0\n260  67000270011   保安里    D32      32         0\n261  67000370005   赤嵌里    D08      32         0\n262  67000330004   大成里    D02      32         0\n263  67000350028   城北里    D06      32         0\n264  67000350030   城南里    D06      32         0\n265  67000370009   法華里    D08      32         1\n266  67000350017   海南里    D06      32         0\n267  67000350049   國安里    D06      32         3\n268  67000350018   溪心里    D06      32         1\n269  67000350020   淵東里    D06      32         2\n270  67000350029   城中里    D06      32         0\n271  67000350027   城東里    D06      32         0\n272  67000350026   學東里    D06      32         0\n273  67000310013   東灣里    D39      32         0\n274  67000310015   南灣里    D39      32         1\n275  67000310016   崑山里    D39      32         6\n276  67000310012   大灣里    D39      32         0\n277  67000310001   五王里    D39      32        29\n278  67000310034   安康里    D39      32         1\n279  67000310035   西橋里    D39      32         0\n280  67000310002   網寮里    D39      32         1\n281  67000310005   大橋里    D39      32         1\n282  67000310033   東橋里    D39      32         6\n283  67000310007   烏竹里    D39      32         0\n284  67000310006   王行里    D39      32         0\n285  67000320003   大智里    D01      32         6\n286  67000320041   崇文里    D01      32         3\n287  67000320035   崇成里    D01      32         0\n288  67000320012   崇明里    D01      32         1\n289  67000320028   大福里    D01      32         0\n290  67000320032   崇德里    D01      32        19\n291  67000320016   大德里    D01      32         3\n292  67000320004   崇學里    D01      32         8\n293  67000320014   和平里    D01      32         3\n294  67000320019   崇善里    D01      32        10\n295  67000320015   路東里    D01      32         0\n296  67000320025   虎尾里    D01      32         3\n297  67000320029   忠孝里    D01      32         1\n298  67000320043   裕聖里    D01      32         1\n299  67000320040   崇信里    D01      32         5\n300  67000320039   德光里    D01      32         6\n301  67000320042   復興里    D01      32         0\n302  67000320013   自強里    D01      32         0\n303  67000320045   文聖里    D01      32         0\n304  67000320001   富裕里    D01      32         1\n305  67000320024   龍山里    D01      32         4\n306  67000320017   關聖里    D01      32         1\n307  67000320009   新東里    D01      32         1\n308  67000320020   富強里    D01      32         2\n309  67000320005   泉南里    D01      32         4\n310  67000320034   東聖里    D01      32         2\n311  67000320011   東安里    D01      32         0\n312  67000320038   大同里    D01      32         1\n313  67000320018   衛國里    D01      32         0\n314  67000320002   裕農里    D01      32         4\n315  67000320044   南聖里    D01      32         0\n316  67000320030   崇誨里    D01      32         1\n317  67000320036   東門里    D01      32         0\n318  67000320010   中西里    D01      32         3\n319  67000320031   東明里    D01      32         0\n320  67000320021   圍下里    D01      32         0\n321  67000320008   東光里    D01      32         1\n322  67000320007   後甲里    D01      32         1\n323  67000320027   莊敬里    D01      32         4\n324  67000320022   小東里    D01      32         4\n325  67000320023   大學里    D01      32         1\n326  67000320037   成大里    D01      32         1\n327  67000340033   公園里    D04      32         2\n328  67000340032   中樓里    D04      32         5\n329  67000340043   賢北里    D04      32         0\n330  67000340018   大豐里    D04      32         0\n331  67000340026   大港里    D04      32         0\n332  67000340023   正覺里    D04      32         3\n333  67000340042   大和里    D04      32         0\n334  67000340024   成功里    D04      32         0\n335  67000330020   佛壇里    D02      32         2\n336  67000330019   同安里    D02      32         0\n337  67000330037   松安里    D02      32         0\n338  67000330038   永寧里    D02      32         0\n339  67000330016   喜南里    D02      32         0\n340  67000330014   喜東里    D02      32         1\n341  67000330015   喜北里    D02      32         1\n342  67000330029   南都里    D02      32         0\n343  67000330039   南華里    D02      32        12\n344  67000330032   建南里    D02      32         0\n345  67000330026   明興里    D02      32         2\n346  67000330033   郡南里    D02      32         0\n347  67000330030   開南里    D02      32         0\n348  67000330013   明亮里    D02      32         1\n349  67000330036   鯤鯓里    D02      32         0\n350  67000330022   大忠里    D02      32         0\n351  67000330011   光明里    D02      32         0\n352  67000330034   府南里    D02      32         3\n353  67000330021   大林里    D02      32         0\n354  67000330009   國宅里    D02      32         0\n355  67000330008   田寮里    D02      32         0\n356  67000330024   新生里    D02      32         0\n357  67000330001   竹溪里    D02      32         0\n358  67000330003   明德里    D02      32         0\n359  67000330025   再興里    D02      32         0\n360  67000330031   彰南里    D02      32         0\n361  67000330028   金華里    D02      32         0\n362  67000330007   新興里    D02      32         0\n363  67000330035   文南里    D02      32         2\n364  67000330006   新昌里    D02      32         0\n365  67000330005   廣州里    D02      32         0\n366  67000330027   文華里    D02      32         0\n367  67000350039   溪頂里    D06      32         3\n368  67000350041   海佃里    D06      32        11\n369  67000350046   溪東里    D06      32         6\n370  67000350038   溪北里    D06      32         2\n371  67000350040   溪墘里    D06      32         8\n372  67000350050   安富里    D06      32        10\n373  67000350019   塩田里    D06      32         0\n374  67000350043   鳳凰里    D06      32         8\n375  67000350014   公親里    D06      32         0\n376  67000350033   砂崙里    D06      32         0\n377  67000360009   文平里    D07      32         0\n378  67000360010   國平里    D07      32         1\n379  67000360011   育平里    D07      32         0\n380  67000360007   華平里    D07      32         0\n381  67000360006   怡平里    D07      32         0\n382  67000360005   建平里    D07      32         1\n383  67000350042   幸福里    D06      32         9\n384  67000270008   上崙里    D32      32         1\n385  67000270007   後壁里    D32      32         1\n386  67000270012   成功里    D32      32         1\n387  67000270013   仁和里    D32      32         0\n388  67000270014   仁愛里    D32      32         1\n389  67000270004   仁德里    D32      32         1\n390  67000330018   興農里    D02      32         0\n391  67000330017   省躬里    D02      32         1\n392  67000270006   新田里    D32      32         0\n393  67000270003   一甲里    D32      32         2\n394  67000320026   德高里    D01      32         1\n395  67000320006   仁和里    D01      32         3\n396  67000270017   中洲里    D32      32         2\n397  67000310014   西灣里    D39      32         1\n398  67000310011   甲頂里    D39      32         5\n399  67000310003   永康里    D39      32         0\n400  67000310038   正強里    D39      32         6\n401  67000360004   漁光里    D07      32         0\n402  67000360002   金城里    D07      32         0\n403  67000310036   尚頂里    D39      32         0\n404  67000310019   復興里    D39      32         0\n405  67000310022   神洲里    D39      32         0\n406  67000310020   復國里    D39      32         3\n407  67000310032   三合里    D39      32         2\n408  67000310037   復華里    D39      32         8\n409  67000310030   二王里    D39      32        17\n410  67000320033   東智里    D01      32         0\n411  67000330023   大恩里    D02      32         0\n412  67000370033   西湖里    D08      32         2\n413  67000360015   平安里    D07      32         2\n414  67000370034   西賢里    D08      32         1\n415  67000350036   四草里    D06      32         0\n416  67000350006   安東里    D06      32         0\n417  67000350047   淵中里    D06      32         0\n418  67000350031   城西里    D06      32         0\n419  67000350022   佃東里    D06      32         0\n420  67000350010   新順里    D06      32         0\n421  67000310018   新樹里    D39      32         0\n422  67000310010   塩行里    D39      32         2\n423  67000350035   鹿耳里    D06      32         0\n424  67000350016   海西里    D06      32         2\n425  67000350023   佃西里    D06      32         0\n426  67000270019   文賢里    D32      32         0\n427  67000310041   龍埔里    D39      32         1\n428  67000310042   永明里    D39      32         1\n429  67000330040   鹽埕里    D02      32         2\n430  67000340051   北華里    D04      32         0\n431  67000340052   華德里    D04      32         0\n432  67000340053   福德里    D04      32         1\n433  67000340044   長勝里    D04      32         1\n434  67000340050   長興里    D04      32         0\n435  67000340049   大興里    D04      32         1\n436  67000340048   大光里    D04      32         1\n437  67000340047   小北里    D04      32         1\n438  67000340055   雙安里    D04      32         0\n439  67000340054   立人里    D04      32         1\n440  67000370042 小西門里    D08      32         0\n441  67000370044   兌悅里    D08      32         1\n442  67000370043 五條港里    D08      32         0\n443  67000370040   南美里    D08      32         0\n444  67000360017   王城里    D07      32         1\n445  67000360016   天妃里    D07      32         0\n446  67000370039   城隍里    D08      32         1\n447  67000370048   西和里    D08      32         1\n448  67000340046   北門里    D04      32         2\n449  67000310029   塩洲里    D39      32         1\n450  67000340004   東興里    D04      32         1\n451  67000340019   重興里    D04      32         0\n452  67000340020   和順里    D04      32         0\n453  67000340005   力行里    D04      32         1\n454  67000340041   文成里    D04      32         0\n455  67000340038   元寶里    D04      32         2\n456  67000340001   開元里    D04      32         0\n457  67000340040   成德里    D04      32         0\n458  67000370016   永華里    D08      32         0\n459  67000370007   郡王里    D08      32         1\n460  67000310043   塩興里    D39      32         1\n461  67000340056   元美里    D04      32         0\n462  67000370047   南廠里    D08      32         0\n463  67000370045   淺草里    D08      32         0\n464  67000370046   府前里    D08      32         0\n465  67000370041   南門里    D08      32         0\n466  67000340045   合興里    D04      32         1\n467  67000310017   北灣里    D39      32         0\n468  67000310040   北興里    D39      32         0\n469  67000310027   龍潭里    D39      32         2\n470  67000310004   埔園里    D39      32         0\n471  67000310009   三民里    D39      32         0\n472  67000340008   仁愛里    D04      32         0\n473  67000340007   振興里    D04      32         1\n474  67000340039   永祥里    D04      32         1\n475  67000340025   文元里    D04      32         2\n476  67000370011   開山里    D08      32         0\n477  67000370031   大涼里    D08      32         0\n478  67000370022   藥王里    D08      32         0\n479  67000370025   光賢里    D08      32         2\n480  67000270015   二行里    D32      32         1\n481  67000270016   大甲里    D32      32         0\n482  67000270005   仁義里    D32      32         1\n483  67000270002   土庫里    D32      32         0\n484  67000270001   太子里    D32      32         0\n485  67000350007   安西里    D06      32         1\n486  67000350051   大安里    D06      32         1\n487  67000350037   安和里    D06      32         0\n488  67000350045   理想里    D06      32         1\n489  67000350009   安慶里    D06      32         0\n490  67000350044   梅花里    D06      32         2\n491  67000350008   頂安里    D06      32         0\n492  67000350002   安順里    D06      32         1\n493  67000350012   總頭里    D06      32         1\n494  67000350011   原佃里    D06      32         0\n495  67000350001   東和里    D06      32         0\n496  67000310028   光復里    D39      32         0\n497  67000310026   勝利里    D39      32         4\n498  67000310021   建國里    D39      32         0\n499  67000310031   六合里    D39      32         1\n500  67000350021   淵西里    D06      32         0\n501  67000350013   長安里    D06      32         0\n502  67000310039   中華里    D39      32         6\n503  67000310024   成功里    D39      32         1\n504  67000310025   中興里    D39      32         1\n505  67000310023   西勢里    D39      32         1\n506  67000310008   蔦松里    D39      32         0\n507  67000350034   顯宮里    D06      32         0\n508  67000350004   州南里    D06      32         0\n509  67000350048   布袋里    D06      32         0\n510  67000350005   州北里    D06      32         1\n511  67000350003   塭南里    D06      32         0\n512  67000350024   公塭里    D06      32         0\n513  67000350025   南興里    D06      32         0\n514  67000360012   億載里    D07      32         0\n515  67000360008   平通里    D07      32         0\n516  67000350015   海東里    D06      32         5\n517  67000350032   青草里    D06      33         0\n518  67000270011   保安里    D32      33         0\n519  67000370005   赤嵌里    D08      33         0\n520  67000330004   大成里    D02      33         0\n521  67000350028   城北里    D06      33         0\n522  67000350030   城南里    D06      33         1\n523  67000370009   法華里    D08      33         0\n524  67000350017   海南里    D06      33         1\n525  67000350049   國安里    D06      33         4\n526  67000350018   溪心里    D06      33         0\n527  67000350020   淵東里    D06      33         1\n528  67000350029   城中里    D06      33         0\n529  67000350027   城東里    D06      33         0\n530  67000350026   學東里    D06      33         0\n531  67000310013   東灣里    D39      33         0\n532  67000310015   南灣里    D39      33         0\n533  67000310016   崑山里    D39      33         5\n534  67000310012   大灣里    D39      33         0\n535  67000310001   五王里    D39      33        11\n536  67000310034   安康里    D39      33         1\n537  67000310035   西橋里    D39      33         1\n538  67000310002   網寮里    D39      33         0\n539  67000310005   大橋里    D39      33         7\n540  67000310033   東橋里    D39      33         7\n541  67000310007   烏竹里    D39      33         0\n542  67000310006   王行里    D39      33         0\n543  67000320003   大智里    D01      33         2\n544  67000320041   崇文里    D01      33         2\n545  67000320035   崇成里    D01      33         1\n546  67000320012   崇明里    D01      33         2\n547  67000320028   大福里    D01      33         1\n548  67000320032   崇德里    D01      33        12\n549  67000320016   大德里    D01      33         0\n550  67000320004   崇學里    D01      33        16\n551  67000320014   和平里    D01      33         0\n552  67000320019   崇善里    D01      33         4\n553  67000320015   路東里    D01      33         0\n554  67000320025   虎尾里    D01      33         5\n555  67000320029   忠孝里    D01      33         3\n556  67000320043   裕聖里    D01      33         1\n557  67000320040   崇信里    D01      33         6\n558  67000320039   德光里    D01      33        11\n559  67000320042   復興里    D01      33         2\n560  67000320013   自強里    D01      33         6\n561  67000320045   文聖里    D01      33         0\n562  67000320001   富裕里    D01      33         0\n563  67000320024   龍山里    D01      33         2\n564  67000320017   關聖里    D01      33         0\n565  67000320009   新東里    D01      33         5\n566  67000320020   富強里    D01      33         2\n567  67000320005   泉南里    D01      33         2\n568  67000320034   東聖里    D01      33         1\n569  67000320011   東安里    D01      33         0\n570  67000320038   大同里    D01      33         0\n571  67000320018   衛國里    D01      33         1\n572  67000320002   裕農里    D01      33         3\n573  67000320044   南聖里    D01      33         2\n574  67000320030   崇誨里    D01      33         0\n575  67000320036   東門里    D01      33         0\n576  67000320010   中西里    D01      33         1\n577  67000320031   東明里    D01      33         0\n578  67000320021   圍下里    D01      33         0\n579  67000320008   東光里    D01      33         0\n580  67000320007   後甲里    D01      33         1\n581  67000320027   莊敬里    D01      33         2\n582  67000320022   小東里    D01      33         3\n583  67000320023   大學里    D01      33         0\n584  67000320037   成大里    D01      33         0\n585  67000340033   公園里    D04      33         2\n586  67000340032   中樓里    D04      33         4\n587  67000340043   賢北里    D04      33         1\n588  67000340018   大豐里    D04      33         0\n589  67000340026   大港里    D04      33         0\n590  67000340023   正覺里    D04      33         0\n591  67000340042   大和里    D04      33         1\n592  67000340024   成功里    D04      33         0\n593  67000330020   佛壇里    D02      33         0\n594  67000330019   同安里    D02      33         0\n595  67000330037   松安里    D02      33         0\n596  67000330038   永寧里    D02      33         0\n597  67000330016   喜南里    D02      33         0\n598  67000330014   喜東里    D02      33         0\n599  67000330015   喜北里    D02      33         0\n600  67000330029   南都里    D02      33         1\n601  67000330039   南華里    D02      33        13\n602  67000330032   建南里    D02      33         1\n603  67000330026   明興里    D02      33         3\n604  67000330033   郡南里    D02      33         0\n605  67000330030   開南里    D02      33         1\n606  67000330013   明亮里    D02      33         3\n607  67000330036   鯤鯓里    D02      33         0\n608  67000330022   大忠里    D02      33         0\n609  67000330011   光明里    D02      33         2\n610  67000330034   府南里    D02      33         6\n611  67000330021   大林里    D02      33         0\n612  67000330009   國宅里    D02      33         1\n613  67000330008   田寮里    D02      33         0\n614  67000330024   新生里    D02      33         1\n615  67000330001   竹溪里    D02      33         0\n616  67000330003   明德里    D02      33         0\n617  67000330025   再興里    D02      33         0\n618  67000330031   彰南里    D02      33         0\n619  67000330028   金華里    D02      33         0\n620  67000330007   新興里    D02      33         0\n621  67000330035   文南里    D02      33         0\n622  67000330006   新昌里    D02      33         2\n623  67000330005   廣州里    D02      33         0\n624  67000330027   文華里    D02      33         0\n625  67000350039   溪頂里    D06      33         3\n626  67000350041   海佃里    D06      33         5\n627  67000350046   溪東里    D06      33         1\n628  67000350038   溪北里    D06      33         1\n629  67000350040   溪墘里    D06      33        27\n630  67000350050   安富里    D06      33        11\n631  67000350019   塩田里    D06      33         0\n632  67000350043   鳳凰里    D06      33         9\n633  67000350014   公親里    D06      33         0\n634  67000350033   砂崙里    D06      33         0\n635  67000360009   文平里    D07      33         1\n636  67000360010   國平里    D07      33         1\n637  67000360011   育平里    D07      33         1\n638  67000360007   華平里    D07      33         0\n639  67000360006   怡平里    D07      33         1\n640  67000360005   建平里    D07      33         0\n641  67000350042   幸福里    D06      33        15\n642  67000270008   上崙里    D32      33         0\n643  67000270007   後壁里    D32      33         0\n644  67000270012   成功里    D32      33         1\n645  67000270013   仁和里    D32      33         1\n646  67000270014   仁愛里    D32      33         1\n647  67000270004   仁德里    D32      33         3\n648  67000330018   興農里    D02      33         1\n649  67000330017   省躬里    D02      33         0\n650  67000270006   新田里    D32      33         0\n651  67000270003   一甲里    D32      33         0\n652  67000320026   德高里    D01      33         6\n653  67000320006   仁和里    D01      33         3\n654  67000270017   中洲里    D32      33         0\n655  67000310014   西灣里    D39      33         2\n656  67000310011   甲頂里    D39      33         9\n657  67000310003   永康里    D39      33         1\n658  67000310038   正強里    D39      33         0\n659  67000360004   漁光里    D07      33         0\n660  67000360002   金城里    D07      33         0\n661  67000310036   尚頂里    D39      33         3\n662  67000310019   復興里    D39      33         1\n663  67000310022   神洲里    D39      33         2\n664  67000310020   復國里    D39      33         5\n665  67000310032   三合里    D39      33         8\n666  67000310037   復華里    D39      33        12\n667  67000310030   二王里    D39      33        12\n668  67000320033   東智里    D01      33         0\n669  67000330023   大恩里    D02      33         2\n670  67000370033   西湖里    D08      33         1\n671  67000360015   平安里    D07      33         7\n672  67000370034   西賢里    D08      33         1\n673  67000350036   四草里    D06      33         1\n674  67000350006   安東里    D06      33         2\n675  67000350047   淵中里    D06      33         0\n676  67000350031   城西里    D06      33         0\n677  67000350022   佃東里    D06      33         0\n678  67000350010   新順里    D06      33         0\n679  67000310018   新樹里    D39      33         0\n680  67000310010   塩行里    D39      33         3\n681  67000350035   鹿耳里    D06      33         0\n682  67000350016   海西里    D06      33         0\n683  67000350023   佃西里    D06      33         1\n684  67000270019   文賢里    D32      33         1\n685  67000310041   龍埔里    D39      33         0\n686  67000310042   永明里    D39      33         1\n687  67000330040   鹽埕里    D02      33         7\n688  67000340051   北華里    D04      33         1\n689  67000340052   華德里    D04      33         2\n690  67000340053   福德里    D04      33         1\n691  67000340044   長勝里    D04      33         1\n692  67000340050   長興里    D04      33         1\n693  67000340049   大興里    D04      33         2\n694  67000340048   大光里    D04      33         1\n695  67000340047   小北里    D04      33         0\n696  67000340055   雙安里    D04      33         1\n697  67000340054   立人里    D04      33         1\n698  67000370042 小西門里    D08      33         2\n699  67000370044   兌悅里    D08      33         0\n700  67000370043 五條港里    D08      33         2\n701  67000370040   南美里    D08      33         0\n702  67000360017   王城里    D07      33         0\n703  67000360016   天妃里    D07      33         0\n704  67000370039   城隍里    D08      33         1\n705  67000370048   西和里    D08      33         1\n706  67000340046   北門里    D04      33         9\n707  67000310029   塩洲里    D39      33         0\n708  67000340004   東興里    D04      33         1\n709  67000340019   重興里    D04      33         0\n710  67000340020   和順里    D04      33         0\n711  67000340005   力行里    D04      33         2\n712  67000340041   文成里    D04      33         0\n713  67000340038   元寶里    D04      33         0\n714  67000340001   開元里    D04      33         1\n715  67000340040   成德里    D04      33         1\n716  67000370016   永華里    D08      33         0\n717  67000370007   郡王里    D08      33         2\n718  67000310043   塩興里    D39      33         0\n719  67000340056   元美里    D04      33         0\n720  67000370047   南廠里    D08      33         0\n721  67000370045   淺草里    D08      33         0\n722  67000370046   府前里    D08      33         0\n723  67000370041   南門里    D08      33         3\n724  67000340045   合興里    D04      33         0\n725  67000310017   北灣里    D39      33         0\n726  67000310040   北興里    D39      33         0\n727  67000310027   龍潭里    D39      33         0\n728  67000310004   埔園里    D39      33         1\n729  67000310009   三民里    D39      33         0\n730  67000340008   仁愛里    D04      33         0\n731  67000340007   振興里    D04      33         2\n732  67000340039   永祥里    D04      33         0\n733  67000340025   文元里    D04      33         0\n734  67000370011   開山里    D08      33         0\n735  67000370031   大涼里    D08      33         0\n736  67000370022   藥王里    D08      33         1\n737  67000370025   光賢里    D08      33         2\n738  67000270015   二行里    D32      33         1\n739  67000270016   大甲里    D32      33         0\n740  67000270005   仁義里    D32      33         7\n741  67000270002   土庫里    D32      33         2\n742  67000270001   太子里    D32      33         1\n743  67000350007   安西里    D06      33         0\n744  67000350051   大安里    D06      33         1\n745  67000350037   安和里    D06      33         2\n746  67000350045   理想里    D06      33         3\n747  67000350009   安慶里    D06      33         0\n748  67000350044   梅花里    D06      33         1\n749  67000350008   頂安里    D06      33         2\n750  67000350002   安順里    D06      33         1\n751  67000350012   總頭里    D06      33         0\n752  67000350011   原佃里    D06      33         2\n753  67000350001   東和里    D06      33         0\n754  67000310028   光復里    D39      33         0\n755  67000310026   勝利里    D39      33        15\n756  67000310021   建國里    D39      33         0\n757  67000310031   六合里    D39      33         3\n758  67000350021   淵西里    D06      33         0\n759  67000350013   長安里    D06      33         0\n760  67000310039   中華里    D39      33         2\n761  67000310024   成功里    D39      33         1\n762  67000310025   中興里    D39      33         0\n763  67000310023   西勢里    D39      33         0\n764  67000310008   蔦松里    D39      33         1\n765  67000350034   顯宮里    D06      33         0\n766  67000350004   州南里    D06      33         1\n767  67000350048   布袋里    D06      33         0\n768  67000350005   州北里    D06      33         0\n769  67000350003   塭南里    D06      33         1\n770  67000350024   公塭里    D06      33         0\n771  67000350025   南興里    D06      33         0\n772  67000360012   億載里    D07      33         0\n773  67000360008   平通里    D07      33         0\n774  67000350015   海東里    D06      33         0\n775  67000350032   青草里    D06      34         0\n776  67000270011   保安里    D32      34         0\n777  67000370005   赤嵌里    D08      34         0\n778  67000330004   大成里    D02      34         0\n779  67000350028   城北里    D06      34         0\n780  67000350030   城南里    D06      34         0\n781  67000370009   法華里    D08      34         1\n782  67000350017   海南里    D06      34         2\n783  67000350049   國安里    D06      34        18\n784  67000350018   溪心里    D06      34         4\n785  67000350020   淵東里    D06      34         0\n786  67000350029   城中里    D06      34         0\n787  67000350027   城東里    D06      34         0\n788  67000350026   學東里    D06      34         2\n789  67000310013   東灣里    D39      34         3\n790  67000310015   南灣里    D39      34         0\n791  67000310016   崑山里    D39      34         7\n792  67000310012   大灣里    D39      34         1\n793  67000310001   五王里    D39      34        16\n794  67000310034   安康里    D39      34         2\n795  67000310035   西橋里    D39      34         0\n796  67000310002   網寮里    D39      34         3\n797  67000310005   大橋里    D39      34        12\n798  67000310033   東橋里    D39      34         3\n799  67000310007   烏竹里    D39      34         0\n800  67000310006   王行里    D39      34         0\n801  67000320003   大智里    D01      34         7\n802  67000320041   崇文里    D01      34         3\n803  67000320035   崇成里    D01      34         3\n804  67000320012   崇明里    D01      34         2\n805  67000320028   大福里    D01      34         0\n806  67000320032   崇德里    D01      34        17\n807  67000320016   大德里    D01      34         1\n808  67000320004   崇學里    D01      34         2\n809  67000320014   和平里    D01      34         5\n810  67000320019   崇善里    D01      34        10\n811  67000320015   路東里    D01      34         1\n812  67000320025   虎尾里    D01      34         7\n813  67000320029   忠孝里    D01      34         7\n814  67000320043   裕聖里    D01      34         1\n815  67000320040   崇信里    D01      34        10\n816  67000320039   德光里    D01      34         6\n817  67000320042   復興里    D01      34         4\n818  67000320013   自強里    D01      34        14\n819  67000320045   文聖里    D01      34         2\n820  67000320001   富裕里    D01      34         1\n821  67000320024   龍山里    D01      34         1\n822  67000320017   關聖里    D01      34         1\n823  67000320009   新東里    D01      34         7\n824  67000320020   富強里    D01      34         5\n825  67000320005   泉南里    D01      34         6\n826  67000320034   東聖里    D01      34         2\n827  67000320011   東安里    D01      34         0\n828  67000320038   大同里    D01      34         1\n829  67000320018   衛國里    D01      34         4\n830  67000320002   裕農里    D01      34         6\n831  67000320044   南聖里    D01      34         0\n832  67000320030   崇誨里    D01      34         3\n833  67000320036   東門里    D01      34         0\n834  67000320010   中西里    D01      34         0\n835  67000320031   東明里    D01      34         0\n836  67000320021   圍下里    D01      34         1\n837  67000320008   東光里    D01      34         1\n838  67000320007   後甲里    D01      34         0\n839  67000320027   莊敬里    D01      34         2\n840  67000320022   小東里    D01      34         1\n841  67000320023   大學里    D01      34         0\n842  67000320037   成大里    D01      34         1\n843  67000340033   公園里    D04      34         6\n844  67000340032   中樓里    D04      34         6\n845  67000340043   賢北里    D04      34         0\n846  67000340018   大豐里    D04      34         0\n847  67000340026   大港里    D04      34         1\n848  67000340023   正覺里    D04      34         3\n849  67000340042   大和里    D04      34         0\n850  67000340024   成功里    D04      34         2\n851  67000330020   佛壇里    D02      34         1\n852  67000330019   同安里    D02      34         0\n853  67000330037   松安里    D02      34         0\n854  67000330038   永寧里    D02      34         1\n855  67000330016   喜南里    D02      34         0\n856  67000330014   喜東里    D02      34         0\n857  67000330015   喜北里    D02      34         0\n858  67000330029   南都里    D02      34         1\n859  67000330039   南華里    D02      34         2\n860  67000330032   建南里    D02      34         8\n861  67000330026   明興里    D02      34         5\n862  67000330033   郡南里    D02      34         4\n863  67000330030   開南里    D02      34         4\n864  67000330013   明亮里    D02      34        18\n865  67000330036   鯤鯓里    D02      34         2\n866  67000330022   大忠里    D02      34         1\n867  67000330011   光明里    D02      34         4\n868  67000330034   府南里    D02      34        20\n869  67000330021   大林里    D02      34         0\n870  67000330009   國宅里    D02      34         4\n871  67000330008   田寮里    D02      34         3\n872  67000330024   新生里    D02      34         3\n873  67000330001   竹溪里    D02      34         0\n874  67000330003   明德里    D02      34         0\n875  67000330025   再興里    D02      34         0\n876  67000330031   彰南里    D02      34         0\n877  67000330028   金華里    D02      34         1\n878  67000330007   新興里    D02      34         0\n879  67000330035   文南里    D02      34         2\n880  67000330006   新昌里    D02      34         1\n881  67000330005   廣州里    D02      34         1\n882  67000330027   文華里    D02      34         0\n883  67000350039   溪頂里    D06      34         6\n884  67000350041   海佃里    D06      34        23\n885  67000350046   溪東里    D06      34        11\n886  67000350038   溪北里    D06      34         4\n887  67000350040   溪墘里    D06      34        48\n888  67000350050   安富里    D06      34        31\n889  67000350019   塩田里    D06      34         1\n890  67000350043   鳳凰里    D06      34        11\n891  67000350014   公親里    D06      34         0\n892  67000350033   砂崙里    D06      34         0\n893  67000360009   文平里    D07      34         0\n894  67000360010   國平里    D07      34         2\n895  67000360011   育平里    D07      34         1\n896  67000360007   華平里    D07      34         0\n897  67000360006   怡平里    D07      34         0\n898  67000360005   建平里    D07      34         2\n899  67000350042   幸福里    D06      34        33\n900  67000270008   上崙里    D32      34         2\n901  67000270007   後壁里    D32      34         1\n902  67000270012   成功里    D32      34         5\n903  67000270013   仁和里    D32      34         1\n904  67000270014   仁愛里    D32      34         0\n905  67000270004   仁德里    D32      34         3\n906  67000330018   興農里    D02      34         0\n907  67000330017   省躬里    D02      34         0\n908  67000270006   新田里    D32      34         1\n909  67000270003   一甲里    D32      34         2\n910  67000320026   德高里    D01      34         8\n911  67000320006   仁和里    D01      34         6\n912  67000270017   中洲里    D32      34         0\n913  67000310014   西灣里    D39      34         0\n914  67000310011   甲頂里    D39      34         3\n915  67000310003   永康里    D39      34         8\n916  67000310038   正強里    D39      34         7\n917  67000360004   漁光里    D07      34         0\n918  67000360002   金城里    D07      34         0\n919  67000310036   尚頂里    D39      34         2\n920  67000310019   復興里    D39      34         0\n921  67000310022   神洲里    D39      34         0\n922  67000310020   復國里    D39      34         0\n923  67000310032   三合里    D39      34         3\n924  67000310037   復華里    D39      34        17\n925  67000310030   二王里    D39      34        12\n926  67000320033   東智里    D01      34         4\n927  67000330023   大恩里    D02      34         2\n928  67000370033   西湖里    D08      34         0\n929  67000360015   平安里    D07      34         1\n930  67000370034   西賢里    D08      34         2\n931  67000350036   四草里    D06      34         0\n932  67000350006   安東里    D06      34         0\n933  67000350047   淵中里    D06      34         0\n934  67000350031   城西里    D06      34         0\n935  67000350022   佃東里    D06      34         2\n936  67000350010   新順里    D06      34         2\n937  67000310018   新樹里    D39      34         0\n938  67000310010   塩行里    D39      34         4\n939  67000350035   鹿耳里    D06      34         0\n940  67000350016   海西里    D06      34         2\n941  67000350023   佃西里    D06      34         1\n942  67000270019   文賢里    D32      34         0\n943  67000310041   龍埔里    D39      34         1\n944  67000310042   永明里    D39      34         1\n945  67000330040   鹽埕里    D02      34        10\n946  67000340051   北華里    D04      34         0\n947  67000340052   華德里    D04      34         4\n948  67000340053   福德里    D04      34         2\n949  67000340044   長勝里    D04      34         2\n950  67000340050   長興里    D04      34         2\n951  67000340049   大興里    D04      34         2\n952  67000340048   大光里    D04      34         1\n953  67000340047   小北里    D04      34         1\n954  67000340055   雙安里    D04      34         1\n955  67000340054   立人里    D04      34         1\n956  67000370042 小西門里    D08      34         2\n957  67000370044   兌悅里    D08      34         1\n958  67000370043 五條港里    D08      34         1\n959  67000370040   南美里    D08      34         2\n960  67000360017   王城里    D07      34         0\n961  67000360016   天妃里    D07      34         2\n962  67000370039   城隍里    D08      34         1\n963  67000370048   西和里    D08      34         1\n964  67000340046   北門里    D04      34        17\n965  67000310029   塩洲里    D39      34         3\n966  67000340004   東興里    D04      34         5\n967  67000340019   重興里    D04      34         2\n968  67000340020   和順里    D04      34         3\n969  67000340005   力行里    D04      34         1\n970  67000340041   文成里    D04      34         0\n971  67000340038   元寶里    D04      34         1\n972  67000340001   開元里    D04      34         2\n973  67000340040   成德里    D04      34         5\n974  67000370016   永華里    D08      34         1\n975  67000370007   郡王里    D08      34         1\n976  67000310043   塩興里    D39      34         0\n977  67000340056   元美里    D04      34         1\n978  67000370047   南廠里    D08      34         0\n979  67000370045   淺草里    D08      34         3\n980  67000370046   府前里    D08      34         1\n981  67000370041   南門里    D08      34         0\n982  67000340045   合興里    D04      34         1\n983  67000310017   北灣里    D39      34         1\n984  67000310040   北興里    D39      34         2\n985  67000310027   龍潭里    D39      34         0\n986  67000310004   埔園里    D39      34         3\n987  67000310009   三民里    D39      34         0\n988  67000340008   仁愛里    D04      34         3\n989  67000340007   振興里    D04      34         0\n990  67000340039   永祥里    D04      34         0\n991  67000340025   文元里    D04      34         1\n992  67000370011   開山里    D08      34         0\n993  67000370031   大涼里    D08      34         1\n994  67000370022   藥王里    D08      34         1\n995  67000370025   光賢里    D08      34         2\n996  67000270015   二行里    D32      34         0\n997  67000270016   大甲里    D32      34         0\n998  67000270005   仁義里    D32      34         2\n999  67000270002   土庫里    D32      34         0\n1000 67000270001   太子里    D32      34         1\n1001 67000350007   安西里    D06      34         3\n1002 67000350051   大安里    D06      34        10\n1003 67000350037   安和里    D06      34         4\n1004 67000350045   理想里    D06      34         5\n1005 67000350009   安慶里    D06      34         5\n1006 67000350044   梅花里    D06      34         4\n1007 67000350008   頂安里    D06      34         0\n1008 67000350002   安順里    D06      34         2\n1009 67000350012   總頭里    D06      34         3\n1010 67000350011   原佃里    D06      34         2\n1011 67000350001   東和里    D06      34         1\n1012 67000310028   光復里    D39      34         1\n1013 67000310026   勝利里    D39      34         9\n1014 67000310021   建國里    D39      34         0\n1015 67000310031   六合里    D39      34         2\n1016 67000350021   淵西里    D06      34         3\n1017 67000350013   長安里    D06      34         1\n1018 67000310039   中華里    D39      34         8\n1019 67000310024   成功里    D39      34         6\n1020 67000310025   中興里    D39      34         3\n1021 67000310023   西勢里    D39      34         3\n1022 67000310008   蔦松里    D39      34         1\n1023 67000350034   顯宮里    D06      34         0\n1024 67000350004   州南里    D06      34         0\n1025 67000350048   布袋里    D06      34         2\n1026 67000350005   州北里    D06      34         0\n1027 67000350003   塭南里    D06      34         0\n1028 67000350024   公塭里    D06      34         1\n1029 67000350025   南興里    D06      34         0\n1030 67000360012   億載里    D07      34         0\n1031 67000360008   平通里    D07      34         3\n1032 67000350015   海東里    D06      34         4\n1033 67000350032   青草里    D06      35         0\n1034 67000270011   保安里    D32      35         0\n1035 67000370005   赤嵌里    D08      35         4\n1036 67000330004   大成里    D02      35         3\n1037 67000350028   城北里    D06      35         0\n1038 67000350030   城南里    D06      35         0\n1039 67000370009   法華里    D08      35         1\n1040 67000350017   海南里    D06      35         6\n1041 67000350049   國安里    D06      35        15\n1042 67000350018   溪心里    D06      35         4\n1043 67000350020   淵東里    D06      35         5\n1044 67000350029   城中里    D06      35         0\n1045 67000350027   城東里    D06      35         0\n1046 67000350026   學東里    D06      35         0\n1047 67000310013   東灣里    D39      35         2\n1048 67000310015   南灣里    D39      35         1\n1049 67000310016   崑山里    D39      35        10\n1050 67000310012   大灣里    D39      35         1\n1051 67000310001   五王里    D39      35        11\n1052 67000310034   安康里    D39      35         4\n1053 67000310035   西橋里    D39      35         4\n1054 67000310002   網寮里    D39      35         2\n1055 67000310005   大橋里    D39      35        15\n1056 67000310033   東橋里    D39      35         7\n1057 67000310007   烏竹里    D39      35         1\n1058 67000310006   王行里    D39      35         0\n1059 67000320003   大智里    D01      35         3\n1060 67000320041   崇文里    D01      35        11\n1061 67000320035   崇成里    D01      35         2\n1062 67000320012   崇明里    D01      35         1\n1063 67000320028   大福里    D01      35         2\n1064 67000320032   崇德里    D01      35        30\n1065 67000320016   大德里    D01      35         1\n1066 67000320004   崇學里    D01      35        15\n1067 67000320014   和平里    D01      35         7\n1068 67000320019   崇善里    D01      35         5\n1069 67000320015   路東里    D01      35         1\n1070 67000320025   虎尾里    D01      35        10\n1071 67000320029   忠孝里    D01      35         4\n1072 67000320043   裕聖里    D01      35         2\n1073 67000320040   崇信里    D01      35        17\n1074 67000320039   德光里    D01      35        16\n1075 67000320042   復興里    D01      35        13\n1076 67000320013   自強里    D01      35        28\n1077 67000320045   文聖里    D01      35         0\n1078 67000320001   富裕里    D01      35         0\n1079 67000320024   龍山里    D01      35         8\n1080 67000320017   關聖里    D01      35         6\n1081 67000320009   新東里    D01      35         9\n1082 67000320020   富強里    D01      35        12\n1083 67000320005   泉南里    D01      35         7\n1084 67000320034   東聖里    D01      35         7\n1085 67000320011   東安里    D01      35         4\n1086 67000320038   大同里    D01      35         2\n1087 67000320018   衛國里    D01      35         3\n1088 67000320002   裕農里    D01      35         5\n1089 67000320044   南聖里    D01      35         2\n1090 67000320030   崇誨里    D01      35         1\n1091 67000320036   東門里    D01      35         2\n1092 67000320010   中西里    D01      35         4\n1093 67000320031   東明里    D01      35         3\n1094 67000320021   圍下里    D01      35         2\n1095 67000320008   東光里    D01      35         4\n1096 67000320007   後甲里    D01      35         2\n1097 67000320027   莊敬里    D01      35         3\n1098 67000320022   小東里    D01      35         6\n1099 67000320023   大學里    D01      35         7\n1100 67000320037   成大里    D01      35         2\n1101 67000340033   公園里    D04      35         7\n1102 67000340032   中樓里    D04      35         8\n1103 67000340043   賢北里    D04      35         1\n1104 67000340018   大豐里    D04      35         5\n1105 67000340026   大港里    D04      35         1\n1106 67000340023   正覺里    D04      35        10\n1107 67000340042   大和里    D04      35         1\n1108 67000340024   成功里    D04      35         3\n1109 67000330020   佛壇里    D02      35         4\n1110 67000330019   同安里    D02      35         0\n1111 67000330037   松安里    D02      35         0\n1112 67000330038   永寧里    D02      35         0\n1113 67000330016   喜南里    D02      35         0\n1114 67000330014   喜東里    D02      35         0\n1115 67000330015   喜北里    D02      35         1\n1116 67000330029   南都里    D02      35         7\n1117 67000330039   南華里    D02      35        19\n1118 67000330032   建南里    D02      35        11\n1119 67000330026   明興里    D02      35        25\n1120 67000330033   郡南里    D02      35         9\n1121 67000330030   開南里    D02      35         6\n1122 67000330013   明亮里    D02      35        14\n1123 67000330036   鯤鯓里    D02      35         0\n1124 67000330022   大忠里    D02      35         2\n1125 67000330011   光明里    D02      35         9\n1126 67000330034   府南里    D02      35        19\n1127 67000330021   大林里    D02      35         1\n1128 67000330009   國宅里    D02      35         7\n1129 67000330008   田寮里    D02      35         4\n1130 67000330024   新生里    D02      35         1\n1131 67000330001   竹溪里    D02      35         1\n1132 67000330003   明德里    D02      35         1\n1133 67000330025   再興里    D02      35         1\n1134 67000330031   彰南里    D02      35         1\n1135 67000330028   金華里    D02      35         2\n1136 67000330007   新興里    D02      35         0\n1137 67000330035   文南里    D02      35         4\n1138 67000330006   新昌里    D02      35         1\n1139 67000330005   廣州里    D02      35         2\n1140 67000330027   文華里    D02      35         1\n1141 67000350039   溪頂里    D06      35        15\n1142 67000350041   海佃里    D06      35        34\n1143 67000350046   溪東里    D06      35        15\n1144 67000350038   溪北里    D06      35         4\n1145 67000350040   溪墘里    D06      35        41\n1146 67000350050   安富里    D06      35        34\n1147 67000350019   塩田里    D06      35         1\n1148 67000350043   鳳凰里    D06      35        15\n1149 67000350014   公親里    D06      35         0\n1150 67000350033   砂崙里    D06      35         0\n1151 67000360009   文平里    D07      35         3\n1152 67000360010   國平里    D07      35         5\n1153 67000360011   育平里    D07      35         3\n1154 67000360007   華平里    D07      35         3\n1155 67000360006   怡平里    D07      35         1\n1156 67000360005   建平里    D07      35         1\n1157 67000350042   幸福里    D06      35        37\n1158 67000270008   上崙里    D32      35         1\n1159 67000270007   後壁里    D32      35         0\n1160 67000270012   成功里    D32      35         1\n1161 67000270013   仁和里    D32      35         0\n1162 67000270014   仁愛里    D32      35         0\n1163 67000270004   仁德里    D32      35         5\n1164 67000330018   興農里    D02      35         0\n1165 67000330017   省躬里    D02      35         0\n1166 67000270006   新田里    D32      35         1\n1167 67000270003   一甲里    D32      35         1\n1168 67000320026   德高里    D01      35        10\n1169 67000320006   仁和里    D01      35         8\n1170 67000270017   中洲里    D32      35         1\n1171 67000310014   西灣里    D39      35         2\n1172 67000310011   甲頂里    D39      35         8\n1173 67000310003   永康里    D39      35         4\n1174 67000310038   正強里    D39      35         8\n1175 67000360004   漁光里    D07      35         0\n1176 67000360002   金城里    D07      35         0\n1177 67000310036   尚頂里    D39      35         2\n1178 67000310019   復興里    D39      35         1\n1179 67000310022   神洲里    D39      35         2\n1180 67000310020   復國里    D39      35        11\n1181 67000310032   三合里    D39      35         6\n1182 67000310037   復華里    D39      35        20\n1183 67000310030   二王里    D39      35         8\n1184 67000320033   東智里    D01      35         2\n1185 67000330023   大恩里    D02      35         6\n1186 67000370033   西湖里    D08      35         5\n1187 67000360015   平安里    D07      35         5\n1188 67000370034   西賢里    D08      35         1\n1189 67000350036   四草里    D06      35         0\n1190 67000350006   安東里    D06      35         1\n1191 67000350047   淵中里    D06      35         3\n1192 67000350031   城西里    D06      35         0\n1193 67000350022   佃東里    D06      35         4\n1194 67000350010   新順里    D06      35         0\n1195 67000310018   新樹里    D39      35         0\n1196 67000310010   塩行里    D39      35         7\n1197 67000350035   鹿耳里    D06      35         0\n1198 67000350016   海西里    D06      35         2\n1199 67000350023   佃西里    D06      35         1\n1200 67000270019   文賢里    D32      35         1\n1201 67000310041   龍埔里    D39      35         0\n1202 67000310042   永明里    D39      35         1\n1203 67000330040   鹽埕里    D02      35        17\n1204 67000340051   北華里    D04      35         5\n1205 67000340052   華德里    D04      35         2\n1206 67000340053   福德里    D04      35         1\n1207 67000340044   長勝里    D04      35         3\n1208 67000340050   長興里    D04      35         1\n1209 67000340049   大興里    D04      35         4\n1210 67000340048   大光里    D04      35         6\n1211 67000340047   小北里    D04      35         1\n1212 67000340055   雙安里    D04      35         3\n1213 67000340054   立人里    D04      35         2\n1214 67000370042 小西門里    D08      35         6\n1215 67000370044   兌悅里    D08      35         3\n1216 67000370043 五條港里    D08      35         1\n1217 67000370040   南美里    D08      35         4\n1218 67000360017   王城里    D07      35         0\n1219 67000360016   天妃里    D07      35         2\n1220 67000370039   城隍里    D08      35         6\n1221 67000370048   西和里    D08      35        11\n1222 67000340046   北門里    D04      35        14\n1223 67000310029   塩洲里    D39      35         1\n1224 67000340004   東興里    D04      35        10\n1225 67000340019   重興里    D04      35         5\n1226 67000340020   和順里    D04      35         5\n1227 67000340005   力行里    D04      35         2\n1228 67000340041   文成里    D04      35         3\n1229 67000340038   元寶里    D04      35         3\n1230 67000340001   開元里    D04      35         3\n1231 67000340040   成德里    D04      35         5\n1232 67000370016   永華里    D08      35         1\n1233 67000370007   郡王里    D08      35         1\n1234 67000310043   塩興里    D39      35         0\n1235 67000340056   元美里    D04      35         2\n1236 67000370047   南廠里    D08      35         1\n1237 67000370045   淺草里    D08      35         8\n1238 67000370046   府前里    D08      35         2\n1239 67000370041   南門里    D08      35         2\n1240 67000340045   合興里    D04      35         1\n1241 67000310017   北灣里    D39      35         0\n1242 67000310040   北興里    D39      35         3\n1243 67000310027   龍潭里    D39      35         1\n1244 67000310004   埔園里    D39      35         2\n1245 67000310009   三民里    D39      35         0\n1246 67000340008   仁愛里    D04      35         2\n1247 67000340007   振興里    D04      35         1\n1248 67000340039   永祥里    D04      35         5\n1249 67000340025   文元里    D04      35         2\n1250 67000370011   開山里    D08      35         1\n1251 67000370031   大涼里    D08      35         3\n1252 67000370022   藥王里    D08      35         8\n1253 67000370025   光賢里    D08      35         7\n1254 67000270015   二行里    D32      35         1\n1255 67000270016   大甲里    D32      35         1\n1256 67000270005   仁義里    D32      35         6\n1257 67000270002   土庫里    D32      35         0\n1258 67000270001   太子里    D32      35         2\n1259 67000350007   安西里    D06      35         3\n1260 67000350051   大安里    D06      35        13\n1261 67000350037   安和里    D06      35         4\n1262 67000350045   理想里    D06      35         5\n1263 67000350009   安慶里    D06      35         7\n1264 67000350044   梅花里    D06      35         5\n1265 67000350008   頂安里    D06      35         9\n1266 67000350002   安順里    D06      35         3\n1267 67000350012   總頭里    D06      35         2\n1268 67000350011   原佃里    D06      35         0\n1269 67000350001   東和里    D06      35         1\n1270 67000310028   光復里    D39      35         0\n1271 67000310026   勝利里    D39      35        24\n1272 67000310021   建國里    D39      35         2\n1273 67000310031   六合里    D39      35         6\n1274 67000350021   淵西里    D06      35         0\n1275 67000350013   長安里    D06      35         0\n1276 67000310039   中華里    D39      35         7\n1277 67000310024   成功里    D39      35         1\n1278 67000310025   中興里    D39      35         5\n1279 67000310023   西勢里    D39      35         1\n1280 67000310008   蔦松里    D39      35         0\n1281 67000350034   顯宮里    D06      35         1\n1282 67000350004   州南里    D06      35         0\n1283 67000350048   布袋里    D06      35         1\n1284 67000350005   州北里    D06      35         0\n1285 67000350003   塭南里    D06      35         2\n1286 67000350024   公塭里    D06      35         1\n1287 67000350025   南興里    D06      35         1\n1288 67000360012   億載里    D07      35         2\n1289 67000360008   平通里    D07      35         5\n1290 67000350015   海東里    D06      35         2\n1291 67000350032   青草里    D06      36         0\n1292 67000270011   保安里    D32      36         0\n1293 67000370005   赤嵌里    D08      36         1\n1294 67000330004   大成里    D02      36         2\n1295 67000350028   城北里    D06      36         0\n1296 67000350030   城南里    D06      36         2\n1297 67000370009   法華里    D08      36         2\n1298 67000350017   海南里    D06      36         4\n1299 67000350049   國安里    D06      36        18\n1300 67000350018   溪心里    D06      36         8\n1301 67000350020   淵東里    D06      36         2\n1302 67000350029   城中里    D06      36         0\n1303 67000350027   城東里    D06      36         0\n1304 67000350026   學東里    D06      36         0\n1305 67000310013   東灣里    D39      36         3\n1306 67000310015   南灣里    D39      36         2\n1307 67000310016   崑山里    D39      36         5\n1308 67000310012   大灣里    D39      36         1\n1309 67000310001   五王里    D39      36        16\n1310 67000310034   安康里    D39      36        18\n1311 67000310035   西橋里    D39      36         6\n1312 67000310002   網寮里    D39      36        10\n1313 67000310005   大橋里    D39      36        31\n1314 67000310033   東橋里    D39      36        18\n1315 67000310007   烏竹里    D39      36         3\n1316 67000310006   王行里    D39      36         1\n1317 67000320003   大智里    D01      36        12\n1318 67000320041   崇文里    D01      36        14\n1319 67000320035   崇成里    D01      36         7\n1320 67000320012   崇明里    D01      36         8\n1321 67000320028   大福里    D01      36         2\n1322 67000320032   崇德里    D01      36        17\n1323 67000320016   大德里    D01      36         6\n1324 67000320004   崇學里    D01      36        12\n1325 67000320014   和平里    D01      36         8\n1326 67000320019   崇善里    D01      36        13\n1327 67000320015   路東里    D01      36         3\n1328 67000320025   虎尾里    D01      36        25\n1329 67000320029   忠孝里    D01      36        16\n1330 67000320043   裕聖里    D01      36         3\n1331 67000320040   崇信里    D01      36        10\n1332 67000320039   德光里    D01      36        25\n1333 67000320042   復興里    D01      36        13\n1334 67000320013   自強里    D01      36        33\n1335 67000320045   文聖里    D01      36         7\n1336 67000320001   富裕里    D01      36         5\n1337 67000320024   龍山里    D01      36        14\n1338 67000320017   關聖里    D01      36         7\n1339 67000320009   新東里    D01      36         6\n1340 67000320020   富強里    D01      36        31\n1341 67000320005   泉南里    D01      36         9\n1342 67000320034   東聖里    D01      36        14\n1343 67000320011   東安里    D01      36         3\n1344 67000320038   大同里    D01      36         5\n1345 67000320018   衛國里    D01      36         4\n1346 67000320002   裕農里    D01      36        18\n1347 67000320044   南聖里    D01      36         2\n1348 67000320030   崇誨里    D01      36         7\n1349 67000320036   東門里    D01      36         0\n1350 67000320010   中西里    D01      36         1\n1351 67000320031   東明里    D01      36         2\n1352 67000320021   圍下里    D01      36         0\n1353 67000320008   東光里    D01      36         5\n1354 67000320007   後甲里    D01      36         2\n1355 67000320027   莊敬里    D01      36         7\n1356 67000320022   小東里    D01      36         6\n1357 67000320023   大學里    D01      36         4\n1358 67000320037   成大里    D01      36         3\n1359 67000340033   公園里    D04      36         4\n1360 67000340032   中樓里    D04      36        20\n1361 67000340043   賢北里    D04      36         3\n1362 67000340018   大豐里    D04      36         5\n1363 67000340026   大港里    D04      36        11\n1364 67000340023   正覺里    D04      36        17\n1365 67000340042   大和里    D04      36        10\n1366 67000340024   成功里    D04      36         6\n1367 67000330020   佛壇里    D02      36         4\n1368 67000330019   同安里    D02      36         0\n1369 67000330037   松安里    D02      36         0\n1370 67000330038   永寧里    D02      36         0\n1371 67000330016   喜南里    D02      36         0\n1372 67000330014   喜東里    D02      36         1\n1373 67000330015   喜北里    D02      36         0\n1374 67000330029   南都里    D02      36         7\n1375 67000330039   南華里    D02      36        13\n1376 67000330032   建南里    D02      36        11\n1377 67000330026   明興里    D02      36        13\n1378 67000330033   郡南里    D02      36        18\n1379 67000330030   開南里    D02      36         8\n1380 67000330013   明亮里    D02      36        22\n1381 67000330036   鯤鯓里    D02      36         1\n1382 67000330022   大忠里    D02      36         8\n1383 67000330011   光明里    D02      36        10\n1384 67000330034   府南里    D02      36        32\n1385 67000330021   大林里    D02      36         2\n1386 67000330009   國宅里    D02      36        19\n1387 67000330008   田寮里    D02      36         8\n1388 67000330024   新生里    D02      36         0\n1389 67000330001   竹溪里    D02      36         0\n1390 67000330003   明德里    D02      36         1\n1391 67000330025   再興里    D02      36         9\n1392 67000330031   彰南里    D02      36         1\n1393 67000330028   金華里    D02      36        17\n1394 67000330007   新興里    D02      36         7\n1395 67000330035   文南里    D02      36         6\n1396 67000330006   新昌里    D02      36         0\n1397 67000330005   廣州里    D02      36         3\n1398 67000330027   文華里    D02      36         1\n1399 67000350039   溪頂里    D06      36        10\n1400 67000350041   海佃里    D06      36        38\n1401 67000350046   溪東里    D06      36        30\n1402 67000350038   溪北里    D06      36        18\n1403 67000350040   溪墘里    D06      36        63\n1404 67000350050   安富里    D06      36        58\n1405 67000350019   塩田里    D06      36         0\n1406 67000350043   鳳凰里    D06      36        30\n1407 67000350014   公親里    D06      36         0\n1408 67000350033   砂崙里    D06      36         0\n1409 67000360009   文平里    D07      36         4\n1410 67000360010   國平里    D07      36         5\n1411 67000360011   育平里    D07      36         8\n1412 67000360007   華平里    D07      36         6\n1413 67000360006   怡平里    D07      36         1\n1414 67000360005   建平里    D07      36         3\n1415 67000350042   幸福里    D06      36        35\n1416 67000270008   上崙里    D32      36         3\n1417 67000270007   後壁里    D32      36         7\n1418 67000270012   成功里    D32      36         5\n1419 67000270013   仁和里    D32      36         2\n1420 67000270014   仁愛里    D32      36         1\n1421 67000270004   仁德里    D32      36         9\n1422 67000330018   興農里    D02      36         1\n1423 67000330017   省躬里    D02      36         1\n1424 67000270006   新田里    D32      36         0\n1425 67000270003   一甲里    D32      36         3\n1426 67000320026   德高里    D01      36        11\n1427 67000320006   仁和里    D01      36        11\n1428 67000270017   中洲里    D32      36         2\n1429 67000310014   西灣里    D39      36         5\n1430 67000310011   甲頂里    D39      36        16\n1431 67000310003   永康里    D39      36         3\n1432 67000310038   正強里    D39      36        16\n1433 67000360004   漁光里    D07      36         0\n1434 67000360002   金城里    D07      36         6\n1435 67000310036   尚頂里    D39      36         6\n1436 67000310019   復興里    D39      36         4\n1437 67000310022   神洲里    D39      36         1\n1438 67000310020   復國里    D39      36        13\n1439 67000310032   三合里    D39      36         6\n1440 67000310037   復華里    D39      36        24\n1441 67000310030   二王里    D39      36        21\n1442 67000320033   東智里    D01      36         6\n1443 67000330023   大恩里    D02      36         2\n1444 67000370033   西湖里    D08      36         4\n1445 67000360015   平安里    D07      36         7\n1446 67000370034   西賢里    D08      36         3\n1447 67000350036   四草里    D06      36         0\n1448 67000350006   安東里    D06      36         2\n1449 67000350047   淵中里    D06      36         5\n1450 67000350031   城西里    D06      36         1\n1451 67000350022   佃東里    D06      36         0\n1452 67000350010   新順里    D06      36         5\n1453 67000310018   新樹里    D39      36         0\n1454 67000310010   塩行里    D39      36         3\n1455 67000350035   鹿耳里    D06      36         0\n1456 67000350016   海西里    D06      36         6\n1457 67000350023   佃西里    D06      36         2\n1458 67000270019   文賢里    D32      36         0\n1459 67000310041   龍埔里    D39      36         1\n1460 67000310042   永明里    D39      36         4\n1461 67000330040   鹽埕里    D02      36        22\n1462 67000340051   北華里    D04      36         5\n1463 67000340052   華德里    D04      36         7\n1464 67000340053   福德里    D04      36         5\n1465 67000340044   長勝里    D04      36         5\n1466 67000340050   長興里    D04      36         2\n1467 67000340049   大興里    D04      36         4\n1468 67000340048   大光里    D04      36         2\n1469 67000340047   小北里    D04      36        10\n1470 67000340055   雙安里    D04      36         3\n1471 67000340054   立人里    D04      36         2\n1472 67000370042 小西門里    D08      36         9\n1473 67000370044   兌悅里    D08      36        14\n1474 67000370043 五條港里    D08      36         6\n1475 67000370040   南美里    D08      36         5\n1476 67000360017   王城里    D07      36         0\n1477 67000360016   天妃里    D07      36         6\n1478 67000370039   城隍里    D08      36         6\n1479 67000370048   西和里    D08      36        11\n1480 67000340046   北門里    D04      36        35\n1481 67000310029   塩洲里    D39      36         3\n1482 67000340004   東興里    D04      36         6\n1483 67000340019   重興里    D04      36         2\n1484 67000340020   和順里    D04      36         3\n1485 67000340005   力行里    D04      36         2\n1486 67000340041   文成里    D04      36         8\n1487 67000340038   元寶里    D04      36         5\n1488 67000340001   開元里    D04      36         2\n1489 67000340040   成德里    D04      36         4\n1490 67000370016   永華里    D08      36         3\n1491 67000370007   郡王里    D08      36         1\n1492 67000310043   塩興里    D39      36         3\n1493 67000340056   元美里    D04      36         3\n1494 67000370047   南廠里    D08      36         0\n1495 67000370045   淺草里    D08      36         9\n1496 67000370046   府前里    D08      36         1\n1497 67000370041   南門里    D08      36         7\n1498 67000340045   合興里    D04      36         8\n1499 67000310017   北灣里    D39      36         1\n1500 67000310040   北興里    D39      36         2\n1501 67000310027   龍潭里    D39      36         4\n1502 67000310004   埔園里    D39      36         7\n1503 67000310009   三民里    D39      36         0\n1504 67000340008   仁愛里    D04      36         8\n1505 67000340007   振興里    D04      36         5\n1506 67000340039   永祥里    D04      36        13\n1507 67000340025   文元里    D04      36         7\n1508 67000370011   開山里    D08      36         6\n1509 67000370031   大涼里    D08      36         3\n1510 67000370022   藥王里    D08      36         4\n1511 67000370025   光賢里    D08      36        17\n1512 67000270015   二行里    D32      36         0\n1513 67000270016   大甲里    D32      36         0\n1514 67000270005   仁義里    D32      36         9\n1515 67000270002   土庫里    D32      36         0\n1516 67000270001   太子里    D32      36         2\n1517 67000350007   安西里    D06      36         6\n1518 67000350051   大安里    D06      36        18\n1519 67000350037   安和里    D06      36         3\n1520 67000350045   理想里    D06      36        13\n1521 67000350009   安慶里    D06      36        13\n1522 67000350044   梅花里    D06      36        13\n1523 67000350008   頂安里    D06      36         8\n1524 67000350002   安順里    D06      36         3\n1525 67000350012   總頭里    D06      36         0\n1526 67000350011   原佃里    D06      36         1\n1527 67000350001   東和里    D06      36         1\n1528 67000310028   光復里    D39      36         3\n1529 67000310026   勝利里    D39      36        24\n1530 67000310021   建國里    D39      36         3\n1531 67000310031   六合里    D39      36         5\n1532 67000350021   淵西里    D06      36         2\n1533 67000350013   長安里    D06      36         2\n1534 67000310039   中華里    D39      36        19\n1535 67000310024   成功里    D39      36         2\n1536 67000310025   中興里    D39      36         8\n1537 67000310023   西勢里    D39      36         1\n1538 67000310008   蔦松里    D39      36         2\n1539 67000350034   顯宮里    D06      36         0\n1540 67000350004   州南里    D06      36         1\n1541 67000350048   布袋里    D06      36         1\n1542 67000350005   州北里    D06      36         2\n1543 67000350003   塭南里    D06      36         1\n1544 67000350024   公塭里    D06      36         0\n1545 67000350025   南興里    D06      36         1\n1546 67000360012   億載里    D07      36         1\n1547 67000360008   平通里    D07      36         3\n1548 67000350015   海東里    D06      36         7\n1549 67000350032   青草里    D06      37         1\n1550 67000270011   保安里    D32      37         3\n1551 67000370005   赤嵌里    D08      37         4\n1552 67000330004   大成里    D02      37         2\n1553 67000350028   城北里    D06      37         0\n1554 67000350030   城南里    D06      37         0\n1555 67000370009   法華里    D08      37         1\n1556 67000350017   海南里    D06      37         8\n1557 67000350049   國安里    D06      37        17\n1558 67000350018   溪心里    D06      37         6\n1559 67000350020   淵東里    D06      37         3\n1560 67000350029   城中里    D06      37         0\n1561 67000350027   城東里    D06      37         1\n1562 67000350026   學東里    D06      37         1\n1563 67000310013   東灣里    D39      37         2\n1564 67000310015   南灣里    D39      37         2\n1565 67000310016   崑山里    D39      37         4\n1566 67000310012   大灣里    D39      37         1\n1567 67000310001   五王里    D39      37        13\n1568 67000310034   安康里    D39      37         7\n1569 67000310035   西橋里    D39      37         1\n1570 67000310002   網寮里    D39      37         1\n1571 67000310005   大橋里    D39      37        18\n1572 67000310033   東橋里    D39      37        14\n1573 67000310007   烏竹里    D39      37         0\n1574 67000310006   王行里    D39      37         2\n1575 67000320003   大智里    D01      37         9\n1576 67000320041   崇文里    D01      37         8\n1577 67000320035   崇成里    D01      37         7\n1578 67000320012   崇明里    D01      37         4\n1579 67000320028   大福里    D01      37         2\n1580 67000320032   崇德里    D01      37        15\n1581 67000320016   大德里    D01      37         9\n1582 67000320004   崇學里    D01      37        10\n1583 67000320014   和平里    D01      37         5\n1584 67000320019   崇善里    D01      37        18\n1585 67000320015   路東里    D01      37         1\n1586 67000320025   虎尾里    D01      37        17\n1587 67000320029   忠孝里    D01      37        11\n1588 67000320043   裕聖里    D01      37         5\n1589 67000320040   崇信里    D01      37        24\n1590 67000320039   德光里    D01      37         5\n1591 67000320042   復興里    D01      37        20\n1592 67000320013   自強里    D01      37        21\n1593 67000320045   文聖里    D01      37         5\n1594 67000320001   富裕里    D01      37         5\n1595 67000320024   龍山里    D01      37         9\n1596 67000320017   關聖里    D01      37         7\n1597 67000320009   新東里    D01      37         6\n1598 67000320020   富強里    D01      37        25\n1599 67000320005   泉南里    D01      37        14\n1600 67000320034   東聖里    D01      37        18\n1601 67000320011   東安里    D01      37         1\n1602 67000320038   大同里    D01      37         2\n1603 67000320018   衛國里    D01      37         1\n1604 67000320002   裕農里    D01      37        12\n1605 67000320044   南聖里    D01      37         1\n1606 67000320030   崇誨里    D01      37         7\n1607 67000320036   東門里    D01      37         1\n1608 67000320010   中西里    D01      37         2\n1609 67000320031   東明里    D01      37         4\n1610 67000320021   圍下里    D01      37         1\n1611 67000320008   東光里    D01      37         6\n1612 67000320007   後甲里    D01      37         8\n1613 67000320027   莊敬里    D01      37        11\n1614 67000320022   小東里    D01      37        11\n1615 67000320023   大學里    D01      37         3\n1616 67000320037   成大里    D01      37         4\n1617 67000340033   公園里    D04      37         6\n1618 67000340032   中樓里    D04      37         7\n1619 67000340043   賢北里    D04      37         2\n1620 67000340018   大豐里    D04      37         4\n1621 67000340026   大港里    D04      37         7\n1622 67000340023   正覺里    D04      37         9\n1623 67000340042   大和里    D04      37         5\n1624 67000340024   成功里    D04      37         4\n1625 67000330020   佛壇里    D02      37         1\n1626 67000330019   同安里    D02      37         1\n1627 67000330037   松安里    D02      37         1\n1628 67000330038   永寧里    D02      37         0\n1629 67000330016   喜南里    D02      37         1\n1630 67000330014   喜東里    D02      37         1\n1631 67000330015   喜北里    D02      37         1\n1632 67000330029   南都里    D02      37        13\n1633 67000330039   南華里    D02      37         6\n1634 67000330032   建南里    D02      37        14\n1635 67000330026   明興里    D02      37        37\n1636 67000330033   郡南里    D02      37        20\n1637 67000330030   開南里    D02      37         6\n1638 67000330013   明亮里    D02      37        16\n1639 67000330036   鯤鯓里    D02      37         2\n1640 67000330022   大忠里    D02      37         7\n1641 67000330011   光明里    D02      37         9\n1642 67000330034   府南里    D02      37        22\n1643 67000330021   大林里    D02      37         3\n1644 67000330009   國宅里    D02      37         9\n1645 67000330008   田寮里    D02      37         4\n1646 67000330024   新生里    D02      37         0\n1647 67000330001   竹溪里    D02      37         0\n1648 67000330003   明德里    D02      37         1\n1649 67000330025   再興里    D02      37         8\n1650 67000330031   彰南里    D02      37         0\n1651 67000330028   金華里    D02      37        13\n1652 67000330007   新興里    D02      37         5\n1653 67000330035   文南里    D02      37         7\n1654 67000330006   新昌里    D02      37         0\n1655 67000330005   廣州里    D02      37         3\n1656 67000330027   文華里    D02      37        13\n1657 67000350039   溪頂里    D06      37        12\n1658 67000350041   海佃里    D06      37        34\n1659 67000350046   溪東里    D06      37        12\n1660 67000350038   溪北里    D06      37        10\n1661 67000350040   溪墘里    D06      37        30\n1662 67000350050   安富里    D06      37        49\n1663 67000350019   塩田里    D06      37         1\n1664 67000350043   鳳凰里    D06      37        22\n1665 67000350014   公親里    D06      37         0\n1666 67000350033   砂崙里    D06      37         0\n1667 67000360009   文平里    D07      37         4\n1668 67000360010   國平里    D07      37         3\n1669 67000360011   育平里    D07      37         5\n1670 67000360007   華平里    D07      37         2\n1671 67000360006   怡平里    D07      37         4\n1672 67000360005   建平里    D07      37         2\n1673 67000350042   幸福里    D06      37        34\n1674 67000270008   上崙里    D32      37         1\n1675 67000270007   後壁里    D32      37         4\n1676 67000270012   成功里    D32      37         1\n1677 67000270013   仁和里    D32      37         0\n1678 67000270014   仁愛里    D32      37         2\n1679 67000270004   仁德里    D32      37         9\n1680 67000330018   興農里    D02      37         3\n1681 67000330017   省躬里    D02      37         0\n1682 67000270006   新田里    D32      37         3\n1683 67000270003   一甲里    D32      37         0\n1684 67000320026   德高里    D01      37         7\n1685 67000320006   仁和里    D01      37         6\n1686 67000270017   中洲里    D32      37         0\n1687 67000310014   西灣里    D39      37         3\n1688 67000310011   甲頂里    D39      37        15\n1689 67000310003   永康里    D39      37         5\n1690 67000310038   正強里    D39      37         8\n1691 67000360004   漁光里    D07      37         1\n1692 67000360002   金城里    D07      37         1\n1693 67000310036   尚頂里    D39      37         6\n1694 67000310019   復興里    D39      37         1\n1695 67000310022   神洲里    D39      37         0\n1696 67000310020   復國里    D39      37        11\n1697 67000310032   三合里    D39      37         6\n1698 67000310037   復華里    D39      37        38\n1699 67000310030   二王里    D39      37         8\n1700 67000320033   東智里    D01      37         2\n1701 67000330023   大恩里    D02      37         6\n1702 67000370033   西湖里    D08      37         9\n1703 67000360015   平安里    D07      37         7\n1704 67000370034   西賢里    D08      37         4\n1705 67000350036   四草里    D06      37         0\n1706 67000350006   安東里    D06      37         1\n1707 67000350047   淵中里    D06      37         1\n1708 67000350031   城西里    D06      37         0\n1709 67000350022   佃東里    D06      37         1\n1710 67000350010   新順里    D06      37         9\n1711 67000310018   新樹里    D39      37         0\n1712 67000310010   塩行里    D39      37         3\n1713 67000350035   鹿耳里    D06      37         0\n1714 67000350016   海西里    D06      37         2\n1715 67000350023   佃西里    D06      37         0\n1716 67000270019   文賢里    D32      37         0\n1717 67000310041   龍埔里    D39      37         2\n1718 67000310042   永明里    D39      37         3\n1719 67000330040   鹽埕里    D02      37        15\n1720 67000340051   北華里    D04      37         9\n1721 67000340052   華德里    D04      37         3\n1722 67000340053   福德里    D04      37         8\n1723 67000340044   長勝里    D04      37         6\n1724 67000340050   長興里    D04      37         2\n1725 67000340049   大興里    D04      37         8\n1726 67000340048   大光里    D04      37         3\n1727 67000340047   小北里    D04      37         8\n1728 67000340055   雙安里    D04      37         6\n1729 67000340054   立人里    D04      37         7\n1730 67000370042 小西門里    D08      37         6\n1731 67000370044   兌悅里    D08      37        15\n1732 67000370043 五條港里    D08      37         7\n1733 67000370040   南美里    D08      37         5\n1734 67000360017   王城里    D07      37         2\n1735 67000360016   天妃里    D07      37        19\n1736 67000370039   城隍里    D08      37         9\n1737 67000370048   西和里    D08      37         9\n1738 67000340046   北門里    D04      37        31\n1739 67000310029   塩洲里    D39      37         3\n1740 67000340004   東興里    D04      37         7\n1741 67000340019   重興里    D04      37         4\n1742 67000340020   和順里    D04      37         4\n1743 67000340005   力行里    D04      37         8\n1744 67000340041   文成里    D04      37         6\n1745 67000340038   元寶里    D04      37         4\n1746 67000340001   開元里    D04      37         4\n1747 67000340040   成德里    D04      37         4\n1748 67000370016   永華里    D08      37         2\n1749 67000370007   郡王里    D08      37         1\n1750 67000310043   塩興里    D39      37         4\n1751 67000340056   元美里    D04      37         4\n1752 67000370047   南廠里    D08      37         5\n1753 67000370045   淺草里    D08      37         8\n1754 67000370046   府前里    D08      37         7\n1755 67000370041   南門里    D08      37         4\n1756 67000340045   合興里    D04      37         3\n1757 67000310017   北灣里    D39      37         2\n1758 67000310040   北興里    D39      37         3\n1759 67000310027   龍潭里    D39      37         0\n1760 67000310004   埔園里    D39      37         7\n1761 67000310009   三民里    D39      37         0\n1762 67000340008   仁愛里    D04      37         9\n1763 67000340007   振興里    D04      37         5\n1764 67000340039   永祥里    D04      37         7\n1765 67000340025   文元里    D04      37         8\n1766 67000370011   開山里    D08      37         2\n1767 67000370031   大涼里    D08      37         5\n1768 67000370022   藥王里    D08      37        10\n1769 67000370025   光賢里    D08      37        11\n1770 67000270015   二行里    D32      37         1\n1771 67000270016   大甲里    D32      37         2\n1772 67000270005   仁義里    D32      37         9\n1773 67000270002   土庫里    D32      37         1\n1774 67000270001   太子里    D32      37         6\n1775 67000350007   安西里    D06      37         4\n1776 67000350051   大安里    D06      37        12\n1777 67000350037   安和里    D06      37         5\n1778 67000350045   理想里    D06      37        29\n1779 67000350009   安慶里    D06      37        12\n1780 67000350044   梅花里    D06      37        12\n1781 67000350008   頂安里    D06      37        12\n1782 67000350002   安順里    D06      37         6\n1783 67000350012   總頭里    D06      37         3\n1784 67000350011   原佃里    D06      37         2\n1785 67000350001   東和里    D06      37         0\n1786 67000310028   光復里    D39      37         0\n1787 67000310026   勝利里    D39      37        18\n1788 67000310021   建國里    D39      37         2\n1789 67000310031   六合里    D39      37         5\n1790 67000350021   淵西里    D06      37         4\n1791 67000350013   長安里    D06      37         0\n1792 67000310039   中華里    D39      37        11\n1793 67000310024   成功里    D39      37         2\n1794 67000310025   中興里    D39      37         7\n1795 67000310023   西勢里    D39      37         1\n1796 67000310008   蔦松里    D39      37         0\n1797 67000350034   顯宮里    D06      37         0\n1798 67000350004   州南里    D06      37         2\n1799 67000350048   布袋里    D06      37         1\n1800 67000350005   州北里    D06      37         1\n1801 67000350003   塭南里    D06      37         1\n1802 67000350024   公塭里    D06      37         0\n1803 67000350025   南興里    D06      37         0\n1804 67000360012   億載里    D07      37         5\n1805 67000360008   平通里    D07      37         2\n1806 67000350015   海東里    D06      37         9\n1807 67000350032   青草里    D06      38         0\n1808 67000270011   保安里    D32      38         2\n1809 67000370005   赤嵌里    D08      38         5\n1810 67000330004   大成里    D02      38         3\n1811 67000350028   城北里    D06      38         0\n1812 67000350030   城南里    D06      38         0\n1813 67000370009   法華里    D08      38         2\n1814 67000350017   海南里    D06      38         1\n1815 67000350049   國安里    D06      38         9\n1816 67000350018   溪心里    D06      38         6\n1817 67000350020   淵東里    D06      38         2\n1818 67000350029   城中里    D06      38         1\n1819 67000350027   城東里    D06      38         0\n1820 67000350026   學東里    D06      38         1\n1821 67000310013   東灣里    D39      38         1\n1822 67000310015   南灣里    D39      38         2\n1823 67000310016   崑山里    D39      38        12\n1824 67000310012   大灣里    D39      38         0\n1825 67000310001   五王里    D39      38        17\n1826 67000310034   安康里    D39      38         9\n1827 67000310035   西橋里    D39      38         2\n1828 67000310002   網寮里    D39      38         4\n1829 67000310005   大橋里    D39      38        13\n1830 67000310033   東橋里    D39      38        10\n1831 67000310007   烏竹里    D39      38         0\n1832 67000310006   王行里    D39      38         0\n1833 67000320003   大智里    D01      38         3\n1834 67000320041   崇文里    D01      38         8\n1835 67000320035   崇成里    D01      38         3\n1836 67000320012   崇明里    D01      38         1\n1837 67000320028   大福里    D01      38         2\n1838 67000320032   崇德里    D01      38        18\n1839 67000320016   大德里    D01      38         4\n1840 67000320004   崇學里    D01      38        12\n1841 67000320014   和平里    D01      38         9\n1842 67000320019   崇善里    D01      38        13\n1843 67000320015   路東里    D01      38         5\n1844 67000320025   虎尾里    D01      38        16\n1845 67000320029   忠孝里    D01      38         7\n1846 67000320043   裕聖里    D01      38         2\n1847 67000320040   崇信里    D01      38        19\n1848 67000320039   德光里    D01      38         8\n1849 67000320042   復興里    D01      38        16\n1850 67000320013   自強里    D01      38        14\n1851 67000320045   文聖里    D01      38         7\n1852 67000320001   富裕里    D01      38         8\n1853 67000320024   龍山里    D01      38         5\n1854 67000320017   關聖里    D01      38        12\n1855 67000320009   新東里    D01      38        17\n1856 67000320020   富強里    D01      38        18\n1857 67000320005   泉南里    D01      38        19\n1858 67000320034   東聖里    D01      38        14\n1859 67000320011   東安里    D01      38         2\n1860 67000320038   大同里    D01      38         7\n1861 67000320018   衛國里    D01      38         3\n1862 67000320002   裕農里    D01      38        16\n1863 67000320044   南聖里    D01      38         6\n1864 67000320030   崇誨里    D01      38         6\n1865 67000320036   東門里    D01      38         0\n1866 67000320010   中西里    D01      38         2\n1867 67000320031   東明里    D01      38         7\n1868 67000320021   圍下里    D01      38         2\n1869 67000320008   東光里    D01      38         5\n1870 67000320007   後甲里    D01      38         6\n1871 67000320027   莊敬里    D01      38         9\n1872 67000320022   小東里    D01      38        15\n1873 67000320023   大學里    D01      38         3\n1874 67000320037   成大里    D01      38         4\n1875 67000340033   公園里    D04      38         2\n1876 67000340032   中樓里    D04      38        10\n1877 67000340043   賢北里    D04      38         4\n1878 67000340018   大豐里    D04      38        18\n1879 67000340026   大港里    D04      38         9\n1880 67000340023   正覺里    D04      38        10\n1881 67000340042   大和里    D04      38         6\n1882 67000340024   成功里    D04      38         7\n1883 67000330020   佛壇里    D02      38         6\n1884 67000330019   同安里    D02      38         0\n1885 67000330037   松安里    D02      38         0\n1886 67000330038   永寧里    D02      38         1\n1887 67000330016   喜南里    D02      38         0\n1888 67000330014   喜東里    D02      38         0\n1889 67000330015   喜北里    D02      38         1\n1890 67000330029   南都里    D02      38        10\n1891 67000330039   南華里    D02      38         8\n1892 67000330032   建南里    D02      38        14\n1893 67000330026   明興里    D02      38        28\n1894 67000330033   郡南里    D02      38        17\n1895 67000330030   開南里    D02      38        10\n1896 67000330013   明亮里    D02      38        12\n1897 67000330036   鯤鯓里    D02      38         1\n1898 67000330022   大忠里    D02      38         1\n1899 67000330011   光明里    D02      38        15\n1900 67000330034   府南里    D02      38        24\n1901 67000330021   大林里    D02      38         4\n1902 67000330009   國宅里    D02      38        18\n1903 67000330008   田寮里    D02      38         5\n1904 67000330024   新生里    D02      38         5\n1905 67000330001   竹溪里    D02      38         2\n1906 67000330003   明德里    D02      38         4\n1907 67000330025   再興里    D02      38         9\n1908 67000330031   彰南里    D02      38         4\n1909 67000330028   金華里    D02      38        19\n1910 67000330007   新興里    D02      38         8\n1911 67000330035   文南里    D02      38        10\n1912 67000330006   新昌里    D02      38         4\n1913 67000330005   廣州里    D02      38         2\n1914 67000330027   文華里    D02      38         7\n1915 67000350039   溪頂里    D06      38        19\n1916 67000350041   海佃里    D06      38        21\n1917 67000350046   溪東里    D06      38        20\n1918 67000350038   溪北里    D06      38         4\n1919 67000350040   溪墘里    D06      38        13\n1920 67000350050   安富里    D06      38        27\n1921 67000350019   塩田里    D06      38         0\n1922 67000350043   鳳凰里    D06      38        14\n1923 67000350014   公親里    D06      38         0\n1924 67000350033   砂崙里    D06      38         0\n1925 67000360009   文平里    D07      38         4\n1926 67000360010   國平里    D07      38         5\n1927 67000360011   育平里    D07      38         9\n1928 67000360007   華平里    D07      38         2\n1929 67000360006   怡平里    D07      38         2\n1930 67000360005   建平里    D07      38         4\n1931 67000350042   幸福里    D06      38        20\n1932 67000270008   上崙里    D32      38         2\n1933 67000270007   後壁里    D32      38         2\n1934 67000270012   成功里    D32      38         4\n1935 67000270013   仁和里    D32      38         0\n1936 67000270014   仁愛里    D32      38         0\n1937 67000270004   仁德里    D32      38        11\n1938 67000330018   興農里    D02      38         1\n1939 67000330017   省躬里    D02      38         2\n1940 67000270006   新田里    D32      38         0\n1941 67000270003   一甲里    D32      38         2\n1942 67000320026   德高里    D01      38         5\n1943 67000320006   仁和里    D01      38         8\n1944 67000270017   中洲里    D32      38         1\n1945 67000310014   西灣里    D39      38         5\n1946 67000310011   甲頂里    D39      38         5\n1947 67000310003   永康里    D39      38         3\n1948 67000310038   正強里    D39      38         4\n1949 67000360004   漁光里    D07      38         0\n1950 67000360002   金城里    D07      38         1\n1951 67000310036   尚頂里    D39      38         4\n1952 67000310019   復興里    D39      38         8\n1953 67000310022   神洲里    D39      38         2\n1954 67000310020   復國里    D39      38         9\n1955 67000310032   三合里    D39      38         8\n1956 67000310037   復華里    D39      38        37\n1957 67000310030   二王里    D39      38        26\n1958 67000320033   東智里    D01      38         6\n1959 67000330023   大恩里    D02      38         5\n1960 67000370033   西湖里    D08      38         6\n1961 67000360015   平安里    D07      38         2\n1962 67000370034   西賢里    D08      38         5\n1963 67000350036   四草里    D06      38         0\n1964 67000350006   安東里    D06      38         5\n1965 67000350047   淵中里    D06      38         1\n1966 67000350031   城西里    D06      38         2\n1967 67000350022   佃東里    D06      38         3\n1968 67000350010   新順里    D06      38         3\n1969 67000310018   新樹里    D39      38         0\n1970 67000310010   塩行里    D39      38         2\n1971 67000350035   鹿耳里    D06      38         0\n1972 67000350016   海西里    D06      38         2\n1973 67000350023   佃西里    D06      38         2\n1974 67000270019   文賢里    D32      38         1\n1975 67000310041   龍埔里    D39      38         1\n1976 67000310042   永明里    D39      38         4\n1977 67000330040   鹽埕里    D02      38        23\n1978 67000340051   北華里    D04      38        11\n1979 67000340052   華德里    D04      38         4\n1980 67000340053   福德里    D04      38         5\n1981 67000340044   長勝里    D04      38         3\n1982 67000340050   長興里    D04      38         0\n1983 67000340049   大興里    D04      38         6\n1984 67000340048   大光里    D04      38         8\n1985 67000340047   小北里    D04      38        12\n1986 67000340055   雙安里    D04      38         4\n1987 67000340054   立人里    D04      38         7\n1988 67000370042 小西門里    D08      38         4\n1989 67000370044   兌悅里    D08      38        15\n1990 67000370043 五條港里    D08      38         5\n1991 67000370040   南美里    D08      38         7\n1992 67000360017   王城里    D07      38         3\n1993 67000360016   天妃里    D07      38        25\n1994 67000370039   城隍里    D08      38        10\n1995 67000370048   西和里    D08      38        12\n1996 67000340046   北門里    D04      38        31\n1997 67000310029   塩洲里    D39      38         3\n1998 67000340004   東興里    D04      38         7\n1999 67000340019   重興里    D04      38         2\n2000 67000340020   和順里    D04      38         9\n2001 67000340005   力行里    D04      38         3\n2002 67000340041   文成里    D04      38         7\n2003 67000340038   元寶里    D04      38         4\n2004 67000340001   開元里    D04      38         2\n2005 67000340040   成德里    D04      38         8\n2006 67000370016   永華里    D08      38        16\n2007 67000370007   郡王里    D08      38         2\n2008 67000310043   塩興里    D39      38         2\n2009 67000340056   元美里    D04      38         3\n2010 67000370047   南廠里    D08      38         5\n2011 67000370045   淺草里    D08      38         8\n2012 67000370046   府前里    D08      38         3\n2013 67000370041   南門里    D08      38         4\n2014 67000340045   合興里    D04      38         2\n2015 67000310017   北灣里    D39      38         1\n2016 67000310040   北興里    D39      38         0\n2017 67000310027   龍潭里    D39      38         6\n2018 67000310004   埔園里    D39      38         1\n2019 67000310009   三民里    D39      38         0\n2020 67000340008   仁愛里    D04      38         9\n2021 67000340007   振興里    D04      38         6\n2022 67000340039   永祥里    D04      38        14\n2023 67000340025   文元里    D04      38         7\n2024 67000370011   開山里    D08      38         8\n2025 67000370031   大涼里    D08      38         4\n2026 67000370022   藥王里    D08      38        14\n2027 67000370025   光賢里    D08      38        12\n2028 67000270015   二行里    D32      38         1\n2029 67000270016   大甲里    D32      38         1\n2030 67000270005   仁義里    D32      38         9\n2031 67000270002   土庫里    D32      38         1\n2032 67000270001   太子里    D32      38         3\n2033 67000350007   安西里    D06      38         8\n2034 67000350051   大安里    D06      38        26\n2035 67000350037   安和里    D06      38        12\n2036 67000350045   理想里    D06      38        23\n2037 67000350009   安慶里    D06      38        13\n2038 67000350044   梅花里    D06      38         5\n2039 67000350008   頂安里    D06      38        15\n2040 67000350002   安順里    D06      38         5\n2041 67000350012   總頭里    D06      38         1\n2042 67000350011   原佃里    D06      38         2\n2043 67000350001   東和里    D06      38         4\n2044 67000310028   光復里    D39      38         0\n2045 67000310026   勝利里    D39      38        22\n2046 67000310021   建國里    D39      38         5\n2047 67000310031   六合里    D39      38        16\n2048 67000350021   淵西里    D06      38         1\n2049 67000350013   長安里    D06      38         5\n2050 67000310039   中華里    D39      38         7\n2051 67000310024   成功里    D39      38         1\n2052 67000310025   中興里    D39      38         6\n2053 67000310023   西勢里    D39      38         0\n2054 67000310008   蔦松里    D39      38         0\n2055 67000350034   顯宮里    D06      38         1\n2056 67000350004   州南里    D06      38         0\n2057 67000350048   布袋里    D06      38         2\n2058 67000350005   州北里    D06      38         3\n2059 67000350003   塭南里    D06      38         3\n2060 67000350024   公塭里    D06      38         3\n2061 67000350025   南興里    D06      38         2\n2062 67000360012   億載里    D07      38         2\n2063 67000360008   平通里    D07      38         7\n2064 67000350015   海東里    D06      38        12\n2065 67000350032   青草里    D06      39         0\n2066 67000270011   保安里    D32      39         3\n2067 67000370005   赤嵌里    D08      39        15\n2068 67000330004   大成里    D02      39         3\n2069 67000350028   城北里    D06      39         1\n2070 67000350030   城南里    D06      39         2\n2071 67000370009   法華里    D08      39         6\n2072 67000350017   海南里    D06      39        13\n2073 67000350049   國安里    D06      39        11\n2074 67000350018   溪心里    D06      39         6\n2075 67000350020   淵東里    D06      39         2\n2076 67000350029   城中里    D06      39         0\n2077 67000350027   城東里    D06      39         0\n2078 67000350026   學東里    D06      39         0\n2079 67000310013   東灣里    D39      39         1\n2080 67000310015   南灣里    D39      39         3\n2081 67000310016   崑山里    D39      39         5\n2082 67000310012   大灣里    D39      39         2\n2083 67000310001   五王里    D39      39        16\n2084 67000310034   安康里    D39      39         7\n2085 67000310035   西橋里    D39      39        11\n2086 67000310002   網寮里    D39      39         4\n2087 67000310005   大橋里    D39      39        19\n2088 67000310033   東橋里    D39      39        11\n2089 67000310007   烏竹里    D39      39         2\n2090 67000310006   王行里    D39      39         1\n2091 67000320003   大智里    D01      39         5\n2092 67000320041   崇文里    D01      39         5\n2093 67000320035   崇成里    D01      39         4\n2094 67000320012   崇明里    D01      39         6\n2095 67000320028   大福里    D01      39         8\n2096 67000320032   崇德里    D01      39         9\n2097 67000320016   大德里    D01      39         4\n2098 67000320004   崇學里    D01      39        13\n2099 67000320014   和平里    D01      39        13\n2100 67000320019   崇善里    D01      39        15\n2101 67000320015   路東里    D01      39         3\n2102 67000320025   虎尾里    D01      39        17\n2103 67000320029   忠孝里    D01      39         6\n2104 67000320043   裕聖里    D01      39         5\n2105 67000320040   崇信里    D01      39        15\n2106 67000320039   德光里    D01      39         8\n2107 67000320042   復興里    D01      39        17\n2108 67000320013   自強里    D01      39        22\n2109 67000320045   文聖里    D01      39         8\n2110 67000320001   富裕里    D01      39         6\n2111 67000320024   龍山里    D01      39        11\n2112 67000320017   關聖里    D01      39         7\n2113 67000320009   新東里    D01      39        19\n2114 67000320020   富強里    D01      39        23\n2115 67000320005   泉南里    D01      39        11\n2116 67000320034   東聖里    D01      39        15\n2117 67000320011   東安里    D01      39         2\n2118 67000320038   大同里    D01      39         7\n2119 67000320018   衛國里    D01      39         7\n2120 67000320002   裕農里    D01      39        20\n2121 67000320044   南聖里    D01      39         5\n2122 67000320030   崇誨里    D01      39        17\n2123 67000320036   東門里    D01      39         3\n2124 67000320010   中西里    D01      39         6\n2125 67000320031   東明里    D01      39         9\n2126 67000320021   圍下里    D01      39         1\n2127 67000320008   東光里    D01      39         6\n2128 67000320007   後甲里    D01      39        10\n2129 67000320027   莊敬里    D01      39        13\n2130 67000320022   小東里    D01      39         8\n2131 67000320023   大學里    D01      39         4\n2132 67000320037   成大里    D01      39         4\n2133 67000340033   公園里    D04      39        10\n2134 67000340032   中樓里    D04      39        17\n2135 67000340043   賢北里    D04      39         2\n2136 67000340018   大豐里    D04      39        15\n2137 67000340026   大港里    D04      39        12\n2138 67000340023   正覺里    D04      39        13\n2139 67000340042   大和里    D04      39        11\n2140 67000340024   成功里    D04      39        12\n2141 67000330020   佛壇里    D02      39         2\n2142 67000330019   同安里    D02      39         1\n2143 67000330037   松安里    D02      39         1\n2144 67000330038   永寧里    D02      39         1\n2145 67000330016   喜南里    D02      39         1\n2146 67000330014   喜東里    D02      39         5\n2147 67000330015   喜北里    D02      39         2\n2148 67000330029   南都里    D02      39        17\n2149 67000330039   南華里    D02      39        16\n2150 67000330032   建南里    D02      39        33\n2151 67000330026   明興里    D02      39        31\n2152 67000330033   郡南里    D02      39        33\n2153 67000330030   開南里    D02      39        12\n2154 67000330013   明亮里    D02      39        45\n2155 67000330036   鯤鯓里    D02      39         2\n2156 67000330022   大忠里    D02      39        13\n2157 67000330011   光明里    D02      39        16\n2158 67000330034   府南里    D02      39        23\n2159 67000330021   大林里    D02      39         2\n2160 67000330009   國宅里    D02      39        37\n2161 67000330008   田寮里    D02      39         6\n2162 67000330024   新生里    D02      39         4\n2163 67000330001   竹溪里    D02      39         0\n2164 67000330003   明德里    D02      39         2\n2165 67000330025   再興里    D02      39        24\n2166 67000330031   彰南里    D02      39         7\n2167 67000330028   金華里    D02      39        31\n2168 67000330007   新興里    D02      39         9\n2169 67000330035   文南里    D02      39         5\n2170 67000330006   新昌里    D02      39         8\n2171 67000330005   廣州里    D02      39        13\n2172 67000330027   文華里    D02      39         7\n2173 67000350039   溪頂里    D06      39        15\n2174 67000350041   海佃里    D06      39        12\n2175 67000350046   溪東里    D06      39        17\n2176 67000350038   溪北里    D06      39         7\n2177 67000350040   溪墘里    D06      39         8\n2178 67000350050   安富里    D06      39        22\n2179 67000350019   塩田里    D06      39         1\n2180 67000350043   鳳凰里    D06      39        16\n2181 67000350014   公親里    D06      39         0\n2182 67000350033   砂崙里    D06      39         1\n2183 67000360009   文平里    D07      39         9\n2184 67000360010   國平里    D07      39         8\n2185 67000360011   育平里    D07      39        14\n2186 67000360007   華平里    D07      39         9\n2187 67000360006   怡平里    D07      39         7\n2188 67000360005   建平里    D07      39         8\n2189 67000350042   幸福里    D06      39        18\n2190 67000270008   上崙里    D32      39         8\n2191 67000270007   後壁里    D32      39         2\n2192 67000270012   成功里    D32      39         6\n2193 67000270013   仁和里    D32      39         0\n2194 67000270014   仁愛里    D32      39         4\n2195 67000270004   仁德里    D32      39        10\n2196 67000330018   興農里    D02      39         2\n2197 67000330017   省躬里    D02      39         3\n2198 67000270006   新田里    D32      39         2\n2199 67000270003   一甲里    D32      39         3\n2200 67000320026   德高里    D01      39        11\n2201 67000320006   仁和里    D01      39         6\n2202 67000270017   中洲里    D32      39         0\n2203 67000310014   西灣里    D39      39         3\n2204 67000310011   甲頂里    D39      39        13\n2205 67000310003   永康里    D39      39         4\n2206 67000310038   正強里    D39      39         8\n2207 67000360004   漁光里    D07      39         0\n2208 67000360002   金城里    D07      39         3\n2209 67000310036   尚頂里    D39      39        12\n2210 67000310019   復興里    D39      39         4\n2211 67000310022   神洲里    D39      39         2\n2212 67000310020   復國里    D39      39        22\n2213 67000310032   三合里    D39      39         4\n2214 67000310037   復華里    D39      39        55\n2215 67000310030   二王里    D39      39        18\n2216 67000320033   東智里    D01      39         7\n2217 67000330023   大恩里    D02      39         5\n2218 67000370033   西湖里    D08      39         6\n2219 67000360015   平安里    D07      39         3\n2220 67000370034   西賢里    D08      39         5\n2221 67000350036   四草里    D06      39         1\n2222 67000350006   安東里    D06      39         7\n2223 67000350047   淵中里    D06      39         2\n2224 67000350031   城西里    D06      39         0\n2225 67000350022   佃東里    D06      39         4\n2226 67000350010   新順里    D06      39         7\n2227 67000310018   新樹里    D39      39         1\n2228 67000310010   塩行里    D39      39         7\n2229 67000350035   鹿耳里    D06      39         0\n2230 67000350016   海西里    D06      39         2\n2231 67000350023   佃西里    D06      39         0\n2232 67000270019   文賢里    D32      39         1\n2233 67000310041   龍埔里    D39      39         0\n2234 67000310042   永明里    D39      39         2\n2235 67000330040   鹽埕里    D02      39        24\n2236 67000340051   北華里    D04      39         7\n2237 67000340052   華德里    D04      39         5\n2238 67000340053   福德里    D04      39         9\n2239 67000340044   長勝里    D04      39         3\n2240 67000340050   長興里    D04      39         5\n2241 67000340049   大興里    D04      39         9\n2242 67000340048   大光里    D04      39        12\n2243 67000340047   小北里    D04      39        16\n2244 67000340055   雙安里    D04      39         7\n2245 67000340054   立人里    D04      39         6\n2246 67000370042 小西門里    D08      39         9\n2247 67000370044   兌悅里    D08      39        24\n2248 67000370043 五條港里    D08      39         5\n2249 67000370040   南美里    D08      39         3\n2250 67000360017   王城里    D07      39        12\n2251 67000360016   天妃里    D07      39        11\n2252 67000370039   城隍里    D08      39        12\n2253 67000370048   西和里    D08      39        21\n2254 67000340046   北門里    D04      39        25\n2255 67000310029   塩洲里    D39      39         5\n2256 67000340004   東興里    D04      39        14\n2257 67000340019   重興里    D04      39         1\n2258 67000340020   和順里    D04      39        16\n2259 67000340005   力行里    D04      39        13\n2260 67000340041   文成里    D04      39         9\n2261 67000340038   元寶里    D04      39         7\n2262 67000340001   開元里    D04      39         7\n2263 67000340040   成德里    D04      39         7\n2264 67000370016   永華里    D08      39        10\n2265 67000370007   郡王里    D08      39         6\n2266 67000310043   塩興里    D39      39         4\n2267 67000340056   元美里    D04      39         8\n2268 67000370047   南廠里    D08      39        10\n2269 67000370045   淺草里    D08      39        16\n2270 67000370046   府前里    D08      39         6\n2271 67000370041   南門里    D08      39         1\n2272 67000340045   合興里    D04      39        13\n2273 67000310017   北灣里    D39      39         0\n2274 67000310040   北興里    D39      39         2\n2275 67000310027   龍潭里    D39      39         6\n2276 67000310004   埔園里    D39      39         2\n2277 67000310009   三民里    D39      39         0\n2278 67000340008   仁愛里    D04      39         8\n2279 67000340007   振興里    D04      39         9\n2280 67000340039   永祥里    D04      39        19\n2281 67000340025   文元里    D04      39         9\n2282 67000370011   開山里    D08      39         4\n2283 67000370031   大涼里    D08      39         2\n2284 67000370022   藥王里    D08      39        23\n2285 67000370025   光賢里    D08      39        10\n2286 67000270015   二行里    D32      39         1\n2287 67000270016   大甲里    D32      39         1\n2288 67000270005   仁義里    D32      39         3\n2289 67000270002   土庫里    D32      39         2\n2290 67000270001   太子里    D32      39         4\n2291 67000350007   安西里    D06      39        16\n2292 67000350051   大安里    D06      39        10\n2293 67000350037   安和里    D06      39         7\n2294 67000350045   理想里    D06      39         7\n2295 67000350009   安慶里    D06      39        20\n2296 67000350044   梅花里    D06      39         5\n2297 67000350008   頂安里    D06      39        26\n2298 67000350002   安順里    D06      39         2\n2299 67000350012   總頭里    D06      39         1\n2300 67000350011   原佃里    D06      39         2\n2301 67000350001   東和里    D06      39         1\n2302 67000310028   光復里    D39      39         0\n2303 67000310026   勝利里    D39      39        31\n2304 67000310021   建國里    D39      39         2\n2305 67000310031   六合里    D39      39        22\n2306 67000350021   淵西里    D06      39         4\n2307 67000350013   長安里    D06      39         1\n2308 67000310039   中華里    D39      39        14\n2309 67000310024   成功里    D39      39         1\n2310 67000310025   中興里    D39      39         4\n2311 67000310023   西勢里    D39      39         1\n2312 67000310008   蔦松里    D39      39         0\n2313 67000350034   顯宮里    D06      39         0\n2314 67000350004   州南里    D06      39         7\n2315 67000350048   布袋里    D06      39         0\n2316 67000350005   州北里    D06      39         0\n2317 67000350003   塭南里    D06      39         2\n2318 67000350024   公塭里    D06      39         0\n2319 67000350025   南興里    D06      39         0\n2320 67000360012   億載里    D07      39         4\n2321 67000360008   平通里    D07      39        15\n2322 67000350015   海東里    D06      39         8\n2323 67000350032   青草里    D06      40         0\n2324 67000270011   保安里    D32      40         0\n2325 67000370005   赤嵌里    D08      40        16\n2326 67000330004   大成里    D02      40         3\n2327 67000350028   城北里    D06      40         0\n2328 67000350030   城南里    D06      40         2\n2329 67000370009   法華里    D08      40         3\n2330 67000350017   海南里    D06      40         4\n2331 67000350049   國安里    D06      40         7\n2332 67000350018   溪心里    D06      40         9\n2333 67000350020   淵東里    D06      40         3\n2334 67000350029   城中里    D06      40         1\n2335 67000350027   城東里    D06      40         1\n2336 67000350026   學東里    D06      40         0\n2337 67000310013   東灣里    D39      40         2\n2338 67000310015   南灣里    D39      40         0\n2339 67000310016   崑山里    D39      40         1\n2340 67000310012   大灣里    D39      40         2\n2341 67000310001   五王里    D39      40         7\n2342 67000310034   安康里    D39      40         7\n2343 67000310035   西橋里    D39      40         9\n2344 67000310002   網寮里    D39      40         5\n2345 67000310005   大橋里    D39      40         8\n2346 67000310033   東橋里    D39      40         8\n2347 67000310007   烏竹里    D39      40         4\n2348 67000310006   王行里    D39      40         0\n2349 67000320003   大智里    D01      40         5\n2350 67000320041   崇文里    D01      40         8\n2351 67000320035   崇成里    D01      40         8\n2352 67000320012   崇明里    D01      40         5\n2353 67000320028   大福里    D01      40         7\n2354 67000320032   崇德里    D01      40        13\n2355 67000320016   大德里    D01      40         3\n2356 67000320004   崇學里    D01      40        11\n2357 67000320014   和平里    D01      40         2\n2358 67000320019   崇善里    D01      40        13\n2359 67000320015   路東里    D01      40         1\n2360 67000320025   虎尾里    D01      40        14\n2361 67000320029   忠孝里    D01      40         9\n2362 67000320043   裕聖里    D01      40         4\n2363 67000320040   崇信里    D01      40         4\n2364 67000320039   德光里    D01      40         6\n2365 67000320042   復興里    D01      40         8\n2366 67000320013   自強里    D01      40        22\n2367 67000320045   文聖里    D01      40        11\n2368 67000320001   富裕里    D01      40        13\n2369 67000320024   龍山里    D01      40         5\n2370 67000320017   關聖里    D01      40         9\n2371 67000320009   新東里    D01      40        20\n2372 67000320020   富強里    D01      40        11\n2373 67000320005   泉南里    D01      40         6\n2374 67000320034   東聖里    D01      40         7\n2375 67000320011   東安里    D01      40         4\n2376 67000320038   大同里    D01      40        16\n2377 67000320018   衛國里    D01      40         5\n2378 67000320002   裕農里    D01      40        19\n2379 67000320044   南聖里    D01      40         7\n2380 67000320030   崇誨里    D01      40        13\n2381 67000320036   東門里    D01      40         2\n2382 67000320010   中西里    D01      40         3\n2383 67000320031   東明里    D01      40        21\n2384 67000320021   圍下里    D01      40         2\n2385 67000320008   東光里    D01      40        13\n2386 67000320007   後甲里    D01      40        15\n2387 67000320027   莊敬里    D01      40        20\n2388 67000320022   小東里    D01      40         5\n2389 67000320023   大學里    D01      40         4\n2390 67000320037   成大里    D01      40         9\n2391 67000340033   公園里    D04      40         8\n2392 67000340032   中樓里    D04      40         7\n2393 67000340043   賢北里    D04      40         3\n2394 67000340018   大豐里    D04      40        16\n2395 67000340026   大港里    D04      40        17\n2396 67000340023   正覺里    D04      40        12\n2397 67000340042   大和里    D04      40        13\n2398 67000340024   成功里    D04      40         4\n2399 67000330020   佛壇里    D02      40         5\n2400 67000330019   同安里    D02      40         1\n2401 67000330037   松安里    D02      40         0\n2402 67000330038   永寧里    D02      40         1\n2403 67000330016   喜南里    D02      40         0\n2404 67000330014   喜東里    D02      40         3\n2405 67000330015   喜北里    D02      40         1\n2406 67000330029   南都里    D02      40         9\n2407 67000330039   南華里    D02      40        16\n2408 67000330032   建南里    D02      40        24\n2409 67000330026   明興里    D02      40        12\n2410 67000330033   郡南里    D02      40        14\n2411 67000330030   開南里    D02      40         5\n2412 67000330013   明亮里    D02      40        13\n2413 67000330036   鯤鯓里    D02      40         2\n2414 67000330022   大忠里    D02      40         6\n2415 67000330011   光明里    D02      40        20\n2416 67000330034   府南里    D02      40        13\n2417 67000330021   大林里    D02      40         9\n2418 67000330009   國宅里    D02      40        18\n2419 67000330008   田寮里    D02      40        14\n2420 67000330024   新生里    D02      40         4\n2421 67000330001   竹溪里    D02      40         2\n2422 67000330003   明德里    D02      40         2\n2423 67000330025   再興里    D02      40         8\n2424 67000330031   彰南里    D02      40         0\n2425 67000330028   金華里    D02      40        19\n2426 67000330007   新興里    D02      40         9\n2427 67000330035   文南里    D02      40        10\n2428 67000330006   新昌里    D02      40        10\n2429 67000330005   廣州里    D02      40        20\n2430 67000330027   文華里    D02      40         6\n2431 67000350039   溪頂里    D06      40        12\n2432 67000350041   海佃里    D06      40         9\n2433 67000350046   溪東里    D06      40        21\n2434 67000350038   溪北里    D06      40        15\n2435 67000350040   溪墘里    D06      40         1\n2436 67000350050   安富里    D06      40        12\n2437 67000350019   塩田里    D06      40         0\n2438 67000350043   鳳凰里    D06      40        11\n2439 67000350014   公親里    D06      40         1\n2440 67000350033   砂崙里    D06      40         0\n2441 67000360009   文平里    D07      40        17\n2442 67000360010   國平里    D07      40         6\n2443 67000360011   育平里    D07      40         9\n2444 67000360007   華平里    D07      40         5\n2445 67000360006   怡平里    D07      40         5\n2446 67000360005   建平里    D07      40        11\n2447 67000350042   幸福里    D06      40        14\n2448 67000270008   上崙里    D32      40         0\n2449 67000270007   後壁里    D32      40         3\n2450 67000270012   成功里    D32      40        10\n2451 67000270013   仁和里    D32      40         0\n2452 67000270014   仁愛里    D32      40         1\n2453 67000270004   仁德里    D32      40        10\n2454 67000330018   興農里    D02      40         5\n2455 67000330017   省躬里    D02      40         2\n2456 67000270006   新田里    D32      40         0\n2457 67000270003   一甲里    D32      40         4\n2458 67000320026   德高里    D01      40        15\n2459 67000320006   仁和里    D01      40         3\n2460 67000270017   中洲里    D32      40         4\n2461 67000310014   西灣里    D39      40         6\n2462 67000310011   甲頂里    D39      40         3\n2463 67000310003   永康里    D39      40         3\n2464 67000310038   正強里    D39      40         6\n2465 67000360004   漁光里    D07      40         0\n2466 67000360002   金城里    D07      40         4\n2467 67000310036   尚頂里    D39      40         1\n2468 67000310019   復興里    D39      40         5\n2469 67000310022   神洲里    D39      40         3\n2470 67000310020   復國里    D39      40         8\n2471 67000310032   三合里    D39      40         4\n2472 67000310037   復華里    D39      40        34\n2473 67000310030   二王里    D39      40        21\n2474 67000320033   東智里    D01      40         2\n2475 67000330023   大恩里    D02      40         5\n2476 67000370033   西湖里    D08      40         6\n2477 67000360015   平安里    D07      40         2\n2478 67000370034   西賢里    D08      40         7\n2479 67000350036   四草里    D06      40         1\n2480 67000350006   安東里    D06      40        14\n2481 67000350047   淵中里    D06      40         2\n2482 67000350031   城西里    D06      40         0\n2483 67000350022   佃東里    D06      40         2\n2484 67000350010   新順里    D06      40        10\n2485 67000310018   新樹里    D39      40         0\n2486 67000310010   塩行里    D39      40         4\n2487 67000350035   鹿耳里    D06      40         0\n2488 67000350016   海西里    D06      40         2\n2489 67000350023   佃西里    D06      40         1\n2490 67000270019   文賢里    D32      40         1\n2491 67000310041   龍埔里    D39      40         2\n2492 67000310042   永明里    D39      40         1\n2493 67000330040   鹽埕里    D02      40        21\n2494 67000340051   北華里    D04      40         6\n2495 67000340052   華德里    D04      40         9\n2496 67000340053   福德里    D04      40         7\n2497 67000340044   長勝里    D04      40         4\n2498 67000340050   長興里    D04      40         8\n2499 67000340049   大興里    D04      40        13\n2500 67000340048   大光里    D04      40         9\n2501 67000340047   小北里    D04      40        13\n2502 67000340055   雙安里    D04      40         2\n2503 67000340054   立人里    D04      40         7\n2504 67000370042 小西門里    D08      40         5\n2505 67000370044   兌悅里    D08      40         9\n2506 67000370043 五條港里    D08      40         8\n2507 67000370040   南美里    D08      40         7\n2508 67000360017   王城里    D07      40         1\n2509 67000360016   天妃里    D07      40        22\n2510 67000370039   城隍里    D08      40        10\n2511 67000370048   西和里    D08      40         7\n2512 67000340046   北門里    D04      40        15\n2513 67000310029   塩洲里    D39      40         7\n2514 67000340004   東興里    D04      40         7\n2515 67000340019   重興里    D04      40         0\n2516 67000340020   和順里    D04      40         7\n2517 67000340005   力行里    D04      40         8\n2518 67000340041   文成里    D04      40         8\n2519 67000340038   元寶里    D04      40         6\n2520 67000340001   開元里    D04      40         3\n2521 67000340040   成德里    D04      40         7\n2522 67000370016   永華里    D08      40        14\n2523 67000370007   郡王里    D08      40         4\n2524 67000310043   塩興里    D39      40         2\n2525 67000340056   元美里    D04      40        11\n2526 67000370047   南廠里    D08      40         7\n2527 67000370045   淺草里    D08      40         6\n2528 67000370046   府前里    D08      40         7\n2529 67000370041   南門里    D08      40        10\n2530 67000340045   合興里    D04      40         7\n2531 67000310017   北灣里    D39      40         1\n2532 67000310040   北興里    D39      40         1\n2533 67000310027   龍潭里    D39      40         3\n2534 67000310004   埔園里    D39      40         5\n2535 67000310009   三民里    D39      40         3\n2536 67000340008   仁愛里    D04      40        11\n2537 67000340007   振興里    D04      40         6\n2538 67000340039   永祥里    D04      40        11\n2539 67000340025   文元里    D04      40         9\n2540 67000370011   開山里    D08      40        11\n2541 67000370031   大涼里    D08      40         4\n2542 67000370022   藥王里    D08      40        29\n2543 67000370025   光賢里    D08      40         3\n2544 67000270015   二行里    D32      40         1\n2545 67000270016   大甲里    D32      40         1\n2546 67000270005   仁義里    D32      40        20\n2547 67000270002   土庫里    D32      40         4\n2548 67000270001   太子里    D32      40         1\n2549 67000350007   安西里    D06      40        24\n2550 67000350051   大安里    D06      40        11\n2551 67000350037   安和里    D06      40         8\n2552 67000350045   理想里    D06      40        15\n2553 67000350009   安慶里    D06      40         6\n2554 67000350044   梅花里    D06      40         4\n2555 67000350008   頂安里    D06      40        12\n2556 67000350002   安順里    D06      40         0\n2557 67000350012   總頭里    D06      40         1\n2558 67000350011   原佃里    D06      40         1\n2559 67000350001   東和里    D06      40         1\n2560 67000310028   光復里    D39      40         0\n2561 67000310026   勝利里    D39      40        26\n2562 67000310021   建國里    D39      40         3\n2563 67000310031   六合里    D39      40        12\n2564 67000350021   淵西里    D06      40         3\n2565 67000350013   長安里    D06      40         3\n2566 67000310039   中華里    D39      40        14\n2567 67000310024   成功里    D39      40         3\n2568 67000310025   中興里    D39      40         4\n2569 67000310023   西勢里    D39      40         1\n2570 67000310008   蔦松里    D39      40         3\n2571 67000350034   顯宮里    D06      40         0\n2572 67000350004   州南里    D06      40         1\n2573 67000350048   布袋里    D06      40         2\n2574 67000350005   州北里    D06      40         2\n2575 67000350003   塭南里    D06      40         2\n2576 67000350024   公塭里    D06      40         0\n2577 67000350025   南興里    D06      40         2\n2578 67000360012   億載里    D07      40         7\n2579 67000360008   平通里    D07      40        14\n2580 67000350015   海東里    D06      40         8\n2581 67000350032   青草里    D06      41         1\n2582 67000270011   保安里    D32      41         5\n2583 67000370005   赤嵌里    D08      41         9\n2584 67000330004   大成里    D02      41         4\n2585 67000350028   城北里    D06      41         0\n2586 67000350030   城南里    D06      41         0\n2587 67000370009   法華里    D08      41         5\n2588 67000350017   海南里    D06      41         1\n2589 67000350049   國安里    D06      41         4\n2590 67000350018   溪心里    D06      41         4\n2591 67000350020   淵東里    D06      41         3\n2592 67000350029   城中里    D06      41         0\n2593 67000350027   城東里    D06      41         0\n2594 67000350026   學東里    D06      41         0\n2595 67000310013   東灣里    D39      41         1\n2596 67000310015   南灣里    D39      41         1\n2597 67000310016   崑山里    D39      41         1\n2598 67000310012   大灣里    D39      41         5\n2599 67000310001   五王里    D39      41        10\n2600 67000310034   安康里    D39      41         9\n2601 67000310035   西橋里    D39      41         8\n2602 67000310002   網寮里    D39      41         4\n2603 67000310005   大橋里    D39      41         5\n2604 67000310033   東橋里    D39      41         7\n2605 67000310007   烏竹里    D39      41         1\n2606 67000310006   王行里    D39      41         0\n2607 67000320003   大智里    D01      41         8\n2608 67000320041   崇文里    D01      41         5\n2609 67000320035   崇成里    D01      41         4\n2610 67000320012   崇明里    D01      41         7\n2611 67000320028   大福里    D01      41         7\n2612 67000320032   崇德里    D01      41        13\n2613 67000320016   大德里    D01      41         3\n2614 67000320004   崇學里    D01      41         4\n2615 67000320014   和平里    D01      41         5\n2616 67000320019   崇善里    D01      41        16\n2617 67000320015   路東里    D01      41         6\n2618 67000320025   虎尾里    D01      41         9\n2619 67000320029   忠孝里    D01      41         5\n2620 67000320043   裕聖里    D01      41         1\n2621 67000320040   崇信里    D01      41         6\n2622 67000320039   德光里    D01      41         6\n2623 67000320042   復興里    D01      41        12\n2624 67000320013   自強里    D01      41         9\n2625 67000320045   文聖里    D01      41         5\n2626 67000320001   富裕里    D01      41         9\n2627 67000320024   龍山里    D01      41         6\n2628 67000320017   關聖里    D01      41         4\n2629 67000320009   新東里    D01      41         1\n2630 67000320020   富強里    D01      41         5\n2631 67000320005   泉南里    D01      41         4\n2632 67000320034   東聖里    D01      41         3\n2633 67000320011   東安里    D01      41         5\n2634 67000320038   大同里    D01      41        10\n2635 67000320018   衛國里    D01      41         4\n2636 67000320002   裕農里    D01      41        14\n2637 67000320044   南聖里    D01      41         5\n2638 67000320030   崇誨里    D01      41        11\n2639 67000320036   東門里    D01      41         3\n2640 67000320010   中西里    D01      41         9\n2641 67000320031   東明里    D01      41        15\n2642 67000320021   圍下里    D01      41         1\n2643 67000320008   東光里    D01      41         9\n2644 67000320007   後甲里    D01      41         5\n2645 67000320027   莊敬里    D01      41        16\n2646 67000320022   小東里    D01      41         7\n2647 67000320023   大學里    D01      41         2\n2648 67000320037   成大里    D01      41         3\n2649 67000340033   公園里    D04      41         3\n2650 67000340032   中樓里    D04      41         4\n2651 67000340043   賢北里    D04      41         1\n2652 67000340018   大豐里    D04      41        12\n2653 67000340026   大港里    D04      41         7\n2654 67000340023   正覺里    D04      41        19\n2655 67000340042   大和里    D04      41         5\n2656 67000340024   成功里    D04      41        11\n2657 67000330020   佛壇里    D02      41         1\n2658 67000330019   同安里    D02      41         1\n2659 67000330037   松安里    D02      41         1\n2660 67000330038   永寧里    D02      41         0\n2661 67000330016   喜南里    D02      41         0\n2662 67000330014   喜東里    D02      41         5\n2663 67000330015   喜北里    D02      41         2\n2664 67000330029   南都里    D02      41         1\n2665 67000330039   南華里    D02      41         6\n2666 67000330032   建南里    D02      41        14\n2667 67000330026   明興里    D02      41         8\n2668 67000330033   郡南里    D02      41         7\n2669 67000330030   開南里    D02      41        12\n2670 67000330013   明亮里    D02      41        14\n2671 67000330036   鯤鯓里    D02      41         0\n2672 67000330022   大忠里    D02      41         8\n2673 67000330011   光明里    D02      41        14\n2674 67000330034   府南里    D02      41        13\n2675 67000330021   大林里    D02      41         3\n2676 67000330009   國宅里    D02      41         7\n2677 67000330008   田寮里    D02      41        12\n2678 67000330024   新生里    D02      41         3\n2679 67000330001   竹溪里    D02      41         2\n2680 67000330003   明德里    D02      41         1\n2681 67000330025   再興里    D02      41         9\n2682 67000330031   彰南里    D02      41         3\n2683 67000330028   金華里    D02      41        26\n2684 67000330007   新興里    D02      41         4\n2685 67000330035   文南里    D02      41         8\n2686 67000330006   新昌里    D02      41         7\n2687 67000330005   廣州里    D02      41         7\n2688 67000330027   文華里    D02      41        10\n2689 67000350039   溪頂里    D06      41         6\n2690 67000350041   海佃里    D06      41         5\n2691 67000350046   溪東里    D06      41         8\n2692 67000350038   溪北里    D06      41         3\n2693 67000350040   溪墘里    D06      41         1\n2694 67000350050   安富里    D06      41        16\n2695 67000350019   塩田里    D06      41         2\n2696 67000350043   鳳凰里    D06      41         7\n2697 67000350014   公親里    D06      41         1\n2698 67000350033   砂崙里    D06      41         0\n2699 67000360009   文平里    D07      41        13\n2700 67000360010   國平里    D07      41         6\n2701 67000360011   育平里    D07      41         3\n2702 67000360007   華平里    D07      41         4\n2703 67000360006   怡平里    D07      41         6\n2704 67000360005   建平里    D07      41         6\n2705 67000350042   幸福里    D06      41        14\n2706 67000270008   上崙里    D32      41         1\n2707 67000270007   後壁里    D32      41         5\n2708 67000270012   成功里    D32      41         1\n2709 67000270013   仁和里    D32      41         2\n2710 67000270014   仁愛里    D32      41         0\n2711 67000270004   仁德里    D32      41         4\n2712 67000330018   興農里    D02      41         1\n2713 67000330017   省躬里    D02      41         1\n2714 67000270006   新田里    D32      41         1\n2715 67000270003   一甲里    D32      41         0\n2716 67000320026   德高里    D01      41         7\n2717 67000320006   仁和里    D01      41         6\n2718 67000270017   中洲里    D32      41         1\n2719 67000310014   西灣里    D39      41         4\n2720 67000310011   甲頂里    D39      41         2\n2721 67000310003   永康里    D39      41         2\n2722 67000310038   正強里    D39      41         7\n2723 67000360004   漁光里    D07      41         0\n2724 67000360002   金城里    D07      41         2\n2725 67000310036   尚頂里    D39      41         2\n2726 67000310019   復興里    D39      41         6\n2727 67000310022   神洲里    D39      41         1\n2728 67000310020   復國里    D39      41        10\n2729 67000310032   三合里    D39      41         6\n2730 67000310037   復華里    D39      41        26\n2731 67000310030   二王里    D39      41        16\n2732 67000320033   東智里    D01      41         2\n2733 67000330023   大恩里    D02      41         7\n2734 67000370033   西湖里    D08      41        10\n2735 67000360015   平安里    D07      41         0\n2736 67000370034   西賢里    D08      41         5\n2737 67000350036   四草里    D06      41         0\n2738 67000350006   安東里    D06      41         9\n2739 67000350047   淵中里    D06      41         0\n2740 67000350031   城西里    D06      41         0\n2741 67000350022   佃東里    D06      41         0\n2742 67000350010   新順里    D06      41        12\n2743 67000310018   新樹里    D39      41         2\n2744 67000310010   塩行里    D39      41         4\n2745 67000350035   鹿耳里    D06      41         0\n2746 67000350016   海西里    D06      41         3\n2747 67000350023   佃西里    D06      41         2\n2748 67000270019   文賢里    D32      41         3\n2749 67000310041   龍埔里    D39      41         3\n2750 67000310042   永明里    D39      41         1\n2751 67000330040   鹽埕里    D02      41         8\n2752 67000340051   北華里    D04      41         3\n2753 67000340052   華德里    D04      41         1\n2754 67000340053   福德里    D04      41         3\n2755 67000340044   長勝里    D04      41         7\n2756 67000340050   長興里    D04      41         6\n2757 67000340049   大興里    D04      41        12\n2758 67000340048   大光里    D04      41         7\n2759 67000340047   小北里    D04      41        21\n2760 67000340055   雙安里    D04      41         2\n2761 67000340054   立人里    D04      41         6\n2762 67000370042 小西門里    D08      41         8\n2763 67000370044   兌悅里    D08      41         7\n2764 67000370043 五條港里    D08      41         6\n2765 67000370040   南美里    D08      41        13\n2766 67000360017   王城里    D07      41         2\n2767 67000360016   天妃里    D07      41         5\n2768 67000370039   城隍里    D08      41         5\n2769 67000370048   西和里    D08      41         7\n2770 67000340046   北門里    D04      41        14\n2771 67000310029   塩洲里    D39      41         5\n2772 67000340004   東興里    D04      41         4\n2773 67000340019   重興里    D04      41         1\n2774 67000340020   和順里    D04      41         5\n2775 67000340005   力行里    D04      41         9\n2776 67000340041   文成里    D04      41         4\n2777 67000340038   元寶里    D04      41         4\n2778 67000340001   開元里    D04      41         5\n2779 67000340040   成德里    D04      41        10\n2780 67000370016   永華里    D08      41         5\n2781 67000370007   郡王里    D08      41         4\n2782 67000310043   塩興里    D39      41         1\n2783 67000340056   元美里    D04      41         4\n2784 67000370047   南廠里    D08      41         4\n2785 67000370045   淺草里    D08      41         5\n2786 67000370046   府前里    D08      41         2\n2787 67000370041   南門里    D08      41         6\n2788 67000340045   合興里    D04      41         3\n2789 67000310017   北灣里    D39      41         3\n2790 67000310040   北興里    D39      41         2\n2791 67000310027   龍潭里    D39      41         1\n2792 67000310004   埔園里    D39      41         7\n2793 67000310009   三民里    D39      41         0\n2794 67000340008   仁愛里    D04      41         9\n2795 67000340007   振興里    D04      41         5\n2796 67000340039   永祥里    D04      41         6\n2797 67000340025   文元里    D04      41         7\n2798 67000370011   開山里    D08      41        12\n2799 67000370031   大涼里    D08      41         1\n2800 67000370022   藥王里    D08      41        15\n2801 67000370025   光賢里    D08      41         1\n2802 67000270015   二行里    D32      41         0\n2803 67000270016   大甲里    D32      41         0\n2804 67000270005   仁義里    D32      41        13\n2805 67000270002   土庫里    D32      41         0\n2806 67000270001   太子里    D32      41         1\n2807 67000350007   安西里    D06      41        15\n2808 67000350051   大安里    D06      41         6\n2809 67000350037   安和里    D06      41         5\n2810 67000350045   理想里    D06      41         7\n2811 67000350009   安慶里    D06      41         1\n2812 67000350044   梅花里    D06      41         7\n2813 67000350008   頂安里    D06      41        15\n2814 67000350002   安順里    D06      41         2\n2815 67000350012   總頭里    D06      41         0\n2816 67000350011   原佃里    D06      41         1\n2817 67000350001   東和里    D06      41         0\n2818 67000310028   光復里    D39      41         0\n2819 67000310026   勝利里    D39      41        21\n2820 67000310021   建國里    D39      41         0\n2821 67000310031   六合里    D39      41         6\n2822 67000350021   淵西里    D06      41         1\n2823 67000350013   長安里    D06      41         3\n2824 67000310039   中華里    D39      41         7\n2825 67000310024   成功里    D39      41         1\n2826 67000310025   中興里    D39      41         4\n2827 67000310023   西勢里    D39      41         1\n2828 67000310008   蔦松里    D39      41         0\n2829 67000350034   顯宮里    D06      41         0\n2830 67000350004   州南里    D06      41         0\n2831 67000350048   布袋里    D06      41         1\n2832 67000350005   州北里    D06      41         4\n2833 67000350003   塭南里    D06      41         3\n2834 67000350024   公塭里    D06      41         0\n2835 67000350025   南興里    D06      41         1\n2836 67000360012   億載里    D07      41         3\n2837 67000360008   平通里    D07      41         9\n2838 67000350015   海東里    D06      41         7\n2839 67000350032   青草里    D06      42         0\n2840 67000270011   保安里    D32      42         2\n2841 67000370005   赤嵌里    D08      42        10\n2842 67000330004   大成里    D02      42         0\n2843 67000350028   城北里    D06      42         0\n2844 67000350030   城南里    D06      42         1\n2845 67000370009   法華里    D08      42         1\n2846 67000350017   海南里    D06      42         1\n2847 67000350049   國安里    D06      42         1\n2848 67000350018   溪心里    D06      42         4\n2849 67000350020   淵東里    D06      42         1\n2850 67000350029   城中里    D06      42         0\n2851 67000350027   城東里    D06      42         0\n2852 67000350026   學東里    D06      42         2\n2853 67000310013   東灣里    D39      42         2\n2854 67000310015   南灣里    D39      42         1\n2855 67000310016   崑山里    D39      42         4\n2856 67000310012   大灣里    D39      42         0\n2857 67000310001   五王里    D39      42         4\n2858 67000310034   安康里    D39      42         6\n2859 67000310035   西橋里    D39      42         8\n2860 67000310002   網寮里    D39      42         8\n2861 67000310005   大橋里    D39      42         6\n2862 67000310033   東橋里    D39      42         9\n2863 67000310007   烏竹里    D39      42         0\n2864 67000310006   王行里    D39      42         0\n2865 67000320003   大智里    D01      42         3\n2866 67000320041   崇文里    D01      42         8\n2867 67000320035   崇成里    D01      42         3\n2868 67000320012   崇明里    D01      42         2\n2869 67000320028   大福里    D01      42         2\n2870 67000320032   崇德里    D01      42         8\n2871 67000320016   大德里    D01      42         1\n2872 67000320004   崇學里    D01      42         1\n2873 67000320014   和平里    D01      42        12\n2874 67000320019   崇善里    D01      42        20\n2875 67000320015   路東里    D01      42         3\n2876 67000320025   虎尾里    D01      42        11\n2877 67000320029   忠孝里    D01      42        10\n2878 67000320043   裕聖里    D01      42         0\n2879 67000320040   崇信里    D01      42         3\n2880 67000320039   德光里    D01      42         3\n2881 67000320042   復興里    D01      42        15\n2882 67000320013   自強里    D01      42        10\n2883 67000320045   文聖里    D01      42         8\n2884 67000320001   富裕里    D01      42         6\n2885 67000320024   龍山里    D01      42         2\n2886 67000320017   關聖里    D01      42        15\n2887 67000320009   新東里    D01      42         3\n2888 67000320020   富強里    D01      42        11\n2889 67000320005   泉南里    D01      42         8\n2890 67000320034   東聖里    D01      42         3\n2891 67000320011   東安里    D01      42         2\n2892 67000320038   大同里    D01      42         8\n2893 67000320018   衛國里    D01      42         0\n2894 67000320002   裕農里    D01      42        13\n2895 67000320044   南聖里    D01      42         8\n2896 67000320030   崇誨里    D01      42         7\n2897 67000320036   東門里    D01      42         5\n2898 67000320010   中西里    D01      42         2\n2899 67000320031   東明里    D01      42        10\n2900 67000320021   圍下里    D01      42         5\n2901 67000320008   東光里    D01      42         8\n2902 67000320007   後甲里    D01      42        24\n2903 67000320027   莊敬里    D01      42         3\n2904 67000320022   小東里    D01      42         1\n2905 67000320023   大學里    D01      42         1\n2906 67000320037   成大里    D01      42         4\n2907 67000340033   公園里    D04      42         5\n2908 67000340032   中樓里    D04      42         0\n2909 67000340043   賢北里    D04      42         5\n2910 67000340018   大豐里    D04      42         3\n2911 67000340026   大港里    D04      42         7\n2912 67000340023   正覺里    D04      42        15\n2913 67000340042   大和里    D04      42         8\n2914 67000340024   成功里    D04      42         5\n2915 67000330020   佛壇里    D02      42         4\n2916 67000330019   同安里    D02      42         1\n2917 67000330037   松安里    D02      42         1\n2918 67000330038   永寧里    D02      42         0\n2919 67000330016   喜南里    D02      42         0\n2920 67000330014   喜東里    D02      42         1\n2921 67000330015   喜北里    D02      42         1\n2922 67000330029   南都里    D02      42         4\n2923 67000330039   南華里    D02      42         5\n2924 67000330032   建南里    D02      42         9\n2925 67000330026   明興里    D02      42         8\n2926 67000330033   郡南里    D02      42         6\n2927 67000330030   開南里    D02      42        11\n2928 67000330013   明亮里    D02      42        13\n2929 67000330036   鯤鯓里    D02      42         1\n2930 67000330022   大忠里    D02      42        10\n2931 67000330011   光明里    D02      42         7\n2932 67000330034   府南里    D02      42         9\n2933 67000330021   大林里    D02      42         1\n2934 67000330009   國宅里    D02      42         3\n2935 67000330008   田寮里    D02      42         8\n2936 67000330024   新生里    D02      42         5\n2937 67000330001   竹溪里    D02      42         4\n2938 67000330003   明德里    D02      42         3\n2939 67000330025   再興里    D02      42         7\n2940 67000330031   彰南里    D02      42         2\n2941 67000330028   金華里    D02      42        15\n2942 67000330007   新興里    D02      42         6\n2943 67000330035   文南里    D02      42         2\n2944 67000330006   新昌里    D02      42        19\n2945 67000330005   廣州里    D02      42         4\n2946 67000330027   文華里    D02      42        12\n2947 67000350039   溪頂里    D06      42         8\n2948 67000350041   海佃里    D06      42         3\n2949 67000350046   溪東里    D06      42         7\n2950 67000350038   溪北里    D06      42         5\n2951 67000350040   溪墘里    D06      42         2\n2952 67000350050   安富里    D06      42        17\n2953 67000350019   塩田里    D06      42         1\n2954 67000350043   鳳凰里    D06      42         5\n2955 67000350014   公親里    D06      42         0\n2956 67000350033   砂崙里    D06      42         0\n2957 67000360009   文平里    D07      42         7\n2958 67000360010   國平里    D07      42         7\n2959 67000360011   育平里    D07      42         6\n2960 67000360007   華平里    D07      42         7\n2961 67000360006   怡平里    D07      42         9\n2962 67000360005   建平里    D07      42         5\n2963 67000350042   幸福里    D06      42         1\n2964 67000270008   上崙里    D32      42         4\n2965 67000270007   後壁里    D32      42         5\n2966 67000270012   成功里    D32      42         6\n2967 67000270013   仁和里    D32      42         0\n2968 67000270014   仁愛里    D32      42         1\n2969 67000270004   仁德里    D32      42        10\n2970 67000330018   興農里    D02      42         4\n2971 67000330017   省躬里    D02      42         1\n2972 67000270006   新田里    D32      42         3\n2973 67000270003   一甲里    D32      42         2\n2974 67000320026   德高里    D01      42         8\n2975 67000320006   仁和里    D01      42        10\n2976 67000270017   中洲里    D32      42         0\n2977 67000310014   西灣里    D39      42         5\n2978 67000310011   甲頂里    D39      42         3\n2979 67000310003   永康里    D39      42         2\n2980 67000310038   正強里    D39      42         9\n2981 67000360004   漁光里    D07      42         0\n2982 67000360002   金城里    D07      42         1\n2983 67000310036   尚頂里    D39      42         4\n2984 67000310019   復興里    D39      42         4\n2985 67000310022   神洲里    D39      42         1\n2986 67000310020   復國里    D39      42        11\n2987 67000310032   三合里    D39      42         5\n2988 67000310037   復華里    D39      42        30\n2989 67000310030   二王里    D39      42         7\n2990 67000320033   東智里    D01      42         3\n2991 67000330023   大恩里    D02      42        15\n2992 67000370033   西湖里    D08      42         9\n2993 67000360015   平安里    D07      42         4\n2994 67000370034   西賢里    D08      42         2\n2995 67000350036   四草里    D06      42         1\n2996 67000350006   安東里    D06      42         4\n2997 67000350047   淵中里    D06      42         1\n2998 67000350031   城西里    D06      42         0\n2999 67000350022   佃東里    D06      42         2\n3000 67000350010   新順里    D06      42         4\n3001 67000310018   新樹里    D39      42         2\n3002 67000310010   塩行里    D39      42         4\n3003 67000350035   鹿耳里    D06      42         0\n3004 67000350016   海西里    D06      42         3\n3005 67000350023   佃西里    D06      42         1\n3006 67000270019   文賢里    D32      42         0\n3007 67000310041   龍埔里    D39      42         2\n3008 67000310042   永明里    D39      42         1\n3009 67000330040   鹽埕里    D02      42        14\n3010 67000340051   北華里    D04      42         9\n3011 67000340052   華德里    D04      42         3\n3012 67000340053   福德里    D04      42         5\n3013 67000340044   長勝里    D04      42         5\n3014 67000340050   長興里    D04      42         5\n3015 67000340049   大興里    D04      42         5\n3016 67000340048   大光里    D04      42         5\n3017 67000340047   小北里    D04      42        14\n3018 67000340055   雙安里    D04      42         5\n3019 67000340054   立人里    D04      42        17\n3020 67000370042 小西門里    D08      42        11\n3021 67000370044   兌悅里    D08      42        13\n3022 67000370043 五條港里    D08      42         6\n3023 67000370040   南美里    D08      42        14\n3024 67000360017   王城里    D07      42         2\n3025 67000360016   天妃里    D07      42        10\n3026 67000370039   城隍里    D08      42         7\n3027 67000370048   西和里    D08      42         6\n3028 67000340046   北門里    D04      42        11\n3029 67000310029   塩洲里    D39      42         3\n3030 67000340004   東興里    D04      42         3\n3031 67000340019   重興里    D04      42         2\n3032 67000340020   和順里    D04      42         9\n3033 67000340005   力行里    D04      42         2\n3034 67000340041   文成里    D04      42         1\n3035 67000340038   元寶里    D04      42         5\n3036 67000340001   開元里    D04      42         6\n3037 67000340040   成德里    D04      42        10\n3038 67000370016   永華里    D08      42         6\n3039 67000370007   郡王里    D08      42         0\n3040 67000310043   塩興里    D39      42         3\n3041 67000340056   元美里    D04      42         5\n3042 67000370047   南廠里    D08      42         5\n3043 67000370045   淺草里    D08      42         5\n3044 67000370046   府前里    D08      42         4\n3045 67000370041   南門里    D08      42        10\n3046 67000340045   合興里    D04      42         1\n3047 67000310017   北灣里    D39      42         1\n3048 67000310040   北興里    D39      42         2\n3049 67000310027   龍潭里    D39      42         0\n3050 67000310004   埔園里    D39      42         3\n3051 67000310009   三民里    D39      42         1\n3052 67000340008   仁愛里    D04      42         0\n3053 67000340007   振興里    D04      42         3\n3054 67000340039   永祥里    D04      42        10\n3055 67000340025   文元里    D04      42        13\n3056 67000370011   開山里    D08      42        10\n3057 67000370031   大涼里    D08      42         2\n3058 67000370022   藥王里    D08      42         6\n3059 67000370025   光賢里    D08      42         1\n3060 67000270015   二行里    D32      42         0\n3061 67000270016   大甲里    D32      42         0\n3062 67000270005   仁義里    D32      42        15\n3063 67000270002   土庫里    D32      42         1\n3064 67000270001   太子里    D32      42         2\n3065 67000350007   安西里    D06      42         9\n3066 67000350051   大安里    D06      42         5\n3067 67000350037   安和里    D06      42         2\n3068 67000350045   理想里    D06      42         0\n3069 67000350009   安慶里    D06      42        11\n3070 67000350044   梅花里    D06      42         6\n3071 67000350008   頂安里    D06      42         8\n3072 67000350002   安順里    D06      42         1\n3073 67000350012   總頭里    D06      42         0\n3074 67000350011   原佃里    D06      42         1\n3075 67000350001   東和里    D06      42         2\n3076 67000310028   光復里    D39      42         3\n3077 67000310026   勝利里    D39      42        14\n3078 67000310021   建國里    D39      42         1\n3079 67000310031   六合里    D39      42        10\n3080 67000350021   淵西里    D06      42         2\n3081 67000350013   長安里    D06      42         1\n3082 67000310039   中華里    D39      42         4\n3083 67000310024   成功里    D39      42         1\n3084 67000310025   中興里    D39      42         4\n3085 67000310023   西勢里    D39      42         2\n3086 67000310008   蔦松里    D39      42         1\n3087 67000350034   顯宮里    D06      42         0\n3088 67000350004   州南里    D06      42         2\n3089 67000350048   布袋里    D06      42         1\n3090 67000350005   州北里    D06      42         0\n3091 67000350003   塭南里    D06      42         1\n3092 67000350024   公塭里    D06      42         1\n3093 67000350025   南興里    D06      42         2\n3094 67000360012   億載里    D07      42         0\n3095 67000360008   平通里    D07      42         5\n3096 67000350015   海東里    D06      42         2\n3097 67000350032   青草里    D06      43         0\n3098 67000270011   保安里    D32      43         1\n3099 67000370005   赤嵌里    D08      43         5\n3100 67000330004   大成里    D02      43         5\n3101 67000350028   城北里    D06      43         0\n3102 67000350030   城南里    D06      43         0\n3103 67000370009   法華里    D08      43         6\n3104 67000350017   海南里    D06      43         0\n3105 67000350049   國安里    D06      43         1\n3106 67000350018   溪心里    D06      43         3\n3107 67000350020   淵東里    D06      43         1\n3108 67000350029   城中里    D06      43         0\n3109 67000350027   城東里    D06      43         0\n3110 67000350026   學東里    D06      43         2\n3111 67000310013   東灣里    D39      43         3\n3112 67000310015   南灣里    D39      43         2\n3113 67000310016   崑山里    D39      43         4\n3114 67000310012   大灣里    D39      43         2\n3115 67000310001   五王里    D39      43         2\n3116 67000310034   安康里    D39      43        11\n3117 67000310035   西橋里    D39      43        11\n3118 67000310002   網寮里    D39      43         8\n3119 67000310005   大橋里    D39      43        10\n3120 67000310033   東橋里    D39      43         2\n3121 67000310007   烏竹里    D39      43         0\n3122 67000310006   王行里    D39      43         0\n3123 67000320003   大智里    D01      43         3\n3124 67000320041   崇文里    D01      43         2\n3125 67000320035   崇成里    D01      43         6\n3126 67000320012   崇明里    D01      43         1\n3127 67000320028   大福里    D01      43         1\n3128 67000320032   崇德里    D01      43         5\n3129 67000320016   大德里    D01      43         0\n3130 67000320004   崇學里    D01      43         3\n3131 67000320014   和平里    D01      43         9\n3132 67000320019   崇善里    D01      43         6\n3133 67000320015   路東里    D01      43         2\n3134 67000320025   虎尾里    D01      43         8\n3135 67000320029   忠孝里    D01      43         8\n3136 67000320043   裕聖里    D01      43         1\n3137 67000320040   崇信里    D01      43         5\n3138 67000320039   德光里    D01      43         1\n3139 67000320042   復興里    D01      43         7\n3140 67000320013   自強里    D01      43         6\n3141 67000320045   文聖里    D01      43         4\n3142 67000320001   富裕里    D01      43         4\n3143 67000320024   龍山里    D01      43         5\n3144 67000320017   關聖里    D01      43         6\n3145 67000320009   新東里    D01      43        10\n3146 67000320020   富強里    D01      43        15\n3147 67000320005   泉南里    D01      43        10\n3148 67000320034   東聖里    D01      43         6\n3149 67000320011   東安里    D01      43         2\n3150 67000320038   大同里    D01      43         9\n3151 67000320018   衛國里    D01      43         4\n3152 67000320002   裕農里    D01      43         4\n3153 67000320044   南聖里    D01      43         7\n3154 67000320030   崇誨里    D01      43         4\n3155 67000320036   東門里    D01      43         1\n3156 67000320010   中西里    D01      43         3\n3157 67000320031   東明里    D01      43         7\n3158 67000320021   圍下里    D01      43         1\n3159 67000320008   東光里    D01      43         3\n3160 67000320007   後甲里    D01      43        29\n3161 67000320027   莊敬里    D01      43         4\n3162 67000320022   小東里    D01      43        12\n3163 67000320023   大學里    D01      43         2\n3164 67000320037   成大里    D01      43         5\n3165 67000340033   公園里    D04      43         5\n3166 67000340032   中樓里    D04      43         4\n3167 67000340043   賢北里    D04      43         3\n3168 67000340018   大豐里    D04      43         9\n3169 67000340026   大港里    D04      43         8\n3170 67000340023   正覺里    D04      43        14\n3171 67000340042   大和里    D04      43         7\n3172 67000340024   成功里    D04      43        10\n3173 67000330020   佛壇里    D02      43         4\n3174 67000330019   同安里    D02      43         0\n3175 67000330037   松安里    D02      43         2\n3176 67000330038   永寧里    D02      43         0\n3177 67000330016   喜南里    D02      43         0\n3178 67000330014   喜東里    D02      43         1\n3179 67000330015   喜北里    D02      43         5\n3180 67000330029   南都里    D02      43         0\n3181 67000330039   南華里    D02      43         2\n3182 67000330032   建南里    D02      43         3\n3183 67000330026   明興里    D02      43         2\n3184 67000330033   郡南里    D02      43         1\n3185 67000330030   開南里    D02      43        11\n3186 67000330013   明亮里    D02      43         8\n3187 67000330036   鯤鯓里    D02      43         0\n3188 67000330022   大忠里    D02      43         3\n3189 67000330011   光明里    D02      43         5\n3190 67000330034   府南里    D02      43         5\n3191 67000330021   大林里    D02      43         3\n3192 67000330009   國宅里    D02      43         2\n3193 67000330008   田寮里    D02      43         5\n3194 67000330024   新生里    D02      43         7\n3195 67000330001   竹溪里    D02      43         1\n3196 67000330003   明德里    D02      43         0\n3197 67000330025   再興里    D02      43         7\n3198 67000330031   彰南里    D02      43         2\n3199 67000330028   金華里    D02      43         0\n3200 67000330007   新興里    D02      43         8\n3201 67000330035   文南里    D02      43         6\n3202 67000330006   新昌里    D02      43         6\n3203 67000330005   廣州里    D02      43         2\n3204 67000330027   文華里    D02      43         2\n3205 67000350039   溪頂里    D06      43         4\n3206 67000350041   海佃里    D06      43         3\n3207 67000350046   溪東里    D06      43         7\n3208 67000350038   溪北里    D06      43         3\n3209 67000350040   溪墘里    D06      43         0\n3210 67000350050   安富里    D06      43         8\n3211 67000350019   塩田里    D06      43         1\n3212 67000350043   鳳凰里    D06      43         6\n3213 67000350014   公親里    D06      43         0\n3214 67000350033   砂崙里    D06      43         0\n3215 67000360009   文平里    D07      43         4\n3216 67000360010   國平里    D07      43         3\n3217 67000360011   育平里    D07      43         7\n3218 67000360007   華平里    D07      43         7\n3219 67000360006   怡平里    D07      43         2\n3220 67000360005   建平里    D07      43         3\n3221 67000350042   幸福里    D06      43         2\n3222 67000270008   上崙里    D32      43         1\n3223 67000270007   後壁里    D32      43         2\n3224 67000270012   成功里    D32      43         8\n3225 67000270013   仁和里    D32      43         0\n3226 67000270014   仁愛里    D32      43         0\n3227 67000270004   仁德里    D32      43         5\n3228 67000330018   興農里    D02      43         0\n3229 67000330017   省躬里    D02      43         0\n3230 67000270006   新田里    D32      43         0\n3231 67000270003   一甲里    D32      43         4\n3232 67000320026   德高里    D01      43         6\n3233 67000320006   仁和里    D01      43         7\n3234 67000270017   中洲里    D32      43         0\n3235 67000310014   西灣里    D39      43         7\n3236 67000310011   甲頂里    D39      43         4\n3237 67000310003   永康里    D39      43         1\n3238 67000310038   正強里    D39      43        10\n3239 67000360004   漁光里    D07      43         1\n3240 67000360002   金城里    D07      43         1\n3241 67000310036   尚頂里    D39      43         5\n3242 67000310019   復興里    D39      43         9\n3243 67000310022   神洲里    D39      43         0\n3244 67000310020   復國里    D39      43        15\n3245 67000310032   三合里    D39      43         2\n3246 67000310037   復華里    D39      43        17\n3247 67000310030   二王里    D39      43         6\n3248 67000320033   東智里    D01      43         5\n3249 67000330023   大恩里    D02      43         7\n3250 67000370033   西湖里    D08      43         3\n3251 67000360015   平安里    D07      43         2\n3252 67000370034   西賢里    D08      43         5\n3253 67000350036   四草里    D06      43         0\n3254 67000350006   安東里    D06      43         6\n3255 67000350047   淵中里    D06      43         3\n3256 67000350031   城西里    D06      43         0\n3257 67000350022   佃東里    D06      43         2\n3258 67000350010   新順里    D06      43         6\n3259 67000310018   新樹里    D39      43         0\n3260 67000310010   塩行里    D39      43         9\n3261 67000350035   鹿耳里    D06      43         0\n3262 67000350016   海西里    D06      43         2\n3263 67000350023   佃西里    D06      43         0\n3264 67000270019   文賢里    D32      43         0\n3265 67000310041   龍埔里    D39      43         4\n3266 67000310042   永明里    D39      43         1\n3267 67000330040   鹽埕里    D02      43         1\n3268 67000340051   北華里    D04      43         5\n3269 67000340052   華德里    D04      43         1\n3270 67000340053   福德里    D04      43         3\n3271 67000340044   長勝里    D04      43         1\n3272 67000340050   長興里    D04      43         7\n3273 67000340049   大興里    D04      43         8\n3274 67000340048   大光里    D04      43         4\n3275 67000340047   小北里    D04      43        11\n3276 67000340055   雙安里    D04      43         5\n3277 67000340054   立人里    D04      43         9\n3278 67000370042 小西門里    D08      43        12\n3279 67000370044   兌悅里    D08      43         3\n3280 67000370043 五條港里    D08      43         4\n3281 67000370040   南美里    D08      43         3\n3282 67000360017   王城里    D07      43         4\n3283 67000360016   天妃里    D07      43         5\n3284 67000370039   城隍里    D08      43         7\n3285 67000370048   西和里    D08      43         4\n3286 67000340046   北門里    D04      43        15\n3287 67000310029   塩洲里    D39      43         6\n3288 67000340004   東興里    D04      43         8\n3289 67000340019   重興里    D04      43         1\n3290 67000340020   和順里    D04      43         5\n3291 67000340005   力行里    D04      43         3\n3292 67000340041   文成里    D04      43         4\n3293 67000340038   元寶里    D04      43         8\n3294 67000340001   開元里    D04      43         3\n3295 67000340040   成德里    D04      43         2\n3296 67000370016   永華里    D08      43         4\n3297 67000370007   郡王里    D08      43         3\n3298 67000310043   塩興里    D39      43         2\n3299 67000340056   元美里    D04      43         2\n3300 67000370047   南廠里    D08      43         6\n3301 67000370045   淺草里    D08      43         5\n3302 67000370046   府前里    D08      43         1\n3303 67000370041   南門里    D08      43         5\n3304 67000340045   合興里    D04      43         6\n3305 67000310017   北灣里    D39      43         1\n3306 67000310040   北興里    D39      43         6\n3307 67000310027   龍潭里    D39      43         4\n3308 67000310004   埔園里    D39      43         7\n3309 67000310009   三民里    D39      43         0\n3310 67000340008   仁愛里    D04      43         5\n3311 67000340007   振興里    D04      43         7\n3312 67000340039   永祥里    D04      43         6\n3313 67000340025   文元里    D04      43         5\n3314 67000370011   開山里    D08      43         5\n3315 67000370031   大涼里    D08      43         1\n3316 67000370022   藥王里    D08      43         3\n3317 67000370025   光賢里    D08      43         4\n3318 67000270015   二行里    D32      43         0\n3319 67000270016   大甲里    D32      43         0\n3320 67000270005   仁義里    D32      43        14\n3321 67000270002   土庫里    D32      43         1\n3322 67000270001   太子里    D32      43         4\n3323 67000350007   安西里    D06      43         9\n3324 67000350051   大安里    D06      43        13\n3325 67000350037   安和里    D06      43         3\n3326 67000350045   理想里    D06      43         2\n3327 67000350009   安慶里    D06      43         5\n3328 67000350044   梅花里    D06      43        18\n3329 67000350008   頂安里    D06      43         1\n3330 67000350002   安順里    D06      43         3\n3331 67000350012   總頭里    D06      43         1\n3332 67000350011   原佃里    D06      43         2\n3333 67000350001   東和里    D06      43         2\n3334 67000310028   光復里    D39      43         0\n3335 67000310026   勝利里    D39      43         8\n3336 67000310021   建國里    D39      43         2\n3337 67000310031   六合里    D39      43        10\n3338 67000350021   淵西里    D06      43         2\n3339 67000350013   長安里    D06      43         2\n3340 67000310039   中華里    D39      43         3\n3341 67000310024   成功里    D39      43         3\n3342 67000310025   中興里    D39      43         0\n3343 67000310023   西勢里    D39      43         5\n3344 67000310008   蔦松里    D39      43         2\n3345 67000350034   顯宮里    D06      43         0\n3346 67000350004   州南里    D06      43         2\n3347 67000350048   布袋里    D06      43         1\n3348 67000350005   州北里    D06      43         2\n3349 67000350003   塭南里    D06      43         2\n3350 67000350024   公塭里    D06      43         0\n3351 67000350025   南興里    D06      43         2\n3352 67000360012   億載里    D07      43         0\n3353 67000360008   平通里    D07      43         4\n3354 67000350015   海東里    D06      43        10\n3355 67000350032   青草里    D06      44         0\n3356 67000270011   保安里    D32      44         1\n3357 67000370005   赤嵌里    D08      44        11\n3358 67000330004   大成里    D02      44         1\n3359 67000350028   城北里    D06      44         0\n3360 67000350030   城南里    D06      44         1\n3361 67000370009   法華里    D08      44         2\n3362 67000350017   海南里    D06      44         1\n3363 67000350049   國安里    D06      44         2\n3364 67000350018   溪心里    D06      44         3\n3365 67000350020   淵東里    D06      44         0\n3366 67000350029   城中里    D06      44         0\n3367 67000350027   城東里    D06      44         1\n3368 67000350026   學東里    D06      44         1\n3369 67000310013   東灣里    D39      44         1\n3370 67000310015   南灣里    D39      44         0\n3371 67000310016   崑山里    D39      44         5\n3372 67000310012   大灣里    D39      44         5\n3373 67000310001   五王里    D39      44         4\n3374 67000310034   安康里    D39      44         3\n3375 67000310035   西橋里    D39      44         5\n3376 67000310002   網寮里    D39      44         3\n3377 67000310005   大橋里    D39      44        11\n3378 67000310033   東橋里    D39      44         4\n3379 67000310007   烏竹里    D39      44         0\n3380 67000310006   王行里    D39      44         1\n3381 67000320003   大智里    D01      44         5\n3382 67000320041   崇文里    D01      44         3\n3383 67000320035   崇成里    D01      44         3\n3384 67000320012   崇明里    D01      44         5\n3385 67000320028   大福里    D01      44         0\n3386 67000320032   崇德里    D01      44         4\n3387 67000320016   大德里    D01      44         1\n3388 67000320004   崇學里    D01      44         0\n3389 67000320014   和平里    D01      44         9\n3390 67000320019   崇善里    D01      44        12\n3391 67000320015   路東里    D01      44         0\n3392 67000320025   虎尾里    D01      44         6\n3393 67000320029   忠孝里    D01      44         6\n3394 67000320043   裕聖里    D01      44         1\n3395 67000320040   崇信里    D01      44         4\n3396 67000320039   德光里    D01      44         4\n3397 67000320042   復興里    D01      44         5\n3398 67000320013   自強里    D01      44         7\n3399 67000320045   文聖里    D01      44         3\n3400 67000320001   富裕里    D01      44         7\n3401 67000320024   龍山里    D01      44         1\n3402 67000320017   關聖里    D01      44         4\n3403 67000320009   新東里    D01      44         3\n3404 67000320020   富強里    D01      44        15\n3405 67000320005   泉南里    D01      44         4\n3406 67000320034   東聖里    D01      44         2\n3407 67000320011   東安里    D01      44         2\n3408 67000320038   大同里    D01      44         6\n3409 67000320018   衛國里    D01      44         3\n3410 67000320002   裕農里    D01      44         8\n3411 67000320044   南聖里    D01      44         4\n3412 67000320030   崇誨里    D01      44         4\n3413 67000320036   東門里    D01      44         1\n3414 67000320010   中西里    D01      44         3\n3415 67000320031   東明里    D01      44         4\n3416 67000320021   圍下里    D01      44         2\n3417 67000320008   東光里    D01      44         9\n3418 67000320007   後甲里    D01      44        16\n3419 67000320027   莊敬里    D01      44         8\n3420 67000320022   小東里    D01      44        10\n3421 67000320023   大學里    D01      44         9\n3422 67000320037   成大里    D01      44        10\n3423 67000340033   公園里    D04      44         0\n3424 67000340032   中樓里    D04      44         1\n3425 67000340043   賢北里    D04      44        15\n3426 67000340018   大豐里    D04      44         3\n3427 67000340026   大港里    D04      44         7\n3428 67000340023   正覺里    D04      44        18\n3429 67000340042   大和里    D04      44         6\n3430 67000340024   成功里    D04      44         8\n3431 67000330020   佛壇里    D02      44         3\n3432 67000330019   同安里    D02      44         1\n3433 67000330037   松安里    D02      44         2\n3434 67000330038   永寧里    D02      44         1\n3435 67000330016   喜南里    D02      44         0\n3436 67000330014   喜東里    D02      44         1\n3437 67000330015   喜北里    D02      44         1\n3438 67000330029   南都里    D02      44         3\n3439 67000330039   南華里    D02      44         8\n3440 67000330032   建南里    D02      44         4\n3441 67000330026   明興里    D02      44         3\n3442 67000330033   郡南里    D02      44         3\n3443 67000330030   開南里    D02      44        10\n3444 67000330013   明亮里    D02      44         3\n3445 67000330036   鯤鯓里    D02      44         0\n3446 67000330022   大忠里    D02      44         6\n3447 67000330011   光明里    D02      44         4\n3448 67000330034   府南里    D02      44         4\n3449 67000330021   大林里    D02      44         0\n3450 67000330009   國宅里    D02      44         1\n3451 67000330008   田寮里    D02      44         2\n3452 67000330024   新生里    D02      44         1\n3453 67000330001   竹溪里    D02      44         1\n3454 67000330003   明德里    D02      44         0\n3455 67000330025   再興里    D02      44         9\n3456 67000330031   彰南里    D02      44         2\n3457 67000330028   金華里    D02      44         5\n3458 67000330007   新興里    D02      44        11\n3459 67000330035   文南里    D02      44         6\n3460 67000330006   新昌里    D02      44         5\n3461 67000330005   廣州里    D02      44         4\n3462 67000330027   文華里    D02      44         3\n3463 67000350039   溪頂里    D06      44         8\n3464 67000350041   海佃里    D06      44         3\n3465 67000350046   溪東里    D06      44         5\n3466 67000350038   溪北里    D06      44         6\n3467 67000350040   溪墘里    D06      44         0\n3468 67000350050   安富里    D06      44        13\n3469 67000350019   塩田里    D06      44         3\n3470 67000350043   鳳凰里    D06      44         3\n3471 67000350014   公親里    D06      44         0\n3472 67000350033   砂崙里    D06      44         0\n3473 67000360009   文平里    D07      44         3\n3474 67000360010   國平里    D07      44         5\n3475 67000360011   育平里    D07      44         6\n3476 67000360007   華平里    D07      44         3\n3477 67000360006   怡平里    D07      44         4\n3478 67000360005   建平里    D07      44         8\n3479 67000350042   幸福里    D06      44         4\n3480 67000270008   上崙里    D32      44         2\n3481 67000270007   後壁里    D32      44         3\n3482 67000270012   成功里    D32      44         1\n3483 67000270013   仁和里    D32      44         1\n3484 67000270014   仁愛里    D32      44         4\n3485 67000270004   仁德里    D32      44         6\n3486 67000330018   興農里    D02      44         2\n3487 67000330017   省躬里    D02      44         5\n3488 67000270006   新田里    D32      44         1\n3489 67000270003   一甲里    D32      44         7\n3490 67000320026   德高里    D01      44         2\n3491 67000320006   仁和里    D01      44         9\n3492 67000270017   中洲里    D32      44         1\n3493 67000310014   西灣里    D39      44         2\n3494 67000310011   甲頂里    D39      44         2\n3495 67000310003   永康里    D39      44         3\n3496 67000310038   正強里    D39      44         8\n3497 67000360004   漁光里    D07      44         0\n3498 67000360002   金城里    D07      44         5\n3499 67000310036   尚頂里    D39      44         4\n3500 67000310019   復興里    D39      44        10\n3501 67000310022   神洲里    D39      44         0\n3502 67000310020   復國里    D39      44        15\n3503 67000310032   三合里    D39      44         3\n3504 67000310037   復華里    D39      44        17\n3505 67000310030   二王里    D39      44         3\n3506 67000320033   東智里    D01      44         4\n3507 67000330023   大恩里    D02      44        11\n3508 67000370033   西湖里    D08      44         6\n3509 67000360015   平安里    D07      44         6\n3510 67000370034   西賢里    D08      44         4\n3511 67000350036   四草里    D06      44         0\n3512 67000350006   安東里    D06      44         3\n3513 67000350047   淵中里    D06      44         1\n3514 67000350031   城西里    D06      44         0\n3515 67000350022   佃東里    D06      44         1\n3516 67000350010   新順里    D06      44         5\n3517 67000310018   新樹里    D39      44         1\n3518 67000310010   塩行里    D39      44         5\n3519 67000350035   鹿耳里    D06      44         0\n3520 67000350016   海西里    D06      44         5\n3521 67000350023   佃西里    D06      44         0\n3522 67000270019   文賢里    D32      44         0\n3523 67000310041   龍埔里    D39      44         1\n3524 67000310042   永明里    D39      44         0\n3525 67000330040   鹽埕里    D02      44         9\n3526 67000340051   北華里    D04      44         9\n3527 67000340052   華德里    D04      44         1\n3528 67000340053   福德里    D04      44         3\n3529 67000340044   長勝里    D04      44         3\n3530 67000340050   長興里    D04      44         6\n3531 67000340049   大興里    D04      44         3\n3532 67000340048   大光里    D04      44         1\n3533 67000340047   小北里    D04      44        26\n3534 67000340055   雙安里    D04      44         0\n3535 67000340054   立人里    D04      44        12\n3536 67000370042 小西門里    D08      44         8\n3537 67000370044   兌悅里    D08      44         5\n3538 67000370043 五條港里    D08      44         7\n3539 67000370040   南美里    D08      44        11\n3540 67000360017   王城里    D07      44         3\n3541 67000360016   天妃里    D07      44         8\n3542 67000370039   城隍里    D08      44         4\n3543 67000370048   西和里    D08      44         5\n3544 67000340046   北門里    D04      44        12\n3545 67000310029   塩洲里    D39      44         7\n3546 67000340004   東興里    D04      44         2\n3547 67000340019   重興里    D04      44         1\n3548 67000340020   和順里    D04      44         6\n3549 67000340005   力行里    D04      44         4\n3550 67000340041   文成里    D04      44         3\n3551 67000340038   元寶里    D04      44         3\n3552 67000340001   開元里    D04      44         1\n3553 67000340040   成德里    D04      44         4\n3554 67000370016   永華里    D08      44         3\n3555 67000370007   郡王里    D08      44         1\n3556 67000310043   塩興里    D39      44         3\n3557 67000340056   元美里    D04      44         6\n3558 67000370047   南廠里    D08      44         2\n3559 67000370045   淺草里    D08      44         3\n3560 67000370046   府前里    D08      44         1\n3561 67000370041   南門里    D08      44         3\n3562 67000340045   合興里    D04      44         4\n3563 67000310017   北灣里    D39      44         3\n3564 67000310040   北興里    D39      44         0\n3565 67000310027   龍潭里    D39      44         5\n3566 67000310004   埔園里    D39      44        11\n3567 67000310009   三民里    D39      44         0\n3568 67000340008   仁愛里    D04      44         4\n3569 67000340007   振興里    D04      44         6\n3570 67000340039   永祥里    D04      44        13\n3571 67000340025   文元里    D04      44         6\n3572 67000370011   開山里    D08      44         5\n3573 67000370031   大涼里    D08      44         2\n3574 67000370022   藥王里    D08      44         6\n3575 67000370025   光賢里    D08      44         2\n3576 67000270015   二行里    D32      44         1\n3577 67000270016   大甲里    D32      44         1\n3578 67000270005   仁義里    D32      44        10\n3579 67000270002   土庫里    D32      44         0\n3580 67000270001   太子里    D32      44         5\n3581 67000350007   安西里    D06      44         9\n3582 67000350051   大安里    D06      44         6\n3583 67000350037   安和里    D06      44         7\n3584 67000350045   理想里    D06      44         6\n3585 67000350009   安慶里    D06      44         2\n3586 67000350044   梅花里    D06      44         5\n3587 67000350008   頂安里    D06      44         2\n3588 67000350002   安順里    D06      44         1\n3589 67000350012   總頭里    D06      44         0\n3590 67000350011   原佃里    D06      44         0\n3591 67000350001   東和里    D06      44         1\n3592 67000310028   光復里    D39      44         1\n3593 67000310026   勝利里    D39      44         6\n3594 67000310021   建國里    D39      44         2\n3595 67000310031   六合里    D39      44         8\n3596 67000350021   淵西里    D06      44         2\n3597 67000350013   長安里    D06      44         1\n3598 67000310039   中華里    D39      44         3\n3599 67000310024   成功里    D39      44         2\n3600 67000310025   中興里    D39      44         0\n3601 67000310023   西勢里    D39      44         0\n3602 67000310008   蔦松里    D39      44         1\n3603 67000350034   顯宮里    D06      44         0\n3604 67000350004   州南里    D06      44         0\n3605 67000350048   布袋里    D06      44         0\n3606 67000350005   州北里    D06      44         0\n3607 67000350003   塭南里    D06      44         0\n3608 67000350024   公塭里    D06      44         1\n3609 67000350025   南興里    D06      44         0\n3610 67000360012   億載里    D07      44         2\n3611 67000360008   平通里    D07      44         4\n3612 67000350015   海東里    D06      44         7\n3613 67000350032   青草里    D06      45         0\n3614 67000270011   保安里    D32      45         0\n3615 67000370005   赤嵌里    D08      45         9\n3616 67000330004   大成里    D02      45         2\n3617 67000350028   城北里    D06      45         0\n3618 67000350030   城南里    D06      45         0\n3619 67000370009   法華里    D08      45         1\n3620 67000350017   海南里    D06      45         2\n3621 67000350049   國安里    D06      45         2\n3622 67000350018   溪心里    D06      45         3\n3623 67000350020   淵東里    D06      45         1\n3624 67000350029   城中里    D06      45         0\n3625 67000350027   城東里    D06      45         0\n3626 67000350026   學東里    D06      45         1\n3627 67000310013   東灣里    D39      45         1\n3628 67000310015   南灣里    D39      45         3\n3629 67000310016   崑山里    D39      45         0\n3630 67000310012   大灣里    D39      45         1\n3631 67000310001   五王里    D39      45         6\n3632 67000310034   安康里    D39      45         4\n3633 67000310035   西橋里    D39      45         2\n3634 67000310002   網寮里    D39      45         1\n3635 67000310005   大橋里    D39      45         3\n3636 67000310033   東橋里    D39      45         2\n3637 67000310007   烏竹里    D39      45         0\n3638 67000310006   王行里    D39      45         0\n3639 67000320003   大智里    D01      45         1\n3640 67000320041   崇文里    D01      45         6\n3641 67000320035   崇成里    D01      45         1\n3642 67000320012   崇明里    D01      45         2\n3643 67000320028   大福里    D01      45         0\n3644 67000320032   崇德里    D01      45         5\n3645 67000320016   大德里    D01      45         0\n3646 67000320004   崇學里    D01      45         2\n3647 67000320014   和平里    D01      45        11\n3648 67000320019   崇善里    D01      45         6\n3649 67000320015   路東里    D01      45         0\n3650 67000320025   虎尾里    D01      45         9\n3651 67000320029   忠孝里    D01      45         1\n3652 67000320043   裕聖里    D01      45         2\n3653 67000320040   崇信里    D01      45         7\n3654 67000320039   德光里    D01      45         1\n3655 67000320042   復興里    D01      45         4\n3656 67000320013   自強里    D01      45         4\n3657 67000320045   文聖里    D01      45         1\n3658 67000320001   富裕里    D01      45         1\n3659 67000320024   龍山里    D01      45         0\n3660 67000320017   關聖里    D01      45         2\n3661 67000320009   新東里    D01      45         3\n3662 67000320020   富強里    D01      45         4\n3663 67000320005   泉南里    D01      45         9\n3664 67000320034   東聖里    D01      45         3\n3665 67000320011   東安里    D01      45         0\n3666 67000320038   大同里    D01      45         2\n3667 67000320018   衛國里    D01      45         1\n3668 67000320002   裕農里    D01      45         1\n3669 67000320044   南聖里    D01      45         1\n3670 67000320030   崇誨里    D01      45         2\n3671 67000320036   東門里    D01      45         1\n3672 67000320010   中西里    D01      45         2\n3673 67000320031   東明里    D01      45         1\n3674 67000320021   圍下里    D01      45         3\n3675 67000320008   東光里    D01      45         5\n3676 67000320007   後甲里    D01      45         3\n3677 67000320027   莊敬里    D01      45         4\n3678 67000320022   小東里    D01      45         4\n3679 67000320023   大學里    D01      45         2\n3680 67000320037   成大里    D01      45         2\n3681 67000340033   公園里    D04      45         3\n3682 67000340032   中樓里    D04      45         0\n3683 67000340043   賢北里    D04      45        14\n3684 67000340018   大豐里    D04      45         3\n3685 67000340026   大港里    D04      45         7\n3686 67000340023   正覺里    D04      45         7\n3687 67000340042   大和里    D04      45         5\n3688 67000340024   成功里    D04      45         5\n3689 67000330020   佛壇里    D02      45         3\n3690 67000330019   同安里    D02      45         1\n3691 67000330037   松安里    D02      45         1\n3692 67000330038   永寧里    D02      45         1\n3693 67000330016   喜南里    D02      45         1\n3694 67000330014   喜東里    D02      45         1\n3695 67000330015   喜北里    D02      45         0\n3696 67000330029   南都里    D02      45         2\n3697 67000330039   南華里    D02      45         0\n3698 67000330032   建南里    D02      45         6\n3699 67000330026   明興里    D02      45         4\n3700 67000330033   郡南里    D02      45         1\n3701 67000330030   開南里    D02      45        10\n3702 67000330013   明亮里    D02      45         2\n3703 67000330036   鯤鯓里    D02      45         3\n3704 67000330022   大忠里    D02      45         3\n3705 67000330011   光明里    D02      45         1\n3706 67000330034   府南里    D02      45         5\n3707 67000330021   大林里    D02      45         1\n3708 67000330009   國宅里    D02      45         0\n3709 67000330008   田寮里    D02      45         2\n3710 67000330024   新生里    D02      45         1\n3711 67000330001   竹溪里    D02      45         0\n3712 67000330003   明德里    D02      45         0\n3713 67000330025   再興里    D02      45         2\n3714 67000330031   彰南里    D02      45         0\n3715 67000330028   金華里    D02      45         8\n3716 67000330007   新興里    D02      45         5\n3717 67000330035   文南里    D02      45         3\n3718 67000330006   新昌里    D02      45         8\n3719 67000330005   廣州里    D02      45         2\n3720 67000330027   文華里    D02      45         4\n3721 67000350039   溪頂里    D06      45         5\n3722 67000350041   海佃里    D06      45         1\n3723 67000350046   溪東里    D06      45         4\n3724 67000350038   溪北里    D06      45         5\n3725 67000350040   溪墘里    D06      45         1\n3726 67000350050   安富里    D06      45         1\n3727 67000350019   塩田里    D06      45         0\n3728 67000350043   鳳凰里    D06      45         2\n3729 67000350014   公親里    D06      45         1\n3730 67000350033   砂崙里    D06      45         0\n3731 67000360009   文平里    D07      45         3\n3732 67000360010   國平里    D07      45         2\n3733 67000360011   育平里    D07      45         1\n3734 67000360007   華平里    D07      45         9\n3735 67000360006   怡平里    D07      45         5\n3736 67000360005   建平里    D07      45         2\n3737 67000350042   幸福里    D06      45         2\n3738 67000270008   上崙里    D32      45         1\n3739 67000270007   後壁里    D32      45         4\n3740 67000270012   成功里    D32      45         2\n3741 67000270013   仁和里    D32      45         0\n3742 67000270014   仁愛里    D32      45         0\n3743 67000270004   仁德里    D32      45         4\n3744 67000330018   興農里    D02      45         2\n3745 67000330017   省躬里    D02      45         2\n3746 67000270006   新田里    D32      45         0\n3747 67000270003   一甲里    D32      45         4\n3748 67000320026   德高里    D01      45         5\n3749 67000320006   仁和里    D01      45         5\n3750 67000270017   中洲里    D32      45         1\n3751 67000310014   西灣里    D39      45         3\n3752 67000310011   甲頂里    D39      45         2\n3753 67000310003   永康里    D39      45         2\n3754 67000310038   正強里    D39      45         4\n3755 67000360004   漁光里    D07      45         0\n3756 67000360002   金城里    D07      45         3\n3757 67000310036   尚頂里    D39      45         3\n3758 67000310019   復興里    D39      45         5\n3759 67000310022   神洲里    D39      45         0\n3760 67000310020   復國里    D39      45        11\n3761 67000310032   三合里    D39      45         4\n3762 67000310037   復華里    D39      45         7\n3763 67000310030   二王里    D39      45         6\n3764 67000320033   東智里    D01      45         3\n3765 67000330023   大恩里    D02      45         5\n3766 67000370033   西湖里    D08      45         3\n3767 67000360015   平安里    D07      45         1\n3768 67000370034   西賢里    D08      45         4\n3769 67000350036   四草里    D06      45         0\n3770 67000350006   安東里    D06      45         5\n3771 67000350047   淵中里    D06      45         2\n3772 67000350031   城西里    D06      45         1\n3773 67000350022   佃東里    D06      45         0\n3774 67000350010   新順里    D06      45         1\n3775 67000310018   新樹里    D39      45         0\n3776 67000310010   塩行里    D39      45         7\n3777 67000350035   鹿耳里    D06      45         0\n3778 67000350016   海西里    D06      45         0\n3779 67000350023   佃西里    D06      45         0\n3780 67000270019   文賢里    D32      45         0\n3781 67000310041   龍埔里    D39      45         0\n3782 67000310042   永明里    D39      45         2\n3783 67000330040   鹽埕里    D02      45         0\n3784 67000340051   北華里    D04      45         4\n3785 67000340052   華德里    D04      45         2\n3786 67000340053   福德里    D04      45         4\n3787 67000340044   長勝里    D04      45         3\n3788 67000340050   長興里    D04      45         3\n3789 67000340049   大興里    D04      45         4\n3790 67000340048   大光里    D04      45         3\n3791 67000340047   小北里    D04      45        12\n3792 67000340055   雙安里    D04      45         1\n3793 67000340054   立人里    D04      45         6\n3794 67000370042 小西門里    D08      45         6\n3795 67000370044   兌悅里    D08      45         4\n3796 67000370043 五條港里    D08      45         2\n3797 67000370040   南美里    D08      45         7\n3798 67000360017   王城里    D07      45         2\n3799 67000360016   天妃里    D07      45         5\n3800 67000370039   城隍里    D08      45         3\n3801 67000370048   西和里    D08      45         3\n3802 67000340046   北門里    D04      45        10\n3803 67000310029   塩洲里    D39      45         1\n3804 67000340004   東興里    D04      45         1\n3805 67000340019   重興里    D04      45         1\n3806 67000340020   和順里    D04      45         6\n3807 67000340005   力行里    D04      45         8\n3808 67000340041   文成里    D04      45         1\n3809 67000340038   元寶里    D04      45         4\n3810 67000340001   開元里    D04      45         3\n3811 67000340040   成德里    D04      45         7\n3812 67000370016   永華里    D08      45         4\n3813 67000370007   郡王里    D08      45         3\n3814 67000310043   塩興里    D39      45         2\n3815 67000340056   元美里    D04      45         0\n3816 67000370047   南廠里    D08      45         6\n3817 67000370045   淺草里    D08      45         4\n3818 67000370046   府前里    D08      45         2\n3819 67000370041   南門里    D08      45         4\n3820 67000340045   合興里    D04      45         6\n3821 67000310017   北灣里    D39      45         0\n3822 67000310040   北興里    D39      45         0\n3823 67000310027   龍潭里    D39      45         5\n3824 67000310004   埔園里    D39      45         3\n3825 67000310009   三民里    D39      45         0\n3826 67000340008   仁愛里    D04      45         6\n3827 67000340007   振興里    D04      45         2\n3828 67000340039   永祥里    D04      45        13\n3829 67000340025   文元里    D04      45         4\n3830 67000370011   開山里    D08      45         5\n3831 67000370031   大涼里    D08      45         0\n3832 67000370022   藥王里    D08      45         6\n3833 67000370025   光賢里    D08      45         2\n3834 67000270015   二行里    D32      45         1\n3835 67000270016   大甲里    D32      45         0\n3836 67000270005   仁義里    D32      45         8\n3837 67000270002   土庫里    D32      45         1\n3838 67000270001   太子里    D32      45         1\n3839 67000350007   安西里    D06      45         2\n3840 67000350051   大安里    D06      45         7\n3841 67000350037   安和里    D06      45         8\n3842 67000350045   理想里    D06      45         1\n3843 67000350009   安慶里    D06      45         6\n3844 67000350044   梅花里    D06      45         6\n3845 67000350008   頂安里    D06      45         3\n3846 67000350002   安順里    D06      45         1\n3847 67000350012   總頭里    D06      45         2\n3848 67000350011   原佃里    D06      45         0\n3849 67000350001   東和里    D06      45         0\n3850 67000310028   光復里    D39      45         0\n3851 67000310026   勝利里    D39      45         4\n3852 67000310021   建國里    D39      45         2\n3853 67000310031   六合里    D39      45         6\n3854 67000350021   淵西里    D06      45         3\n3855 67000350013   長安里    D06      45         1\n3856 67000310039   中華里    D39      45         2\n3857 67000310024   成功里    D39      45         2\n3858 67000310025   中興里    D39      45         1\n3859 67000310023   西勢里    D39      45         5\n3860 67000310008   蔦松里    D39      45         0\n3861 67000350034   顯宮里    D06      45         0\n3862 67000350004   州南里    D06      45         2\n3863 67000350048   布袋里    D06      45         0\n3864 67000350005   州北里    D06      45         4\n3865 67000350003   塭南里    D06      45         0\n3866 67000350024   公塭里    D06      45         1\n3867 67000350025   南興里    D06      45         1\n3868 67000360012   億載里    D07      45         1\n3869 67000360008   平通里    D07      45         3\n3870 67000350015   海東里    D06      45         8\n3871 67000350032   青草里    D06      46         0\n3872 67000270011   保安里    D32      46         0\n3873 67000370005   赤嵌里    D08      46         9\n3874 67000330004   大成里    D02      46         1\n3875 67000350028   城北里    D06      46         0\n3876 67000350030   城南里    D06      46         0\n3877 67000370009   法華里    D08      46         3\n3878 67000350017   海南里    D06      46         0\n3879 67000350049   國安里    D06      46         0\n3880 67000350018   溪心里    D06      46         2\n3881 67000350020   淵東里    D06      46         1\n3882 67000350029   城中里    D06      46         0\n3883 67000350027   城東里    D06      46         0\n3884 67000350026   學東里    D06      46         0\n3885 67000310013   東灣里    D39      46         0\n3886 67000310015   南灣里    D39      46         2\n3887 67000310016   崑山里    D39      46         3\n3888 67000310012   大灣里    D39      46         1\n3889 67000310001   五王里    D39      46         2\n3890 67000310034   安康里    D39      46         0\n3891 67000310035   西橋里    D39      46         4\n3892 67000310002   網寮里    D39      46         1\n3893 67000310005   大橋里    D39      46         2\n3894 67000310033   東橋里    D39      46         0\n3895 67000310007   烏竹里    D39      46         0\n3896 67000310006   王行里    D39      46         0\n3897 67000320003   大智里    D01      46         1\n3898 67000320041   崇文里    D01      46         2\n3899 67000320035   崇成里    D01      46         0\n3900 67000320012   崇明里    D01      46         2\n3901 67000320028   大福里    D01      46         0\n3902 67000320032   崇德里    D01      46         1\n3903 67000320016   大德里    D01      46         0\n3904 67000320004   崇學里    D01      46         0\n3905 67000320014   和平里    D01      46         4\n3906 67000320019   崇善里    D01      46         4\n3907 67000320015   路東里    D01      46         0\n3908 67000320025   虎尾里    D01      46         4\n3909 67000320029   忠孝里    D01      46         0\n3910 67000320043   裕聖里    D01      46         1\n3911 67000320040   崇信里    D01      46         2\n3912 67000320039   德光里    D01      46         1\n3913 67000320042   復興里    D01      46         2\n3914 67000320013   自強里    D01      46         3\n3915 67000320045   文聖里    D01      46         3\n3916 67000320001   富裕里    D01      46         2\n3917 67000320024   龍山里    D01      46         1\n3918 67000320017   關聖里    D01      46         1\n3919 67000320009   新東里    D01      46         1\n3920 67000320020   富強里    D01      46         6\n3921 67000320005   泉南里    D01      46         4\n3922 67000320034   東聖里    D01      46         1\n3923 67000320011   東安里    D01      46         0\n3924 67000320038   大同里    D01      46         1\n3925 67000320018   衛國里    D01      46         1\n3926 67000320002   裕農里    D01      46         3\n3927 67000320044   南聖里    D01      46         3\n3928 67000320030   崇誨里    D01      46         4\n3929 67000320036   東門里    D01      46         1\n3930 67000320010   中西里    D01      46         1\n3931 67000320031   東明里    D01      46         4\n3932 67000320021   圍下里    D01      46         0\n3933 67000320008   東光里    D01      46         2\n3934 67000320007   後甲里    D01      46         9\n3935 67000320027   莊敬里    D01      46         4\n3936 67000320022   小東里    D01      46         5\n3937 67000320023   大學里    D01      46         0\n3938 67000320037   成大里    D01      46         4\n3939 67000340033   公園里    D04      46         1\n3940 67000340032   中樓里    D04      46         1\n3941 67000340043   賢北里    D04      46         7\n3942 67000340018   大豐里    D04      46         5\n3943 67000340026   大港里    D04      46         4\n3944 67000340023   正覺里    D04      46         7\n3945 67000340042   大和里    D04      46         2\n3946 67000340024   成功里    D04      46         4\n3947 67000330020   佛壇里    D02      46         5\n3948 67000330019   同安里    D02      46         1\n3949 67000330037   松安里    D02      46         2\n3950 67000330038   永寧里    D02      46         1\n3951 67000330016   喜南里    D02      46         2\n3952 67000330014   喜東里    D02      46         1\n3953 67000330015   喜北里    D02      46         1\n3954 67000330029   南都里    D02      46         1\n3955 67000330039   南華里    D02      46         0\n3956 67000330032   建南里    D02      46         3\n3957 67000330026   明興里    D02      46         1\n3958 67000330033   郡南里    D02      46         4\n3959 67000330030   開南里    D02      46         4\n3960 67000330013   明亮里    D02      46         3\n3961 67000330036   鯤鯓里    D02      46         0\n3962 67000330022   大忠里    D02      46         1\n3963 67000330011   光明里    D02      46         0\n3964 67000330034   府南里    D02      46         1\n3965 67000330021   大林里    D02      46         0\n3966 67000330009   國宅里    D02      46         0\n3967 67000330008   田寮里    D02      46         1\n3968 67000330024   新生里    D02      46         1\n3969 67000330001   竹溪里    D02      46         1\n3970 67000330003   明德里    D02      46         0\n3971 67000330025   再興里    D02      46         3\n3972 67000330031   彰南里    D02      46         2\n3973 67000330028   金華里    D02      46         3\n3974 67000330007   新興里    D02      46         3\n3975 67000330035   文南里    D02      46         4\n3976 67000330006   新昌里    D02      46         3\n3977 67000330005   廣州里    D02      46         4\n3978 67000330027   文華里    D02      46         4\n3979 67000350039   溪頂里    D06      46         1\n3980 67000350041   海佃里    D06      46         0\n3981 67000350046   溪東里    D06      46         0\n3982 67000350038   溪北里    D06      46         3\n3983 67000350040   溪墘里    D06      46         1\n3984 67000350050   安富里    D06      46         1\n3985 67000350019   塩田里    D06      46         0\n3986 67000350043   鳳凰里    D06      46         1\n3987 67000350014   公親里    D06      46         0\n3988 67000350033   砂崙里    D06      46         1\n3989 67000360009   文平里    D07      46         1\n3990 67000360010   國平里    D07      46         0\n3991 67000360011   育平里    D07      46         3\n3992 67000360007   華平里    D07      46         3\n3993 67000360006   怡平里    D07      46         1\n3994 67000360005   建平里    D07      46         1\n3995 67000350042   幸福里    D06      46         0\n3996 67000270008   上崙里    D32      46         0\n3997 67000270007   後壁里    D32      46         0\n3998 67000270012   成功里    D32      46         2\n3999 67000270013   仁和里    D32      46         0\n4000 67000270014   仁愛里    D32      46         0\n4001 67000270004   仁德里    D32      46         7\n4002 67000330018   興農里    D02      46         1\n4003 67000330017   省躬里    D02      46         1\n4004 67000270006   新田里    D32      46         2\n4005 67000270003   一甲里    D32      46         1\n4006 67000320026   德高里    D01      46         4\n4007 67000320006   仁和里    D01      46         5\n4008 67000270017   中洲里    D32      46         0\n4009 67000310014   西灣里    D39      46         1\n4010 67000310011   甲頂里    D39      46         3\n4011 67000310003   永康里    D39      46         3\n4012 67000310038   正強里    D39      46         2\n4013 67000360004   漁光里    D07      46         1\n4014 67000360002   金城里    D07      46         0\n4015 67000310036   尚頂里    D39      46         3\n4016 67000310019   復興里    D39      46         2\n4017 67000310022   神洲里    D39      46         1\n4018 67000310020   復國里    D39      46         0\n4019 67000310032   三合里    D39      46         0\n4020 67000310037   復華里    D39      46         1\n4021 67000310030   二王里    D39      46         2\n4022 67000320033   東智里    D01      46         6\n4023 67000330023   大恩里    D02      46         2\n4024 67000370033   西湖里    D08      46         2\n4025 67000360015   平安里    D07      46         2\n4026 67000370034   西賢里    D08      46         3\n4027 67000350036   四草里    D06      46         0\n4028 67000350006   安東里    D06      46         1\n4029 67000350047   淵中里    D06      46         1\n4030 67000350031   城西里    D06      46         0\n4031 67000350022   佃東里    D06      46         0\n4032 67000350010   新順里    D06      46         2\n4033 67000310018   新樹里    D39      46         0\n4034 67000310010   塩行里    D39      46         4\n4035 67000350035   鹿耳里    D06      46         0\n4036 67000350016   海西里    D06      46         2\n4037 67000350023   佃西里    D06      46         0\n4038 67000270019   文賢里    D32      46         0\n4039 67000310041   龍埔里    D39      46         3\n4040 67000310042   永明里    D39      46         1\n4041 67000330040   鹽埕里    D02      46         3\n4042 67000340051   北華里    D04      46         3\n4043 67000340052   華德里    D04      46         5\n4044 67000340053   福德里    D04      46         1\n4045 67000340044   長勝里    D04      46         2\n4046 67000340050   長興里    D04      46         2\n4047 67000340049   大興里    D04      46         1\n4048 67000340048   大光里    D04      46         2\n4049 67000340047   小北里    D04      46         4\n4050 67000340055   雙安里    D04      46         1\n4051 67000340054   立人里    D04      46         4\n4052 67000370042 小西門里    D08      46         6\n4053 67000370044   兌悅里    D08      46         0\n4054 67000370043 五條港里    D08      46         3\n4055 67000370040   南美里    D08      46         1\n4056 67000360017   王城里    D07      46         0\n4057 67000360016   天妃里    D07      46         2\n4058 67000370039   城隍里    D08      46         0\n4059 67000370048   西和里    D08      46         1\n4060 67000340046   北門里    D04      46         3\n4061 67000310029   塩洲里    D39      46         2\n4062 67000340004   東興里    D04      46         3\n4063 67000340019   重興里    D04      46         4\n4064 67000340020   和順里    D04      46         2\n4065 67000340005   力行里    D04      46         2\n4066 67000340041   文成里    D04      46         2\n4067 67000340038   元寶里    D04      46         3\n4068 67000340001   開元里    D04      46         4\n4069 67000340040   成德里    D04      46         9\n4070 67000370016   永華里    D08      46         3\n4071 67000370007   郡王里    D08      46         1\n4072 67000310043   塩興里    D39      46         2\n4073 67000340056   元美里    D04      46         2\n4074 67000370047   南廠里    D08      46         3\n4075 67000370045   淺草里    D08      46         1\n4076 67000370046   府前里    D08      46         2\n4077 67000370041   南門里    D08      46         0\n4078 67000340045   合興里    D04      46         1\n4079 67000310017   北灣里    D39      46         0\n4080 67000310040   北興里    D39      46         1\n4081 67000310027   龍潭里    D39      46         0\n4082 67000310004   埔園里    D39      46         1\n4083 67000310009   三民里    D39      46         0\n4084 67000340008   仁愛里    D04      46         0\n4085 67000340007   振興里    D04      46         1\n4086 67000340039   永祥里    D04      46         1\n4087 67000340025   文元里    D04      46         4\n4088 67000370011   開山里    D08      46         0\n4089 67000370031   大涼里    D08      46         3\n4090 67000370022   藥王里    D08      46         3\n4091 67000370025   光賢里    D08      46         2\n4092 67000270015   二行里    D32      46         0\n4093 67000270016   大甲里    D32      46         1\n4094 67000270005   仁義里    D32      46        16\n4095 67000270002   土庫里    D32      46         1\n4096 67000270001   太子里    D32      46         1\n4097 67000350007   安西里    D06      46         0\n4098 67000350051   大安里    D06      46         4\n4099 67000350037   安和里    D06      46         1\n4100 67000350045   理想里    D06      46         2\n4101 67000350009   安慶里    D06      46         7\n4102 67000350044   梅花里    D06      46         1\n4103 67000350008   頂安里    D06      46         2\n4104 67000350002   安順里    D06      46         1\n4105 67000350012   總頭里    D06      46         2\n4106 67000350011   原佃里    D06      46         1\n4107 67000350001   東和里    D06      46         0\n4108 67000310028   光復里    D39      46         0\n4109 67000310026   勝利里    D39      46         5\n4110 67000310021   建國里    D39      46         3\n4111 67000310031   六合里    D39      46         1\n4112 67000350021   淵西里    D06      46         0\n4113 67000350013   長安里    D06      46         0\n4114 67000310039   中華里    D39      46         2\n4115 67000310024   成功里    D39      46         2\n4116 67000310025   中興里    D39      46         1\n4117 67000310023   西勢里    D39      46         0\n4118 67000310008   蔦松里    D39      46         0\n4119 67000350034   顯宮里    D06      46         0\n4120 67000350004   州南里    D06      46         0\n4121 67000350048   布袋里    D06      46         0\n4122 67000350005   州北里    D06      46         0\n4123 67000350003   塭南里    D06      46         0\n4124 67000350024   公塭里    D06      46         0\n4125 67000350025   南興里    D06      46         0\n4126 67000360012   億載里    D07      46         0\n4127 67000360008   平通里    D07      46         1\n4128 67000350015   海東里    D06      46         4\n4129 67000350032   青草里    D06      47         0\n4130 67000270011   保安里    D32      47         0\n4131 67000370005   赤嵌里    D08      47         5\n4132 67000330004   大成里    D02      47         0\n4133 67000350028   城北里    D06      47         0\n4134 67000350030   城南里    D06      47         0\n4135 67000370009   法華里    D08      47         1\n4136 67000350017   海南里    D06      47         0\n4137 67000350049   國安里    D06      47         0\n4138 67000350018   溪心里    D06      47         1\n4139 67000350020   淵東里    D06      47         0\n4140 67000350029   城中里    D06      47         0\n4141 67000350027   城東里    D06      47         0\n4142 67000350026   學東里    D06      47         0\n4143 67000310013   東灣里    D39      47         2\n4144 67000310015   南灣里    D39      47         0\n4145 67000310016   崑山里    D39      47         7\n4146 67000310012   大灣里    D39      47         0\n4147 67000310001   五王里    D39      47         2\n4148 67000310034   安康里    D39      47         5\n4149 67000310035   西橋里    D39      47         1\n4150 67000310002   網寮里    D39      47         3\n4151 67000310005   大橋里    D39      47         2\n4152 67000310033   東橋里    D39      47         0\n4153 67000310007   烏竹里    D39      47         0\n4154 67000310006   王行里    D39      47         0\n4155 67000320003   大智里    D01      47         2\n4156 67000320041   崇文里    D01      47         0\n4157 67000320035   崇成里    D01      47         0\n4158 67000320012   崇明里    D01      47         1\n4159 67000320028   大福里    D01      47         0\n4160 67000320032   崇德里    D01      47         1\n4161 67000320016   大德里    D01      47         0\n4162 67000320004   崇學里    D01      47         0\n4163 67000320014   和平里    D01      47         1\n4164 67000320019   崇善里    D01      47         2\n4165 67000320015   路東里    D01      47         1\n4166 67000320025   虎尾里    D01      47         2\n4167 67000320029   忠孝里    D01      47         1\n4168 67000320043   裕聖里    D01      47         0\n4169 67000320040   崇信里    D01      47         0\n4170 67000320039   德光里    D01      47         0\n4171 67000320042   復興里    D01      47         1\n4172 67000320013   自強里    D01      47         2\n4173 67000320045   文聖里    D01      47         1\n4174 67000320001   富裕里    D01      47         3\n4175 67000320024   龍山里    D01      47         1\n4176 67000320017   關聖里    D01      47         1\n4177 67000320009   新東里    D01      47         1\n4178 67000320020   富強里    D01      47         4\n4179 67000320005   泉南里    D01      47         4\n4180 67000320034   東聖里    D01      47         5\n4181 67000320011   東安里    D01      47         0\n4182 67000320038   大同里    D01      47         0\n4183 67000320018   衛國里    D01      47         0\n4184 67000320002   裕農里    D01      47         1\n4185 67000320044   南聖里    D01      47         0\n4186 67000320030   崇誨里    D01      47         0\n4187 67000320036   東門里    D01      47         1\n4188 67000320010   中西里    D01      47         0\n4189 67000320031   東明里    D01      47         0\n4190 67000320021   圍下里    D01      47         1\n4191 67000320008   東光里    D01      47         1\n4192 67000320007   後甲里    D01      47         4\n4193 67000320027   莊敬里    D01      47         4\n4194 67000320022   小東里    D01      47         3\n4195 67000320023   大學里    D01      47         1\n4196 67000320037   成大里    D01      47         0\n4197 67000340033   公園里    D04      47         0\n4198 67000340032   中樓里    D04      47         0\n4199 67000340043   賢北里    D04      47         1\n4200 67000340018   大豐里    D04      47         0\n4201 67000340026   大港里    D04      47         2\n4202 67000340023   正覺里    D04      47         4\n4203 67000340042   大和里    D04      47         0\n4204 67000340024   成功里    D04      47         3\n4205 67000330020   佛壇里    D02      47         0\n4206 67000330019   同安里    D02      47         2\n4207 67000330037   松安里    D02      47         2\n4208 67000330038   永寧里    D02      47         0\n4209 67000330016   喜南里    D02      47         0\n4210 67000330014   喜東里    D02      47         0\n4211 67000330015   喜北里    D02      47         0\n4212 67000330029   南都里    D02      47         1\n4213 67000330039   南華里    D02      47         0\n4214 67000330032   建南里    D02      47         1\n4215 67000330026   明興里    D02      47         0\n4216 67000330033   郡南里    D02      47         0\n4217 67000330030   開南里    D02      47         1\n4218 67000330013   明亮里    D02      47         0\n4219 67000330036   鯤鯓里    D02      47         0\n4220 67000330022   大忠里    D02      47         4\n4221 67000330011   光明里    D02      47         1\n4222 67000330034   府南里    D02      47         2\n4223 67000330021   大林里    D02      47         2\n4224 67000330009   國宅里    D02      47         1\n4225 67000330008   田寮里    D02      47         2\n4226 67000330024   新生里    D02      47         0\n4227 67000330001   竹溪里    D02      47         0\n4228 67000330003   明德里    D02      47         1\n4229 67000330025   再興里    D02      47         2\n4230 67000330031   彰南里    D02      47         0\n4231 67000330028   金華里    D02      47         5\n4232 67000330007   新興里    D02      47         2\n4233 67000330035   文南里    D02      47         5\n4234 67000330006   新昌里    D02      47         1\n4235 67000330005   廣州里    D02      47         0\n4236 67000330027   文華里    D02      47         0\n4237 67000350039   溪頂里    D06      47         1\n4238 67000350041   海佃里    D06      47         0\n4239 67000350046   溪東里    D06      47         0\n4240 67000350038   溪北里    D06      47         1\n4241 67000350040   溪墘里    D06      47         0\n4242 67000350050   安富里    D06      47         0\n4243 67000350019   塩田里    D06      47         0\n4244 67000350043   鳳凰里    D06      47         0\n4245 67000350014   公親里    D06      47         0\n4246 67000350033   砂崙里    D06      47         0\n4247 67000360009   文平里    D07      47         0\n4248 67000360010   國平里    D07      47         0\n4249 67000360011   育平里    D07      47         1\n4250 67000360007   華平里    D07      47         1\n4251 67000360006   怡平里    D07      47         2\n4252 67000360005   建平里    D07      47         1\n4253 67000350042   幸福里    D06      47         0\n4254 67000270008   上崙里    D32      47         1\n4255 67000270007   後壁里    D32      47         1\n4256 67000270012   成功里    D32      47         1\n4257 67000270013   仁和里    D32      47         1\n4258 67000270014   仁愛里    D32      47         0\n4259 67000270004   仁德里    D32      47         2\n4260 67000330018   興農里    D02      47         0\n4261 67000330017   省躬里    D02      47         0\n4262 67000270006   新田里    D32      47         1\n4263 67000270003   一甲里    D32      47         1\n4264 67000320026   德高里    D01      47         1\n4265 67000320006   仁和里    D01      47         5\n4266 67000270017   中洲里    D32      47         0\n4267 67000310014   西灣里    D39      47         0\n4268 67000310011   甲頂里    D39      47         1\n4269 67000310003   永康里    D39      47         0\n4270 67000310038   正強里    D39      47         3\n4271 67000360004   漁光里    D07      47         0\n4272 67000360002   金城里    D07      47         0\n4273 67000310036   尚頂里    D39      47         0\n4274 67000310019   復興里    D39      47         0\n4275 67000310022   神洲里    D39      47         0\n4276 67000310020   復國里    D39      47         2\n4277 67000310032   三合里    D39      47         0\n4278 67000310037   復華里    D39      47         0\n4279 67000310030   二王里    D39      47         1\n4280 67000320033   東智里    D01      47         4\n4281 67000330023   大恩里    D02      47         0\n4282 67000370033   西湖里    D08      47         4\n4283 67000360015   平安里    D07      47         0\n4284 67000370034   西賢里    D08      47         3\n4285 67000350036   四草里    D06      47         0\n4286 67000350006   安東里    D06      47         4\n4287 67000350047   淵中里    D06      47         2\n4288 67000350031   城西里    D06      47         1\n4289 67000350022   佃東里    D06      47         0\n4290 67000350010   新順里    D06      47         0\n4291 67000310018   新樹里    D39      47         0\n4292 67000310010   塩行里    D39      47         2\n4293 67000350035   鹿耳里    D06      47         0\n4294 67000350016   海西里    D06      47         0\n4295 67000350023   佃西里    D06      47         1\n4296 67000270019   文賢里    D32      47         0\n4297 67000310041   龍埔里    D39      47         1\n4298 67000310042   永明里    D39      47         0\n4299 67000330040   鹽埕里    D02      47         2\n4300 67000340051   北華里    D04      47         2\n4301 67000340052   華德里    D04      47         0\n4302 67000340053   福德里    D04      47         2\n4303 67000340044   長勝里    D04      47         0\n4304 67000340050   長興里    D04      47         0\n4305 67000340049   大興里    D04      47         0\n4306 67000340048   大光里    D04      47         2\n4307 67000340047   小北里    D04      47         0\n4308 67000340055   雙安里    D04      47         6\n4309 67000340054   立人里    D04      47         1\n4310 67000370042 小西門里    D08      47         1\n4311 67000370044   兌悅里    D08      47         0\n4312 67000370043 五條港里    D08      47         1\n4313 67000370040   南美里    D08      47         2\n4314 67000360017   王城里    D07      47         3\n4315 67000360016   天妃里    D07      47         2\n4316 67000370039   城隍里    D08      47         1\n4317 67000370048   西和里    D08      47         1\n4318 67000340046   北門里    D04      47         2\n4319 67000310029   塩洲里    D39      47         1\n4320 67000340004   東興里    D04      47         0\n4321 67000340019   重興里    D04      47         0\n4322 67000340020   和順里    D04      47         3\n4323 67000340005   力行里    D04      47         2\n4324 67000340041   文成里    D04      47         2\n4325 67000340038   元寶里    D04      47         1\n4326 67000340001   開元里    D04      47         1\n4327 67000340040   成德里    D04      47         3\n4328 67000370016   永華里    D08      47         2\n4329 67000370007   郡王里    D08      47         0\n4330 67000310043   塩興里    D39      47         1\n4331 67000340056   元美里    D04      47         0\n4332 67000370047   南廠里    D08      47         1\n4333 67000370045   淺草里    D08      47         0\n4334 67000370046   府前里    D08      47         2\n4335 67000370041   南門里    D08      47         0\n4336 67000340045   合興里    D04      47         2\n4337 67000310017   北灣里    D39      47         2\n4338 67000310040   北興里    D39      47         0\n4339 67000310027   龍潭里    D39      47         0\n4340 67000310004   埔園里    D39      47         3\n4341 67000310009   三民里    D39      47         0\n4342 67000340008   仁愛里    D04      47         2\n4343 67000340007   振興里    D04      47         1\n4344 67000340039   永祥里    D04      47         2\n4345 67000340025   文元里    D04      47         1\n4346 67000370011   開山里    D08      47         0\n4347 67000370031   大涼里    D08      47         1\n4348 67000370022   藥王里    D08      47         0\n4349 67000370025   光賢里    D08      47         0\n4350 67000270015   二行里    D32      47         3\n4351 67000270016   大甲里    D32      47         1\n4352 67000270005   仁義里    D32      47        12\n4353 67000270002   土庫里    D32      47         0\n4354 67000270001   太子里    D32      47         3\n4355 67000350007   安西里    D06      47         0\n4356 67000350051   大安里    D06      47         0\n4357 67000350037   安和里    D06      47         2\n4358 67000350045   理想里    D06      47         0\n4359 67000350009   安慶里    D06      47         2\n4360 67000350044   梅花里    D06      47         2\n4361 67000350008   頂安里    D06      47         1\n4362 67000350002   安順里    D06      47         1\n4363 67000350012   總頭里    D06      47         0\n4364 67000350011   原佃里    D06      47         0\n4365 67000350001   東和里    D06      47         1\n4366 67000310028   光復里    D39      47         0\n4367 67000310026   勝利里    D39      47         0\n4368 67000310021   建國里    D39      47         0\n4369 67000310031   六合里    D39      47         1\n4370 67000350021   淵西里    D06      47         0\n4371 67000350013   長安里    D06      47         1\n4372 67000310039   中華里    D39      47         1\n4373 67000310024   成功里    D39      47         1\n4374 67000310025   中興里    D39      47         0\n4375 67000310023   西勢里    D39      47         0\n4376 67000310008   蔦松里    D39      47         0\n4377 67000350034   顯宮里    D06      47         1\n4378 67000350004   州南里    D06      47         0\n4379 67000350048   布袋里    D06      47         0\n4380 67000350005   州北里    D06      47         0\n4381 67000350003   塭南里    D06      47         0\n4382 67000350024   公塭里    D06      47         0\n4383 67000350025   南興里    D06      47         0\n4384 67000360012   億載里    D07      47         0\n4385 67000360008   平通里    D07      47         0\n4386 67000350015   海東里    D06      47         1\n4387 67000350032   青草里    D06      48         0\n4388 67000270011   保安里    D32      48         0\n4389 67000370005   赤嵌里    D08      48         4\n4390 67000330004   大成里    D02      48         0\n4391 67000350028   城北里    D06      48         0\n4392 67000350030   城南里    D06      48         0\n4393 67000370009   法華里    D08      48         0\n4394 67000350017   海南里    D06      48         0\n4395 67000350049   國安里    D06      48         0\n4396 67000350018   溪心里    D06      48         0\n4397 67000350020   淵東里    D06      48         1\n4398 67000350029   城中里    D06      48         0\n4399 67000350027   城東里    D06      48         0\n4400 67000350026   學東里    D06      48         1\n4401 67000310013   東灣里    D39      48         0\n4402 67000310015   南灣里    D39      48         0\n4403 67000310016   崑山里    D39      48         1\n4404 67000310012   大灣里    D39      48         0\n4405 67000310001   五王里    D39      48         1\n4406 67000310034   安康里    D39      48         0\n4407 67000310035   西橋里    D39      48         0\n4408 67000310002   網寮里    D39      48         1\n4409 67000310005   大橋里    D39      48         1\n4410 67000310033   東橋里    D39      48         0\n4411 67000310007   烏竹里    D39      48         0\n4412 67000310006   王行里    D39      48         0\n4413 67000320003   大智里    D01      48         3\n4414 67000320041   崇文里    D01      48         0\n4415 67000320035   崇成里    D01      48         0\n4416 67000320012   崇明里    D01      48         0\n4417 67000320028   大福里    D01      48         0\n4418 67000320032   崇德里    D01      48         1\n4419 67000320016   大德里    D01      48         0\n4420 67000320004   崇學里    D01      48         3\n4421 67000320014   和平里    D01      48         1\n4422 67000320019   崇善里    D01      48         0\n4423 67000320015   路東里    D01      48         0\n4424 67000320025   虎尾里    D01      48         1\n4425 67000320029   忠孝里    D01      48         2\n4426 67000320043   裕聖里    D01      48         0\n4427 67000320040   崇信里    D01      48         0\n4428 67000320039   德光里    D01      48         0\n4429 67000320042   復興里    D01      48         0\n4430 67000320013   自強里    D01      48         1\n4431 67000320045   文聖里    D01      48         1\n4432 67000320001   富裕里    D01      48         0\n4433 67000320024   龍山里    D01      48         0\n4434 67000320017   關聖里    D01      48         1\n4435 67000320009   新東里    D01      48         0\n4436 67000320020   富強里    D01      48         1\n4437 67000320005   泉南里    D01      48         1\n4438 67000320034   東聖里    D01      48         1\n4439 67000320011   東安里    D01      48         0\n4440 67000320038   大同里    D01      48         4\n4441 67000320018   衛國里    D01      48         0\n4442 67000320002   裕農里    D01      48         0\n4443 67000320044   南聖里    D01      48         0\n4444 67000320030   崇誨里    D01      48         1\n4445 67000320036   東門里    D01      48         0\n4446 67000320010   中西里    D01      48         0\n4447 67000320031   東明里    D01      48         0\n4448 67000320021   圍下里    D01      48         0\n4449 67000320008   東光里    D01      48         0\n4450 67000320007   後甲里    D01      48         1\n4451 67000320027   莊敬里    D01      48         0\n4452 67000320022   小東里    D01      48         0\n4453 67000320023   大學里    D01      48         0\n4454 67000320037   成大里    D01      48         0\n4455 67000340033   公園里    D04      48         0\n4456 67000340032   中樓里    D04      48         1\n4457 67000340043   賢北里    D04      48         0\n4458 67000340018   大豐里    D04      48         0\n4459 67000340026   大港里    D04      48         0\n4460 67000340023   正覺里    D04      48         1\n4461 67000340042   大和里    D04      48         2\n4462 67000340024   成功里    D04      48         0\n4463 67000330020   佛壇里    D02      48         2\n4464 67000330019   同安里    D02      48         1\n4465 67000330037   松安里    D02      48         1\n4466 67000330038   永寧里    D02      48         0\n4467 67000330016   喜南里    D02      48         0\n4468 67000330014   喜東里    D02      48         0\n4469 67000330015   喜北里    D02      48         0\n4470 67000330029   南都里    D02      48         0\n4471 67000330039   南華里    D02      48         0\n4472 67000330032   建南里    D02      48         0\n4473 67000330026   明興里    D02      48         1\n4474 67000330033   郡南里    D02      48         0\n4475 67000330030   開南里    D02      48         0\n4476 67000330013   明亮里    D02      48         1\n4477 67000330036   鯤鯓里    D02      48         0\n4478 67000330022   大忠里    D02      48         1\n4479 67000330011   光明里    D02      48         0\n4480 67000330034   府南里    D02      48         0\n4481 67000330021   大林里    D02      48         0\n4482 67000330009   國宅里    D02      48         2\n4483 67000330008   田寮里    D02      48         1\n4484 67000330024   新生里    D02      48         1\n4485 67000330001   竹溪里    D02      48         1\n4486 67000330003   明德里    D02      48         0\n4487 67000330025   再興里    D02      48         1\n4488 67000330031   彰南里    D02      48         0\n4489 67000330028   金華里    D02      48         2\n4490 67000330007   新興里    D02      48         1\n4491 67000330035   文南里    D02      48         0\n4492 67000330006   新昌里    D02      48         0\n4493 67000330005   廣州里    D02      48         1\n4494 67000330027   文華里    D02      48         2\n4495 67000350039   溪頂里    D06      48         1\n4496 67000350041   海佃里    D06      48         1\n4497 67000350046   溪東里    D06      48         2\n4498 67000350038   溪北里    D06      48         0\n4499 67000350040   溪墘里    D06      48         1\n4500 67000350050   安富里    D06      48         0\n4501 67000350019   塩田里    D06      48         0\n4502 67000350043   鳳凰里    D06      48         0\n4503 67000350014   公親里    D06      48         0\n4504 67000350033   砂崙里    D06      48         0\n4505 67000360009   文平里    D07      48         1\n4506 67000360010   國平里    D07      48         0\n4507 67000360011   育平里    D07      48         1\n4508 67000360007   華平里    D07      48         1\n4509 67000360006   怡平里    D07      48         1\n4510 67000360005   建平里    D07      48         1\n4511 67000350042   幸福里    D06      48         1\n4512 67000270008   上崙里    D32      48         1\n4513 67000270007   後壁里    D32      48         0\n4514 67000270012   成功里    D32      48         0\n4515 67000270013   仁和里    D32      48         0\n4516 67000270014   仁愛里    D32      48         0\n4517 67000270004   仁德里    D32      48         1\n4518 67000330018   興農里    D02      48         1\n4519 67000330017   省躬里    D02      48         0\n4520 67000270006   新田里    D32      48         0\n4521 67000270003   一甲里    D32      48         2\n4522 67000320026   德高里    D01      48         1\n4523 67000320006   仁和里    D01      48         0\n4524 67000270017   中洲里    D32      48         0\n4525 67000310014   西灣里    D39      48         0\n4526 67000310011   甲頂里    D39      48         1\n4527 67000310003   永康里    D39      48         0\n4528 67000310038   正強里    D39      48         0\n4529 67000360004   漁光里    D07      48         0\n4530 67000360002   金城里    D07      48         0\n4531 67000310036   尚頂里    D39      48         0\n4532 67000310019   復興里    D39      48         0\n4533 67000310022   神洲里    D39      48         0\n4534 67000310020   復國里    D39      48         2\n4535 67000310032   三合里    D39      48         0\n4536 67000310037   復華里    D39      48         1\n4537 67000310030   二王里    D39      48         0\n4538 67000320033   東智里    D01      48         2\n4539 67000330023   大恩里    D02      48         0\n4540 67000370033   西湖里    D08      48         0\n4541 67000360015   平安里    D07      48         1\n4542 67000370034   西賢里    D08      48         0\n4543 67000350036   四草里    D06      48         0\n4544 67000350006   安東里    D06      48         2\n4545 67000350047   淵中里    D06      48         1\n4546 67000350031   城西里    D06      48         0\n4547 67000350022   佃東里    D06      48         0\n4548 67000350010   新順里    D06      48         5\n4549 67000310018   新樹里    D39      48         0\n4550 67000310010   塩行里    D39      48         3\n4551 67000350035   鹿耳里    D06      48         0\n4552 67000350016   海西里    D06      48         0\n4553 67000350023   佃西里    D06      48         0\n4554 67000270019   文賢里    D32      48         0\n4555 67000310041   龍埔里    D39      48         1\n4556 67000310042   永明里    D39      48         0\n4557 67000330040   鹽埕里    D02      48         0\n4558 67000340051   北華里    D04      48         2\n4559 67000340052   華德里    D04      48         1\n4560 67000340053   福德里    D04      48         2\n4561 67000340044   長勝里    D04      48         0\n4562 67000340050   長興里    D04      48         1\n4563 67000340049   大興里    D04      48         2\n4564 67000340048   大光里    D04      48         1\n4565 67000340047   小北里    D04      48         3\n4566 67000340055   雙安里    D04      48         0\n4567 67000340054   立人里    D04      48         0\n4568 67000370042 小西門里    D08      48         0\n4569 67000370044   兌悅里    D08      48         1\n4570 67000370043 五條港里    D08      48         1\n4571 67000370040   南美里    D08      48         1\n4572 67000360017   王城里    D07      48         1\n4573 67000360016   天妃里    D07      48         1\n4574 67000370039   城隍里    D08      48         0\n4575 67000370048   西和里    D08      48         1\n4576 67000340046   北門里    D04      48         0\n4577 67000310029   塩洲里    D39      48         2\n4578 67000340004   東興里    D04      48         0\n4579 67000340019   重興里    D04      48         0\n4580 67000340020   和順里    D04      48         0\n4581 67000340005   力行里    D04      48         2\n4582 67000340041   文成里    D04      48         0\n4583 67000340038   元寶里    D04      48         2\n4584 67000340001   開元里    D04      48         0\n4585 67000340040   成德里    D04      48         1\n4586 67000370016   永華里    D08      48         1\n4587 67000370007   郡王里    D08      48         0\n4588 67000310043   塩興里    D39      48         0\n4589 67000340056   元美里    D04      48         1\n4590 67000370047   南廠里    D08      48         1\n4591 67000370045   淺草里    D08      48         1\n4592 67000370046   府前里    D08      48         1\n4593 67000370041   南門里    D08      48         0\n4594 67000340045   合興里    D04      48         0\n4595 67000310017   北灣里    D39      48         0\n4596 67000310040   北興里    D39      48         0\n4597 67000310027   龍潭里    D39      48         1\n4598 67000310004   埔園里    D39      48         0\n4599 67000310009   三民里    D39      48         0\n4600 67000340008   仁愛里    D04      48         2\n4601 67000340007   振興里    D04      48         3\n4602 67000340039   永祥里    D04      48         0\n4603 67000340025   文元里    D04      48         1\n4604 67000370011   開山里    D08      48         1\n4605 67000370031   大涼里    D08      48         1\n4606 67000370022   藥王里    D08      48         0\n4607 67000370025   光賢里    D08      48         1\n4608 67000270015   二行里    D32      48         1\n4609 67000270016   大甲里    D32      48         0\n4610 67000270005   仁義里    D32      48         3\n4611 67000270002   土庫里    D32      48         1\n4612 67000270001   太子里    D32      48         0\n4613 67000350007   安西里    D06      48         0\n4614 67000350051   大安里    D06      48         2\n4615 67000350037   安和里    D06      48         0\n4616 67000350045   理想里    D06      48         1\n4617 67000350009   安慶里    D06      48         0\n4618 67000350044   梅花里    D06      48         0\n4619 67000350008   頂安里    D06      48         0\n4620 67000350002   安順里    D06      48         0\n4621 67000350012   總頭里    D06      48         0\n4622 67000350011   原佃里    D06      48         0\n4623 67000350001   東和里    D06      48         0\n4624 67000310028   光復里    D39      48         0\n4625 67000310026   勝利里    D39      48         1\n4626 67000310021   建國里    D39      48         0\n4627 67000310031   六合里    D39      48         0\n4628 67000350021   淵西里    D06      48         0\n4629 67000350013   長安里    D06      48         0\n4630 67000310039   中華里    D39      48         0\n4631 67000310024   成功里    D39      48         0\n4632 67000310025   中興里    D39      48         0\n4633 67000310023   西勢里    D39      48         0\n4634 67000310008   蔦松里    D39      48         0\n4635 67000350034   顯宮里    D06      48         1\n4636 67000350004   州南里    D06      48         1\n4637 67000350048   布袋里    D06      48         0\n4638 67000350005   州北里    D06      48         0\n4639 67000350003   塭南里    D06      48         0\n4640 67000350024   公塭里    D06      48         0\n4641 67000350025   南興里    D06      48         0\n4642 67000360012   億載里    D07      48         0\n4643 67000360008   平通里    D07      48         0\n4644 67000350015   海東里    D06      48         0\n4645 67000350032   青草里    D06      49         0\n4646 67000270011   保安里    D32      49         1\n4647 67000370005   赤嵌里    D08      49         4\n4648 67000330004   大成里    D02      49         0\n4649 67000350028   城北里    D06      49         0\n4650 67000350030   城南里    D06      49         0\n4651 67000370009   法華里    D08      49         1\n4652 67000350017   海南里    D06      49         0\n4653 67000350049   國安里    D06      49         0\n4654 67000350018   溪心里    D06      49         1\n4655 67000350020   淵東里    D06      49         0\n4656 67000350029   城中里    D06      49         0\n4657 67000350027   城東里    D06      49         0\n4658 67000350026   學東里    D06      49         0\n4659 67000310013   東灣里    D39      49         0\n4660 67000310015   南灣里    D39      49         0\n4661 67000310016   崑山里    D39      49         0\n4662 67000310012   大灣里    D39      49         0\n4663 67000310001   五王里    D39      49         0\n4664 67000310034   安康里    D39      49         1\n4665 67000310035   西橋里    D39      49         0\n4666 67000310002   網寮里    D39      49         0\n4667 67000310005   大橋里    D39      49         1\n4668 67000310033   東橋里    D39      49         1\n4669 67000310007   烏竹里    D39      49         0\n4670 67000310006   王行里    D39      49         1\n4671 67000320003   大智里    D01      49         0\n4672 67000320041   崇文里    D01      49         0\n4673 67000320035   崇成里    D01      49         0\n4674 67000320012   崇明里    D01      49         1\n4675 67000320028   大福里    D01      49         0\n4676 67000320032   崇德里    D01      49         1\n4677 67000320016   大德里    D01      49         0\n4678 67000320004   崇學里    D01      49         1\n4679 67000320014   和平里    D01      49         0\n4680 67000320019   崇善里    D01      49         1\n4681 67000320015   路東里    D01      49         0\n4682 67000320025   虎尾里    D01      49         0\n4683 67000320029   忠孝里    D01      49         0\n4684 67000320043   裕聖里    D01      49         0\n4685 67000320040   崇信里    D01      49         0\n4686 67000320039   德光里    D01      49         0\n4687 67000320042   復興里    D01      49         0\n4688 67000320013   自強里    D01      49         1\n4689 67000320045   文聖里    D01      49         0\n4690 67000320001   富裕里    D01      49         0\n4691 67000320024   龍山里    D01      49         1\n4692 67000320017   關聖里    D01      49         1\n4693 67000320009   新東里    D01      49         0\n4694 67000320020   富強里    D01      49         0\n4695 67000320005   泉南里    D01      49         0\n4696 67000320034   東聖里    D01      49         0\n4697 67000320011   東安里    D01      49         0\n4698 67000320038   大同里    D01      49         1\n4699 67000320018   衛國里    D01      49         0\n4700 67000320002   裕農里    D01      49         1\n4701 67000320044   南聖里    D01      49         0\n4702 67000320030   崇誨里    D01      49         0\n4703 67000320036   東門里    D01      49         0\n4704 67000320010   中西里    D01      49         0\n4705 67000320031   東明里    D01      49         0\n4706 67000320021   圍下里    D01      49         0\n4707 67000320008   東光里    D01      49         0\n4708 67000320007   後甲里    D01      49         0\n4709 67000320027   莊敬里    D01      49         0\n4710 67000320022   小東里    D01      49         1\n4711 67000320023   大學里    D01      49         0\n4712 67000320037   成大里    D01      49         0\n4713 67000340033   公園里    D04      49         0\n4714 67000340032   中樓里    D04      49         0\n4715 67000340043   賢北里    D04      49         1\n4716 67000340018   大豐里    D04      49         1\n4717 67000340026   大港里    D04      49         0\n4718 67000340023   正覺里    D04      49         0\n4719 67000340042   大和里    D04      49         1\n4720 67000340024   成功里    D04      49         0\n4721 67000330020   佛壇里    D02      49         0\n4722 67000330019   同安里    D02      49         0\n4723 67000330037   松安里    D02      49         1\n4724 67000330038   永寧里    D02      49         0\n4725 67000330016   喜南里    D02      49         0\n4726 67000330014   喜東里    D02      49         0\n4727 67000330015   喜北里    D02      49         0\n4728 67000330029   南都里    D02      49         0\n4729 67000330039   南華里    D02      49         0\n4730 67000330032   建南里    D02      49         1\n4731 67000330026   明興里    D02      49         1\n4732 67000330033   郡南里    D02      49         0\n4733 67000330030   開南里    D02      49         1\n4734 67000330013   明亮里    D02      49         1\n4735 67000330036   鯤鯓里    D02      49         0\n4736 67000330022   大忠里    D02      49         0\n4737 67000330011   光明里    D02      49         0\n4738 67000330034   府南里    D02      49         0\n4739 67000330021   大林里    D02      49         0\n4740 67000330009   國宅里    D02      49         1\n4741 67000330008   田寮里    D02      49         0\n4742 67000330024   新生里    D02      49         0\n4743 67000330001   竹溪里    D02      49         0\n4744 67000330003   明德里    D02      49         0\n4745 67000330025   再興里    D02      49         0\n4746 67000330031   彰南里    D02      49         0\n4747 67000330028   金華里    D02      49         1\n4748 67000330007   新興里    D02      49         2\n4749 67000330035   文南里    D02      49         1\n4750 67000330006   新昌里    D02      49         0\n4751 67000330005   廣州里    D02      49         1\n4752 67000330027   文華里    D02      49         0\n4753 67000350039   溪頂里    D06      49         0\n4754 67000350041   海佃里    D06      49         1\n4755 67000350046   溪東里    D06      49         0\n4756 67000350038   溪北里    D06      49         0\n4757 67000350040   溪墘里    D06      49         0\n4758 67000350050   安富里    D06      49         0\n4759 67000350019   塩田里    D06      49         0\n4760 67000350043   鳳凰里    D06      49         0\n4761 67000350014   公親里    D06      49         0\n4762 67000350033   砂崙里    D06      49         0\n4763 67000360009   文平里    D07      49         0\n4764 67000360010   國平里    D07      49         1\n4765 67000360011   育平里    D07      49         1\n4766 67000360007   華平里    D07      49         1\n4767 67000360006   怡平里    D07      49         4\n4768 67000360005   建平里    D07      49         0\n4769 67000350042   幸福里    D06      49         0\n4770 67000270008   上崙里    D32      49         0\n4771 67000270007   後壁里    D32      49         0\n4772 67000270012   成功里    D32      49         0\n4773 67000270013   仁和里    D32      49         0\n4774 67000270014   仁愛里    D32      49         0\n4775 67000270004   仁德里    D32      49         1\n4776 67000330018   興農里    D02      49         0\n4777 67000330017   省躬里    D02      49         0\n4778 67000270006   新田里    D32      49         0\n4779 67000270003   一甲里    D32      49         0\n4780 67000320026   德高里    D01      49         0\n4781 67000320006   仁和里    D01      49         0\n4782 67000270017   中洲里    D32      49         0\n4783 67000310014   西灣里    D39      49         0\n4784 67000310011   甲頂里    D39      49         0\n4785 67000310003   永康里    D39      49         0\n4786 67000310038   正強里    D39      49         2\n4787 67000360004   漁光里    D07      49         0\n4788 67000360002   金城里    D07      49         0\n4789 67000310036   尚頂里    D39      49         0\n4790 67000310019   復興里    D39      49         1\n4791 67000310022   神洲里    D39      49         0\n4792 67000310020   復國里    D39      49         0\n4793 67000310032   三合里    D39      49         0\n4794 67000310037   復華里    D39      49         2\n4795 67000310030   二王里    D39      49         0\n4796 67000320033   東智里    D01      49         0\n4797 67000330023   大恩里    D02      49         0\n4798 67000370033   西湖里    D08      49         0\n4799 67000360015   平安里    D07      49         0\n4800 67000370034   西賢里    D08      49         0\n4801 67000350036   四草里    D06      49         0\n4802 67000350006   安東里    D06      49         0\n4803 67000350047   淵中里    D06      49         0\n4804 67000350031   城西里    D06      49         0\n4805 67000350022   佃東里    D06      49         0\n4806 67000350010   新順里    D06      49         1\n4807 67000310018   新樹里    D39      49         0\n4808 67000310010   塩行里    D39      49         1\n4809 67000350035   鹿耳里    D06      49         0\n4810 67000350016   海西里    D06      49         1\n4811 67000350023   佃西里    D06      49         1\n4812 67000270019   文賢里    D32      49         0\n4813 67000310041   龍埔里    D39      49         0\n4814 67000310042   永明里    D39      49         0\n4815 67000330040   鹽埕里    D02      49         0\n4816 67000340051   北華里    D04      49         1\n4817 67000340052   華德里    D04      49         0\n4818 67000340053   福德里    D04      49         0\n4819 67000340044   長勝里    D04      49         0\n4820 67000340050   長興里    D04      49         1\n4821 67000340049   大興里    D04      49         0\n4822 67000340048   大光里    D04      49         0\n4823 67000340047   小北里    D04      49         0\n4824 67000340055   雙安里    D04      49         1\n4825 67000340054   立人里    D04      49         0\n4826 67000370042 小西門里    D08      49         4\n4827 67000370044   兌悅里    D08      49         1\n4828 67000370043 五條港里    D08      49         1\n4829 67000370040   南美里    D08      49         1\n4830 67000360017   王城里    D07      49         0\n4831 67000360016   天妃里    D07      49         0\n4832 67000370039   城隍里    D08      49         0\n4833 67000370048   西和里    D08      49         0\n4834 67000340046   北門里    D04      49         0\n4835 67000310029   塩洲里    D39      49         1\n4836 67000340004   東興里    D04      49         0\n4837 67000340019   重興里    D04      49         0\n4838 67000340020   和順里    D04      49         0\n4839 67000340005   力行里    D04      49         1\n4840 67000340041   文成里    D04      49         0\n4841 67000340038   元寶里    D04      49         0\n4842 67000340001   開元里    D04      49         1\n4843 67000340040   成德里    D04      49         1\n4844 67000370016   永華里    D08      49         1\n4845 67000370007   郡王里    D08      49         0\n4846 67000310043   塩興里    D39      49         0\n4847 67000340056   元美里    D04      49         0\n4848 67000370047   南廠里    D08      49         0\n4849 67000370045   淺草里    D08      49         0\n4850 67000370046   府前里    D08      49         1\n4851 67000370041   南門里    D08      49         0\n4852 67000340045   合興里    D04      49         0\n4853 67000310017   北灣里    D39      49         0\n4854 67000310040   北興里    D39      49         0\n4855 67000310027   龍潭里    D39      49         1\n4856 67000310004   埔園里    D39      49         0\n4857 67000310009   三民里    D39      49         0\n4858 67000340008   仁愛里    D04      49         0\n4859 67000340007   振興里    D04      49         1\n4860 67000340039   永祥里    D04      49         0\n4861 67000340025   文元里    D04      49         0\n4862 67000370011   開山里    D08      49         0\n4863 67000370031   大涼里    D08      49         0\n4864 67000370022   藥王里    D08      49         1\n4865 67000370025   光賢里    D08      49         1\n4866 67000270015   二行里    D32      49         0\n4867 67000270016   大甲里    D32      49         0\n4868 67000270005   仁義里    D32      49         2\n4869 67000270002   土庫里    D32      49         0\n4870 67000270001   太子里    D32      49         0\n4871 67000350007   安西里    D06      49         0\n4872 67000350051   大安里    D06      49         0\n4873 67000350037   安和里    D06      49         0\n4874 67000350045   理想里    D06      49         0\n4875 67000350009   安慶里    D06      49         1\n4876 67000350044   梅花里    D06      49         0\n4877 67000350008   頂安里    D06      49         0\n4878 67000350002   安順里    D06      49         1\n4879 67000350012   總頭里    D06      49         0\n4880 67000350011   原佃里    D06      49         0\n4881 67000350001   東和里    D06      49         1\n4882 67000310028   光復里    D39      49         0\n4883 67000310026   勝利里    D39      49         1\n4884 67000310021   建國里    D39      49         0\n4885 67000310031   六合里    D39      49         0\n4886 67000350021   淵西里    D06      49         0\n4887 67000350013   長安里    D06      49         2\n4888 67000310039   中華里    D39      49         0\n4889 67000310024   成功里    D39      49         0\n4890 67000310025   中興里    D39      49         1\n4891 67000310023   西勢里    D39      49         1\n4892 67000310008   蔦松里    D39      49         0\n4893 67000350034   顯宮里    D06      49         0\n4894 67000350004   州南里    D06      49         0\n4895 67000350048   布袋里    D06      49         0\n4896 67000350005   州北里    D06      49         0\n4897 67000350003   塭南里    D06      49         0\n4898 67000350024   公塭里    D06      49         0\n4899 67000350025   南興里    D06      49         0\n4900 67000360012   億載里    D07      49         0\n4901 67000360008   平通里    D07      49         0\n4902 67000350015   海東里    D06      49         0\n4903 67000350032   青草里    D06      50         0\n4904 67000270011   保安里    D32      50         0\n4905 67000370005   赤嵌里    D08      50         0\n4906 67000330004   大成里    D02      50         0\n4907 67000350028   城北里    D06      50         0\n4908 67000350030   城南里    D06      50         1\n4909 67000370009   法華里    D08      50         1\n4910 67000350017   海南里    D06      50         0\n4911 67000350049   國安里    D06      50         0\n4912 67000350018   溪心里    D06      50         0\n4913 67000350020   淵東里    D06      50         0\n4914 67000350029   城中里    D06      50         0\n4915 67000350027   城東里    D06      50         0\n4916 67000350026   學東里    D06      50         0\n4917 67000310013   東灣里    D39      50         0\n4918 67000310015   南灣里    D39      50         0\n4919 67000310016   崑山里    D39      50         0\n4920 67000310012   大灣里    D39      50         0\n4921 67000310001   五王里    D39      50         0\n4922 67000310034   安康里    D39      50         0\n4923 67000310035   西橋里    D39      50         0\n4924 67000310002   網寮里    D39      50         0\n4925 67000310005   大橋里    D39      50         0\n4926 67000310033   東橋里    D39      50         1\n4927 67000310007   烏竹里    D39      50         0\n4928 67000310006   王行里    D39      50         0\n4929 67000320003   大智里    D01      50         0\n4930 67000320041   崇文里    D01      50         0\n4931 67000320035   崇成里    D01      50         0\n4932 67000320012   崇明里    D01      50         0\n4933 67000320028   大福里    D01      50         0\n4934 67000320032   崇德里    D01      50         0\n4935 67000320016   大德里    D01      50         0\n4936 67000320004   崇學里    D01      50         0\n4937 67000320014   和平里    D01      50         0\n4938 67000320019   崇善里    D01      50         0\n4939 67000320015   路東里    D01      50         0\n4940 67000320025   虎尾里    D01      50         0\n4941 67000320029   忠孝里    D01      50         0\n4942 67000320043   裕聖里    D01      50         1\n4943 67000320040   崇信里    D01      50         0\n4944 67000320039   德光里    D01      50         0\n4945 67000320042   復興里    D01      50         0\n4946 67000320013   自強里    D01      50         0\n4947 67000320045   文聖里    D01      50         0\n4948 67000320001   富裕里    D01      50         0\n4949 67000320024   龍山里    D01      50         0\n4950 67000320017   關聖里    D01      50         1\n4951 67000320009   新東里    D01      50         0\n4952 67000320020   富強里    D01      50         3\n4953 67000320005   泉南里    D01      50         0\n4954 67000320034   東聖里    D01      50         0\n4955 67000320011   東安里    D01      50         0\n4956 67000320038   大同里    D01      50         0\n4957 67000320018   衛國里    D01      50         0\n4958 67000320002   裕農里    D01      50         0\n4959 67000320044   南聖里    D01      50         0\n4960 67000320030   崇誨里    D01      50         0\n4961 67000320036   東門里    D01      50         0\n4962 67000320010   中西里    D01      50         0\n4963 67000320031   東明里    D01      50         0\n4964 67000320021   圍下里    D01      50         0\n4965 67000320008   東光里    D01      50         0\n4966 67000320007   後甲里    D01      50         0\n4967 67000320027   莊敬里    D01      50         0\n4968 67000320022   小東里    D01      50         0\n4969 67000320023   大學里    D01      50         0\n4970 67000320037   成大里    D01      50         0\n4971 67000340033   公園里    D04      50         2\n4972 67000340032   中樓里    D04      50         1\n4973 67000340043   賢北里    D04      50         0\n4974 67000340018   大豐里    D04      50         0\n4975 67000340026   大港里    D04      50         0\n4976 67000340023   正覺里    D04      50         1\n4977 67000340042   大和里    D04      50         0\n4978 67000340024   成功里    D04      50         0\n4979 67000330020   佛壇里    D02      50         0\n4980 67000330019   同安里    D02      50         1\n4981 67000330037   松安里    D02      50         0\n4982 67000330038   永寧里    D02      50         0\n4983 67000330016   喜南里    D02      50         0\n4984 67000330014   喜東里    D02      50         0\n4985 67000330015   喜北里    D02      50         0\n4986 67000330029   南都里    D02      50         0\n4987 67000330039   南華里    D02      50         0\n4988 67000330032   建南里    D02      50         0\n4989 67000330026   明興里    D02      50         0\n4990 67000330033   郡南里    D02      50         0\n4991 67000330030   開南里    D02      50         0\n4992 67000330013   明亮里    D02      50         0\n4993 67000330036   鯤鯓里    D02      50         1\n4994 67000330022   大忠里    D02      50         0\n4995 67000330011   光明里    D02      50         0\n4996 67000330034   府南里    D02      50         0\n4997 67000330021   大林里    D02      50         0\n4998 67000330009   國宅里    D02      50         0\n4999 67000330008   田寮里    D02      50         0\n5000 67000330024   新生里    D02      50         0\n5001 67000330001   竹溪里    D02      50         0\n5002 67000330003   明德里    D02      50         0\n5003 67000330025   再興里    D02      50         0\n5004 67000330031   彰南里    D02      50         0\n5005 67000330028   金華里    D02      50         3\n5006 67000330007   新興里    D02      50         0\n5007 67000330035   文南里    D02      50         0\n5008 67000330006   新昌里    D02      50         0\n5009 67000330005   廣州里    D02      50         0\n5010 67000330027   文華里    D02      50         0\n5011 67000350039   溪頂里    D06      50         1\n5012 67000350041   海佃里    D06      50         0\n5013 67000350046   溪東里    D06      50         0\n5014 67000350038   溪北里    D06      50         0\n5015 67000350040   溪墘里    D06      50         0\n5016 67000350050   安富里    D06      50         0\n5017 67000350019   塩田里    D06      50         0\n5018 67000350043   鳳凰里    D06      50         0\n5019 67000350014   公親里    D06      50         0\n5020 67000350033   砂崙里    D06      50         0\n5021 67000360009   文平里    D07      50         0\n5022 67000360010   國平里    D07      50         0\n5023 67000360011   育平里    D07      50         0\n5024 67000360007   華平里    D07      50         0\n5025 67000360006   怡平里    D07      50         0\n5026 67000360005   建平里    D07      50         0\n5027 67000350042   幸福里    D06      50         0\n5028 67000270008   上崙里    D32      50         1\n5029 67000270007   後壁里    D32      50         0\n5030 67000270012   成功里    D32      50         0\n5031 67000270013   仁和里    D32      50         0\n5032 67000270014   仁愛里    D32      50         0\n5033 67000270004   仁德里    D32      50         0\n5034 67000330018   興農里    D02      50         0\n5035 67000330017   省躬里    D02      50         0\n5036 67000270006   新田里    D32      50         0\n5037 67000270003   一甲里    D32      50         0\n5038 67000320026   德高里    D01      50         0\n5039 67000320006   仁和里    D01      50         0\n5040 67000270017   中洲里    D32      50         0\n5041 67000310014   西灣里    D39      50         1\n5042 67000310011   甲頂里    D39      50         0\n5043 67000310003   永康里    D39      50         0\n5044 67000310038   正強里    D39      50         0\n5045 67000360004   漁光里    D07      50         0\n5046 67000360002   金城里    D07      50         0\n5047 67000310036   尚頂里    D39      50         0\n5048 67000310019   復興里    D39      50         0\n5049 67000310022   神洲里    D39      50         0\n5050 67000310020   復國里    D39      50         0\n5051 67000310032   三合里    D39      50         1\n5052 67000310037   復華里    D39      50         0\n5053 67000310030   二王里    D39      50         1\n5054 67000320033   東智里    D01      50         0\n5055 67000330023   大恩里    D02      50         0\n5056 67000370033   西湖里    D08      50         2\n5057 67000360015   平安里    D07      50         0\n5058 67000370034   西賢里    D08      50         0\n5059 67000350036   四草里    D06      50         0\n5060 67000350006   安東里    D06      50         0\n5061 67000350047   淵中里    D06      50         0\n5062 67000350031   城西里    D06      50         0\n5063 67000350022   佃東里    D06      50         0\n5064 67000350010   新順里    D06      50         1\n5065 67000310018   新樹里    D39      50         0\n5066 67000310010   塩行里    D39      50         1\n5067 67000350035   鹿耳里    D06      50         0\n5068 67000350016   海西里    D06      50         0\n5069 67000350023   佃西里    D06      50         2\n5070 67000270019   文賢里    D32      50         0\n5071 67000310041   龍埔里    D39      50         0\n5072 67000310042   永明里    D39      50         0\n5073 67000330040   鹽埕里    D02      50         0\n5074 67000340051   北華里    D04      50         0\n5075 67000340052   華德里    D04      50         0\n5076 67000340053   福德里    D04      50         0\n5077 67000340044   長勝里    D04      50         0\n5078 67000340050   長興里    D04      50         0\n5079 67000340049   大興里    D04      50         0\n5080 67000340048   大光里    D04      50         0\n5081 67000340047   小北里    D04      50         1\n5082 67000340055   雙安里    D04      50         0\n5083 67000340054   立人里    D04      50         0\n5084 67000370042 小西門里    D08      50         1\n5085 67000370044   兌悅里    D08      50         1\n5086 67000370043 五條港里    D08      50         1\n5087 67000370040   南美里    D08      50         0\n5088 67000360017   王城里    D07      50         0\n5089 67000360016   天妃里    D07      50         0\n5090 67000370039   城隍里    D08      50         0\n5091 67000370048   西和里    D08      50         0\n5092 67000340046   北門里    D04      50         2\n5093 67000310029   塩洲里    D39      50         0\n5094 67000340004   東興里    D04      50         0\n5095 67000340019   重興里    D04      50         0\n5096 67000340020   和順里    D04      50         0\n5097 67000340005   力行里    D04      50         1\n5098 67000340041   文成里    D04      50         0\n5099 67000340038   元寶里    D04      50         0\n5100 67000340001   開元里    D04      50         1\n5101 67000340040   成德里    D04      50         0\n5102 67000370016   永華里    D08      50         0\n5103 67000370007   郡王里    D08      50         1\n5104 67000310043   塩興里    D39      50         1\n5105 67000340056   元美里    D04      50         0\n5106 67000370047   南廠里    D08      50         0\n5107 67000370045   淺草里    D08      50         0\n5108 67000370046   府前里    D08      50         1\n5109 67000370041   南門里    D08      50         0\n5110 67000340045   合興里    D04      50         0\n5111 67000310017   北灣里    D39      50         0\n5112 67000310040   北興里    D39      50         0\n5113 67000310027   龍潭里    D39      50         0\n5114 67000310004   埔園里    D39      50         0\n5115 67000310009   三民里    D39      50         0\n5116 67000340008   仁愛里    D04      50         0\n5117 67000340007   振興里    D04      50         1\n5118 67000340039   永祥里    D04      50         0\n5119 67000340025   文元里    D04      50         1\n5120 67000370011   開山里    D08      50         0\n5121 67000370031   大涼里    D08      50         0\n5122 67000370022   藥王里    D08      50         0\n5123 67000370025   光賢里    D08      50         0\n5124 67000270015   二行里    D32      50         1\n5125 67000270016   大甲里    D32      50         0\n5126 67000270005   仁義里    D32      50         2\n5127 67000270002   土庫里    D32      50         0\n5128 67000270001   太子里    D32      50         0\n5129 67000350007   安西里    D06      50         1\n5130 67000350051   大安里    D06      50         0\n5131 67000350037   安和里    D06      50         0\n5132 67000350045   理想里    D06      50         0\n5133 67000350009   安慶里    D06      50         0\n5134 67000350044   梅花里    D06      50         1\n5135 67000350008   頂安里    D06      50         1\n5136 67000350002   安順里    D06      50         0\n5137 67000350012   總頭里    D06      50         0\n5138 67000350011   原佃里    D06      50         1\n5139 67000350001   東和里    D06      50         2\n5140 67000310028   光復里    D39      50         0\n5141 67000310026   勝利里    D39      50         0\n5142 67000310021   建國里    D39      50         0\n5143 67000310031   六合里    D39      50         0\n5144 67000350021   淵西里    D06      50         0\n5145 67000350013   長安里    D06      50         0\n5146 67000310039   中華里    D39      50         0\n5147 67000310024   成功里    D39      50         0\n5148 67000310025   中興里    D39      50         0\n5149 67000310023   西勢里    D39      50         0\n5150 67000310008   蔦松里    D39      50         0\n5151 67000350034   顯宮里    D06      50         0\n5152 67000350004   州南里    D06      50         0\n5153 67000350048   布袋里    D06      50         0\n5154 67000350005   州北里    D06      50         0\n5155 67000350003   塭南里    D06      50         0\n5156 67000350024   公塭里    D06      50         0\n5157 67000350025   南興里    D06      50         0\n5158 67000360012   億載里    D07      50         0\n5159 67000360008   平通里    D07      50         0\n5160 67000350015   海東里    D06      50         0\n\n\n\nglimpse(dengue_st)\n\nRows: 5,160\nColumns: 5\n$ VILLCODE  &lt;chr&gt; \"67000350032\", \"67000270011\", \"67000370005\", \"67000330004\", …\n$ VILLNAME  &lt;chr&gt; \"青草里\", \"保安里\", \"赤嵌里\", \"大成里\", \"城北里\", \"城南里\", …\n$ TOWNID    &lt;chr&gt; \"D06\", \"D32\", \"D08\", \"D02\", \"D06\", \"D06\", \"D08\", \"D06\", \"D06…\n$ EPIWEEK   &lt;dbl&gt; 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, …\n$ num_cases &lt;int&gt; 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 34, 2,…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#gearys",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#gearys",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Geary’s",
    "text": "Geary’s\n\nGeary’s C test\n\ngeary_c &lt;- global_c(wm_q$num_cases,\n                    wm_q$nb,\n                    wm_q$wt)\ngeary_c\n\n$C\n[1] 0.4953894\n\n$K\n[1] 5.640615\n\n\n\nglobal_c_test(wm_q$num_cases,\n                  wm_q$nb,\n                  wm_q$wt)\n\n\n    Geary C test under randomisation\n\ndata:  x \nweights: listw   \n\nGeary C statistic standard deviate = 11.322, p-value &lt; 2.2e-16\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n      0.495389354       1.000000000       0.001986362 \n\n\n\n\nMonte Carlo Geary’s C\n\ngperm &lt;- global_c_perm(wm_q$num_cases,\n                  wm_q$nb,\n                  wm_q$wt,\n                  nsim = 999)\ngperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.49539, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nhist(gperm$res, \n     freq=TRUE, \n     breaks=30, \n     xlab=\"Simulated Moran's I\")\nabline(v=1, \n       col=\"red\") \n\n\n\n\n\n\nSpatial Correlogram?\n\n\nCluster and Outlier Analysis?"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#lisa-cluster-map",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#lisa-cluster-map",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "LISA Cluster Map",
    "text": "LISA Cluster Map\n\nlisa &lt;- dengue_village |&gt; mutate(nb = st_contiguity(geometry),\n                                 wt = st_weights(nb),\n                                 moran = local_moran(num_cases, nb, wt))\n\nlisa &lt;- unnest(lisa, moran)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#check-for-time-series-cube",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#check-for-time-series-cube",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Check for time-series cube",
    "text": "Check for time-series cube\n\nis_spacetime_cube(dengue_st)\n\n[1] TRUE"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-spatial-weights",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-spatial-weights",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Computing Spatial Weights",
    "text": "Computing Spatial Weights\n\ndengue_nb &lt;- dengue_st %&gt;%\n  activate(\"geometry\") %&gt;% \n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %&gt;%  \n  set_wts(\"wt\") %&gt;%\n  set_nbs(\"nb\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-local-gi",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-local-gi",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Computing local Gi*",
    "text": "Computing local Gi*\n\ngi_star_ehsa &lt;- dengue_nb %&gt;% \n  group_by(`EPIWEEK`) %&gt;%\n  mutate(gi_star = local_gstar_perm(\n    `num_cases`, nb, wt, nsim=99),\n    .before = 1) %&gt;% \n  unnest(gi_star)\n\ngi_star_ehsa\n\n# A tibble: 5,160 × 17\n# Groups:   EPIWEEK [20]\n   gi_star cluster    e_gi    var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -0.815 Low     0.00216   1.04e-5 -0.670    0.503  0.26         0.01     4.61\n 2   0.281 High    0.00314   6.43e-6  0.735    0.462  0.3          0.17     4.20\n 3  -0.463 Low     0.00283   5.95e-6 -0.201    0.840  0.96         0.5      2.07\n 4  -0.256 Low     0.00287   1.26e-5  0.0138   0.989  0.62         0.32     3.16\n 5  -0.895 Low     0.00248   1.36e-5 -0.671    0.502  0.16         0.01     4.72\n 6  -1.10  Low     0.00300   7.47e-6 -1.10     0.273  0.06         0.01     2.19\n 7  -0.895 Low     0.00289   1.99e-5 -0.647    0.517  0.18         0.01     3.73\n 8  -0.745 Low     0.00289   4.80e-6 -0.579    0.563  0.7          0.31     1.61\n 9   0.420 Low     0.00310   1.45e-5  0.644    0.519  0.26         0.14     2.86\n10  -0.907 Low     0.00249   6.18e-6 -0.804    0.421  0.28         0.09     3.15\n# ℹ 5,150 more rows\n# ℹ 8 more variables: kurtosis &lt;dbl&gt;, VILLCODE &lt;chr&gt;, VILLNAME &lt;chr&gt;,\n#   TOWNID &lt;chr&gt;, EPIWEEK &lt;dbl&gt;, num_cases &lt;int&gt;, wt &lt;list&gt;, nb &lt;list&gt;"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#mann-kendall-test",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#mann-kendall-test",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Mann-Kendall Test",
    "text": "Mann-Kendall Test\n\nH0: There is no monotonic trend in the series\nH1: A trend exists, be it positive, negative, or non-null\nSignificance level: 0.05\n\n\nSelecting Study Area\nSelect based on Epiweek based on TOWNID\n\ndengue_df %&gt;% \n  filter(EPIWEEK == 31) %&gt;% \n  top_n(5, `num_cases`) %&gt;%\n  arrange(desc(`num_cases`)) %&gt;%\n  pull(TOWNID)\n\n[1] \"D39\" \"D01\" \"D01\" \"D39\" \"D06\"\n\n\n\ndengue_df %&gt;% \n  filter(EPIWEEK == 40) %&gt;% \n  top_n(5, `num_cases`) %&gt;%\n  arrange(desc(`num_cases`)) %&gt;%\n  pull(TOWNID)\n\n[1] \"D39\" \"D08\" \"D39\" \"D02\" \"D06\"\n\n\n\ndengue_df %&gt;% \n  filter(EPIWEEK == 50) %&gt;% \n  top_n(5, `num_cases`) %&gt;%\n  arrange(desc(`num_cases`)) %&gt;%\n  pull(TOWNID)\n\n[1] \"D01\" \"D02\" \"D04\" \"D08\" \"D06\" \"D04\" \"D32\" \"D06\"\n\n\nWe can see that the cases in TOWNID D39 remains high in the 2/3 of the timeframe, while TOWNID D06 continues to be in the top 5 and D01 decrease at first but peaked again at the last week\n\nD39D06D01\n\n\n\ndengue_df %&gt;% \n  filter(EPIWEEK == 31 & TOWNID == \"D39\") %&gt;% \n  top_n(5, `num_cases`) %&gt;%\n  arrange(desc(`num_cases`)) %&gt;%\n  pull(VILLNAME)\n\n[1] \"五王里\" \"勝利里\" \"二王里\" \"復華里\" \"崑山里\" \"東橋里\" \"三合里\" \"六合里\"\n\n\n\ndengue_df %&gt;% \n  filter(EPIWEEK == 50 & TOWNID == \"D39\") %&gt;% \n  top_n(5, `num_cases`) %&gt;%\n  arrange(desc(`num_cases`)) %&gt;%\n  pull(VILLNAME)\n\n[1] \"東橋里\" \"西灣里\" \"三合里\" \"二王里\" \"塩行里\" \"塩興里\"\n\n\n\n\n\ndengue_df %&gt;% \n  filter(EPIWEEK == 31 & TOWNID == \"D06\") %&gt;% \n  top_n(5, `num_cases`) %&gt;%\n  arrange(desc(`num_cases`)) %&gt;%\n  pull(VILLNAME)\n\n[1] \"鳳凰里\" \"海佃里\" \"溪墘里\" \"幸福里\" \"溪頂里\"\n\n\n\ndengue_df %&gt;% \n  filter(EPIWEEK == 40 & TOWNID == \"D06\") %&gt;% \n  top_n(5, `num_cases`) %&gt;%\n  arrange(desc(`num_cases`)) %&gt;%\n  pull(VILLNAME)\n\n[1] \"安西里\" \"溪東里\" \"溪北里\" \"理想里\" \"幸福里\" \"安東里\"\n\n\n\ndengue_df %&gt;% \n  filter(EPIWEEK == 50 & TOWNID == \"D06\") %&gt;% \n  top_n(5, `num_cases`) %&gt;%\n  arrange(desc(`num_cases`)) %&gt;%\n  pull(VILLNAME)\n\n[1] \"佃西里\" \"東和里\" \"城南里\" \"溪頂里\" \"新順里\" \"安西里\" \"梅花里\" \"頂安里\"\n[9] \"原佃里\"\n\n\n\n\n\ndengue_df %&gt;% \n  filter(EPIWEEK == 31 & TOWNID == \"D01\") %&gt;% \n  top_n(5, `num_cases`) %&gt;%\n  arrange(desc(`num_cases`)) %&gt;%\n  pull(VILLNAME)\n\n[1] \"崇學里\" \"德光里\" \"崇德里\" \"大智里\" \"崇善里\"\n\n\n\ndengue_df %&gt;% \n  filter(EPIWEEK == 40 & TOWNID == \"D01\") %&gt;% \n  top_n(5, `num_cases`) %&gt;%\n  arrange(desc(`num_cases`)) %&gt;%\n  pull(VILLNAME)\n\n[1] \"自強里\" \"東明里\" \"新東里\" \"莊敬里\" \"裕農里\"\n\n\n\ndengue_df %&gt;% \n  filter(EPIWEEK == 50 & TOWNID == \"D01\") %&gt;% \n  top_n(5, `num_cases`) %&gt;%\n  arrange(desc(`num_cases`)) %&gt;%\n  pull(VILLNAME)\n\n [1] \"富強里\" \"裕聖里\" \"關聖里\" \"大智里\" \"崇文里\" \"崇成里\" \"崇明里\" \"大福里\"\n [9] \"崇德里\" \"大德里\" \"崇學里\" \"和平里\" \"崇善里\" \"路東里\" \"虎尾里\" \"忠孝里\"\n[17] \"崇信里\" \"德光里\" \"復興里\" \"自強里\" \"文聖里\" \"富裕里\" \"龍山里\" \"新東里\"\n[25] \"泉南里\" \"東聖里\" \"東安里\" \"大同里\" \"衛國里\" \"裕農里\" \"南聖里\" \"崇誨里\"\n[33] \"東門里\" \"中西里\" \"東明里\" \"圍下里\" \"東光里\" \"後甲里\" \"莊敬里\" \"小東里\"\n[41] \"大學里\" \"成大里\" \"德高里\" \"仁和里\" \"東智里\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nEHSA for all the villages\n\nehsa &lt;- emerging_hotspot_analysis(x = dengue_st, .var = \"num_cases\", k = 1, nsim = 99)\nehsa\n\n       location         tau      p_value       classification\n1   67000350032  0.41052628 1.248217e-02  oscilating coldspot\n2   67000270011  0.35789472 2.972257e-02  oscilating coldspot\n3   67000370005  0.57894731 4.055500e-04   oscilating hotspot\n4   67000330004  0.42105260 1.037431e-02     sporadic hotspot\n5   67000350028  0.53684205 1.049638e-03  no pattern detected\n6   67000350030  0.52631575 1.318216e-03          new hotspot\n7   67000370009  0.21052630 2.057540e-01 consecutive coldspot\n8   67000350017  0.05263158 7.702878e-01    sporadic coldspot\n9   67000350049  0.04210526 8.203382e-01   oscilating hotspot\n10  67000350018  0.24210525 1.442920e-01  oscilating coldspot\n11  67000350020  0.07368421 6.731887e-01         new coldspot\n12  67000350029  0.23157893 1.629844e-01    sporadic coldspot\n13  67000350027  0.07368421 6.731887e-01  consecutive hotspot\n14  67000350026  0.14736842 3.810323e-01   oscilating hotspot\n15  67000310013 -0.07368421 6.731887e-01    sporadic coldspot\n16  67000310015  0.17894736 2.843217e-01   oscilating hotspot\n17  67000310016 -0.64210522 8.645681e-05   oscilating hotspot\n18  67000310012 -0.11578947 4.956627e-01     sporadic hotspot\n19  67000310001  0.08421052 6.264963e-01  consecutive hotspot\n20  67000310034  0.29473683 7.435286e-02  consecutive hotspot\n21  67000310035 -0.31578946 5.559297e-02     sporadic hotspot\n22  67000310002 -0.03157894 8.711315e-01    sporadic coldspot\n23  67000310005  0.12631577 4.555354e-01   oscilating hotspot\n24  67000310033  0.29473683 7.435286e-02   oscilating hotspot\n25  67000310007  0.16842104 3.145249e-01  no pattern detected\n26  67000310006  0.46315786 4.762769e-03  consecutive hotspot\n27  67000320003  0.43157890 8.589149e-03   oscilating hotspot\n28  67000320041  0.12631577 4.555354e-01    sporadic coldspot\n29  67000320035  0.18947367 2.561450e-01    sporadic coldspot\n30  67000320012 -0.01052632 9.741178e-01  oscilating coldspot\n31  67000320028  0.03157894 8.711314e-01 consecutive coldspot\n32  67000320032  0.08421052 6.264963e-01 consecutive coldspot\n33  67000320016  0.21052630 2.057540e-01    sporadic coldspot\n34  67000320004  0.04210526 8.203382e-01   oscilating hotspot\n35  67000320014  0.33684209 4.095459e-02  oscilating coldspot\n36  67000320019  0.21052630 2.057540e-01   oscilating hotspot\n37  67000320015  0.33684209 4.095459e-02  oscilating coldspot\n38  67000320025  0.09473684 5.812547e-01 consecutive coldspot\n39  67000320029  0.07368421 6.731887e-01    sporadic coldspot\n40  67000320043 -0.53684205 1.049636e-03   oscilating hotspot\n41  67000320040 -0.43157890 8.589176e-03  oscilating coldspot\n42  67000320039  0.19999999 2.299690e-01   oscilating hotspot\n43  67000320042  0.04210526 8.203382e-01    sporadic coldspot\n44  67000320013  0.15789473 3.467641e-01    sporadic coldspot\n45  67000320045  0.45263153 5.819798e-03   oscilating hotspot\n46  67000320001 -0.54736835 8.324861e-04     sporadic hotspot\n47  67000320024 -0.04210526 8.203382e-01     sporadic hotspot\n48  67000320017 -0.42105260 1.037426e-02     sporadic hotspot\n49  67000320009 -0.14736842 3.810323e-01     sporadic hotspot\n50  67000320020  0.35789472 2.972257e-02     sporadic hotspot\n51  67000320005  0.43157890 8.589149e-03   oscilating hotspot\n52  67000320034  0.42105260 1.037431e-02   oscilating hotspot\n53  67000320011 -0.09473684 5.812547e-01     sporadic hotspot\n54  67000320038  0.38947365 1.786363e-02     sporadic hotspot\n55  67000320018  0.07368421 6.731887e-01  oscilating coldspot\n56  67000320002  0.15789473 3.467641e-01    sporadic coldspot\n57  67000320044  0.21052630 2.057540e-01    sporadic coldspot\n58  67000320030  0.06315789 7.211763e-01  consecutive hotspot\n59  67000320036  0.46315786 4.762769e-03    sporadic coldspot\n60  67000320010  0.09473684 5.812547e-01   oscilating hotspot\n61  67000320031  0.21052630 2.057540e-01   oscilating hotspot\n62  67000320021  0.11578947 4.956627e-01 consecutive coldspot\n63  67000320008 -0.64210522 8.645681e-05     sporadic hotspot\n64  67000320007 -0.11578947 4.956627e-01  oscilating coldspot\n65  67000320027  0.22105262 1.834472e-01     sporadic hotspot\n66  67000320022  0.36842102 2.517831e-02   oscilating hotspot\n67  67000320023  0.46315786 4.762769e-03   oscilating hotspot\n68  67000320037 -0.01052632 9.741178e-01  oscilating coldspot\n69  67000340033  0.03157894 8.711314e-01    sporadic coldspot\n70  67000340032 -0.46315786 4.762812e-03  oscilating coldspot\n71  67000340043 -0.12631577 4.555354e-01  oscilating coldspot\n72  67000340018  0.22105262 1.834472e-01     sporadic hotspot\n73  67000340026  0.39999998 1.496100e-02     sporadic hotspot\n74  67000340023  0.33684209 4.095459e-02         new coldspot\n75  67000340042 -0.06315789 7.211763e-01    sporadic coldspot\n76  67000340024  0.49473679 2.550244e-03   oscilating hotspot\n77  67000330020 -0.14736842 3.810323e-01  oscilating coldspot\n78  67000330019 -0.19999999 2.299691e-01     sporadic hotspot\n79  67000330037  0.28421050 8.551478e-02     sporadic hotspot\n80  67000330038  0.15789473 3.467641e-01    sporadic coldspot\n81  67000330016  0.32631576 4.780459e-02    sporadic coldspot\n82  67000330014  0.30526313 6.441104e-02  oscilating coldspot\n83  67000330015 -0.38947365 1.786363e-02     sporadic hotspot\n84  67000330029  0.25263155 1.272887e-01     sporadic hotspot\n85  67000330039  0.21052630 2.057540e-01  oscilating coldspot\n86  67000330032  0.27368417 9.799373e-02  oscilating coldspot\n87  67000330026  0.18947367 2.561450e-01  oscilating coldspot\n88  67000330033 -0.38947365 1.786363e-02   oscilating hotspot\n89  67000330030  0.03157894 8.711314e-01  oscilating coldspot\n90  67000330013  0.16842104 3.145249e-01  oscilating coldspot\n91  67000330036 -0.54736835 8.324861e-04     sporadic hotspot\n92  67000330022  0.17894736 2.843217e-01 consecutive coldspot\n93  67000330011  0.48421049 3.152847e-03   oscilating hotspot\n94  67000330034 -0.08421052 6.264963e-01          new hotspot\n95  67000330021  0.49473679 2.550244e-03  oscilating coldspot\n96  67000330009  0.56842101 5.174875e-04     sporadic hotspot\n97  67000330008  0.49473679 2.550244e-03   oscilating hotspot\n98  67000330024 -0.53684205 1.049636e-03  oscilating coldspot\n99  67000330001 -0.62105256 1.470606e-04     sporadic hotspot\n100 67000330003  0.26315787 1.118866e-01  oscilating coldspot\n101 67000330025  0.19999999 2.299690e-01     sporadic hotspot\n102 67000330031  0.54736835 8.324385e-04          new hotspot\n103 67000330028  0.51578945 1.649022e-03   oscilating hotspot\n104 67000330007  0.44210523 7.083893e-03   oscilating hotspot\n105 67000330035  0.37894735 2.124822e-02   oscilating hotspot\n106 67000330006 -0.03157894 8.711315e-01  oscilating coldspot\n107 67000330005  0.61052626 1.906157e-04   oscilating hotspot\n108 67000330027  0.57894731 4.055500e-04   oscilating hotspot\n109 67000350039  0.65263152 6.592274e-05  no pattern detected\n110 67000350041  0.57894731 4.055500e-04   oscilating hotspot\n111 67000350046  0.11578947 4.956627e-01   oscilating hotspot\n112 67000350038  0.42105260 1.037431e-02   oscilating hotspot\n113 67000350040  0.07368421 6.731887e-01   oscilating hotspot\n114 67000350050 -0.15789473 3.467641e-01     sporadic hotspot\n115 67000350019  0.07368421 6.731887e-01  oscilating coldspot\n116 67000350043 -0.11578947 4.956627e-01    sporadic coldspot\n117 67000350014  0.08421052 6.264963e-01    sporadic coldspot\n118 67000350033  0.11578947 4.956627e-01    sporadic coldspot\n119 67000360009  0.16842104 3.145249e-01    sporadic coldspot\n120 67000360010  0.15789473 3.467641e-01  oscilating coldspot\n121 67000360011  0.23157893 1.629844e-01          new hotspot\n122 67000360007  0.33684209 4.095459e-02    sporadic coldspot\n123 67000360006  0.36842102 2.517831e-02    sporadic coldspot\n124 67000360005  0.37894735 2.124822e-02  oscilating coldspot\n125 67000350042  0.22105262 1.834472e-01  oscilating coldspot\n126 67000270008  0.55789471 6.576777e-04   oscilating hotspot\n127 67000270007 -0.21052630 2.057540e-01   oscilating hotspot\n128 67000270012  0.55789471 6.576777e-04   oscilating hotspot\n129 67000270013  0.50526309 2.054691e-03  no pattern detected\n130 67000270014 -0.17894736 2.843217e-01   oscilating hotspot\n131 67000270004 -0.13684209 4.173042e-01  oscilating coldspot\n132 67000330018  0.51578945 1.649022e-03   oscilating hotspot\n133 67000330017 -0.14736842 3.810323e-01  oscilating coldspot\n134 67000270006 -0.11578947 4.956627e-01   oscilating hotspot\n135 67000270003 -0.14736842 3.810323e-01  oscilating coldspot\n136 67000320026  0.53684205 1.049638e-03   oscilating hotspot\n137 67000320006  0.03157894 8.711314e-01    sporadic coldspot\n138 67000270017  0.18947367 2.561450e-01  no pattern detected\n139 67000310014  0.21052630 2.057540e-01   oscilating hotspot\n140 67000310011 -0.06315789 7.211763e-01   oscilating hotspot\n141 67000310003 -0.04210526 8.203382e-01   oscilating hotspot\n142 67000310038  0.58947366 3.166199e-04   oscilating hotspot\n143 67000360004  0.18947367 2.561450e-01  oscilating coldspot\n144 67000360002  0.14736842 3.810323e-01     sporadic hotspot\n145 67000310036  0.51578945 1.649022e-03  consecutive hotspot\n146 67000310019  0.46315786 4.762769e-03  oscilating coldspot\n147 67000310022  0.56842101 5.174875e-04   oscilating hotspot\n148 67000310020  0.46315786 4.762769e-03   oscilating hotspot\n149 67000310032  0.71578944 1.192093e-05   oscilating hotspot\n150 67000310037  0.55789471 6.576777e-04   oscilating hotspot\n151 67000310030  0.45263153 5.819798e-03  oscilating coldspot\n152 67000320033 -0.42105260 1.037426e-02  oscilating coldspot\n153 67000330023  0.53684205 1.049638e-03   oscilating hotspot\n154 67000370033  0.43157890 8.589149e-03   oscilating hotspot\n155 67000360015  0.68421048 2.849102e-05   oscilating hotspot\n156 67000370034  0.38947365 1.786363e-02   oscilating hotspot\n157 67000350036  0.25263155 1.272887e-01   oscilating hotspot\n158 67000350006  0.62105256 1.471043e-04   oscilating hotspot\n159 67000350047  0.55789471 6.576777e-04   oscilating hotspot\n160 67000350031 -0.33684209 4.095455e-02  oscilating coldspot\n161 67000350022  0.52631575 1.318216e-03   oscilating hotspot\n162 67000350010  0.67368418 3.778934e-05   oscilating hotspot\n163 67000310018  0.64210522 8.642673e-05   oscilating hotspot\n164 67000310010  0.37894735 2.124822e-02     sporadic hotspot\n165 67000350035  0.62105256 1.471043e-04   oscilating hotspot\n166 67000350016  0.50526309 2.054691e-03   oscilating hotspot\n167 67000350023  0.44210523 7.083893e-03     sporadic hotspot\n168 67000270019  0.53684205 1.049638e-03   oscilating hotspot\n169 67000310041  0.71578944 1.192093e-05   oscilating hotspot\n170 67000310042  0.18947367 2.561450e-01  oscilating coldspot\n171 67000330040  0.56842101 5.174875e-04   oscilating hotspot\n172 67000340051  0.81052625 7.152557e-07   oscilating hotspot\n173 67000340052  0.52631575 1.318216e-03   oscilating hotspot\n174 67000340053  0.64210522 8.642673e-05   oscilating hotspot\n175 67000340044  0.47368416 3.882647e-03   oscilating hotspot\n176 67000340050  0.28421050 8.551478e-02    sporadic coldspot\n177 67000340049  0.00000000 1.000000e+00   oscilating hotspot\n178 67000340048  0.04210526 8.203382e-01   oscilating hotspot\n179 67000340047 -0.14736842 3.810323e-01    sporadic coldspot\n180 67000340055  0.61052626 1.906157e-04   oscilating hotspot\n181 67000340054  0.33684209 4.095459e-02   oscilating hotspot\n182 67000370042  0.31578946 5.559301e-02     sporadic hotspot\n183 67000370044  0.61052626 1.906157e-04   oscilating hotspot\n184 67000370043  0.58947366 3.166199e-04   oscilating hotspot\n185 67000370040 -0.25263155 1.272887e-01   oscilating hotspot\n186 67000360017  0.26315787 1.118866e-01   oscilating hotspot\n187 67000360016 -0.13684209 4.173042e-01   oscilating hotspot\n188 67000370039 -0.02105263 9.224620e-01   oscilating hotspot\n189 67000370048 -0.39999998 1.496101e-02   oscilating hotspot\n190 67000340046 -0.25263155 1.272887e-01  oscilating coldspot\n191 67000310029 -0.18947367 2.561449e-01  oscilating coldspot\n192 67000340004  0.19999999 2.299690e-01   oscilating hotspot\n193 67000340019 -0.12631577 4.555354e-01    sporadic coldspot\n194 67000340020  0.10526315 5.376031e-01   oscilating hotspot\n195 67000340005  0.06315789 7.211763e-01   oscilating hotspot\n196 67000340041 -0.06315789 7.211763e-01   oscilating hotspot\n197 67000340038 -0.08421052 6.264963e-01   oscilating hotspot\n198 67000340001  0.00000000 1.000000e+00   oscilating hotspot\n199 67000340040 -0.03157894 8.711315e-01  persistent coldspot\n200 67000370016 -0.03157894 8.711315e-01    sporadic coldspot\n201 67000370007 -0.06315789 7.211763e-01  persistent coldspot\n202 67000310043 -0.10526315 5.376032e-01  persistent coldspot\n203 67000340056 -0.12631577 4.555354e-01  persistent coldspot\n204 67000370047 -0.11578947 4.956627e-01  persistent coldspot\n205 67000370045 -0.14736842 3.810323e-01    sporadic coldspot\n206 67000370046 -0.13684209 4.173042e-01    sporadic coldspot\n207 67000370041 -0.04210526 8.203382e-01  persistent coldspot\n208 67000340045 -0.01052632 9.741178e-01  persistent coldspot\n209 67000310017 -0.05263158 7.702878e-01  persistent coldspot\n210 67000310040 -0.19999999 2.299691e-01    sporadic coldspot\n211 67000310027  0.62105256 1.471043e-04   oscilating hotspot\n212 67000310004  0.32631576 4.780459e-02  oscilating coldspot\n213 67000310009  0.23157893 1.629844e-01  oscilating coldspot\n214 67000340008 -0.50526309 2.054718e-03  oscilating coldspot\n215 67000340007 -0.48421049 3.152836e-03  oscilating coldspot\n216 67000340039 -0.47368416 3.882657e-03   oscilating hotspot\n217 67000340025 -0.17894736 2.843217e-01   oscilating hotspot\n218 67000370011 -0.07368421 6.731887e-01     sporadic hotspot\n219 67000370031  0.26315787 1.118866e-01  oscilating coldspot\n220 67000370022 -0.05263158 7.702878e-01  oscilating coldspot\n221 67000370025  0.13684209 4.173042e-01  oscilating coldspot\n222 67000270015  0.21052630 2.057540e-01   oscilating hotspot\n223 67000270016 -0.52631575 1.318217e-03  oscilating coldspot\n224 67000270005 -0.45263153 5.819814e-03  oscilating coldspot\n225 67000270002 -0.47368416 3.882657e-03  oscilating coldspot\n226 67000270001  0.15789473 3.467641e-01    sporadic coldspot\n227 67000350007 -0.12631577 4.555354e-01   oscilating hotspot\n228 67000350051  0.47368416 3.882647e-03   oscilating hotspot\n229 67000350037  0.48421049 3.152847e-03     sporadic hotspot\n230 67000350045  0.50526309 2.054691e-03     sporadic hotspot\n231 67000350009  0.49473679 2.550244e-03   oscilating hotspot\n232 67000350044  0.62105256 1.471043e-04   oscilating hotspot\n233 67000350008  0.55789471 6.576777e-04   oscilating hotspot\n234 67000350002  0.37894735 2.124822e-02   oscilating hotspot\n235 67000350012  0.34736839 3.495502e-02    sporadic coldspot\n236 67000350011  0.65263152 6.592274e-05   oscilating hotspot\n237 67000350001  0.26315787 1.118866e-01  oscilating coldspot\n238 67000310028  0.31578946 5.559301e-02    sporadic coldspot\n239 67000310026  0.66315782 5.006790e-05   oscilating hotspot\n240 67000310021  0.52631575 1.318216e-03   oscilating hotspot\n241 67000310031  0.46315786 4.762769e-03  no pattern detected\n242 67000350021  0.49473679 2.550244e-03   oscilating hotspot\n243 67000350013  0.65263152 6.592274e-05   oscilating hotspot\n244 67000310039  0.36842102 2.517831e-02   oscilating hotspot\n245 67000310024  0.46315786 4.762769e-03     sporadic hotspot\n246 67000310025  0.59999996 2.461672e-04  oscilating coldspot\n247 67000310023  0.56842101 5.174875e-04   oscilating hotspot\n248 67000310008  0.45263153 5.819798e-03  oscilating coldspot\n249 67000350034  0.66315782 5.006790e-05   oscilating hotspot\n250 67000350004  0.85263151 1.192093e-07   oscilating hotspot\n251 67000350048  0.58947366 3.166199e-04   oscilating hotspot\n252 67000350005  0.64210522 8.642673e-05   oscilating hotspot\n253 67000350003  0.71578944 1.192093e-05   oscilating hotspot\n254 67000350024  0.49473679 2.550244e-03   oscilating hotspot\n255 67000350025  0.67368418 3.778934e-05   oscilating hotspot\n256 67000360012  0.82105255 4.768372e-07   oscilating hotspot\n257 67000360008  0.63157892 1.130104e-04   oscilating hotspot\n258 67000350015  0.50526309 2.054691e-03   oscilating hotspot\n\ncount(ehsa, classification)\n\n         classification   n\n1  consecutive coldspot   6\n2   consecutive hotspot   6\n3          new coldspot   2\n4           new hotspot   4\n5   no pattern detected   6\n6   oscilating coldspot  51\n7    oscilating hotspot 110\n8   persistent coldspot   8\n9     sporadic coldspot  34\n10     sporadic hotspot  31\n\n\n\n\nPlot the result of emerging hotspot analysis\n\nggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar(fill=\"light blue\")\n\n\n\n\n\ntainan_ehsa &lt;- left_join(ehsa, tainan, by=c('location'='VILLCODE')) %&gt;% mutate(`p_value` = replace(`p_value`, `p_value` &gt; 0.05, NA), `classification` = ifelse(is.na(`p_value`), NA, `classification`))\n\n\ntainan_ehsa_sf &lt;- tainan_ehsa |&gt; select(location, tau, p_value, classification, geometry)\n\nehsa_sf &lt;- st_as_sf(tainan_ehsa_sf)\n\ntmap_mode(\"plot\")\ntm_shape(ehsa_sf) +\n  tm_fill(col=\"classification\", palette=\"Paired\") +\n  tm_borders()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-continguity-spatial-weights-and-create-row-standardised-weights-matrix",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-continguity-spatial-weights-and-create-row-standardised-weights-matrix",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Computing Continguity Spatial Weights and create row-standardised weights matrix",
    "text": "Computing Continguity Spatial Weights and create row-standardised weights matrix\nAfter finding the number of cases in each village, we need to compute the spatial weights matrix. We will use the st_contiguity() function to compute the contiguity spatial weights and the st_weights() function to create the row-standardised weights matrix.\n\nwm_q &lt;- dengue_village |&gt; \n  mutate(nb = st_contiguity(geometry), \n         wt = st_weights(nb,\n                         style = \"W\"), \n        .before = 1)\n\nWith the spatial weights matrix, we can now compute the global spatial autocorrelation statistics."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#morans-i",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#morans-i",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Moran’s I",
    "text": "Moran’s I\n\nMoran’s I test\nNow, let’s compute the Moran’s I using the global_moran() function from the sfdep package. We will use the num_cases as the attribute data, nb as the spatial weights matrix, and wt as the row-standardised weights matrix.\n\nmoran &lt;- global_moran_test(wm_q$num_cases,\n                  wm_q$nb,\n                  wm_q$wt)\nmoran\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 12.867, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.468299777      -0.003891051       0.001346736 \n\n\nAs we can see from the result, the Moran’s I value is 0.46830, which is positive, and a very small p-value, which is lower than 2.2e-16. This means that there is a positive spatial correlation between the dengue cases in the villages in Tainan City. Moreover, the expectation of the Moran I statistic when there is no spatial correlation is lower than the Moran I statistic, indicating that there is spatial clustering. However, this is only one test that we did, such that this result might be random and not a representative of the actual spatial autocorrelation. As such, we need to do a Monte Carlo simulation to test the significance of the Moran’s I value.\n\n\nMonte Carlo Moran’s I\nNow, let’s compute the Moran’s I using the global_moran_perm() function from the sfdep package. We will set a number of 999 for the number of simulations.\n\nset.seed(19)\nmperm &lt;- global_moran_perm(wm_q$num_cases,\n                  wm_q$nb,\n                  wm_q$wt,\n                  nsim = 999)\nmperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.4683, observed rank = 1000, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\nFrom the result above, we can see that the statistic value is equal to the first test that we did and it is ranked as the 1000 observed values. This means that the observation has the highest Moran I value from the 999 randomly simulated observations. The very low p-value of 2.2e-16 also signifies that our previous claim is justified, that there is a positive spatial autocorrelation for the dengue cases in the villages of Tainan City.\n\nhist(mperm$res, \n     freq=TRUE, \n     breaks=30, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-distance-matrix",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-distance-matrix",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Computing Distance Matrix",
    "text": "Computing Distance Matrix\nSimilar to Global Spatial Autocorrelation, we need to compute the weights matrix, but this time, we use the distance. We will use the st_inverse_distance() function from the sfdep package to compute the inverse distance weights. It computes the inverse of the distance between the centroids of the villages, such that villages that are closer together are assumed to be more likely to have similar number of dengue cases, giving them higher weights.\n\ncent_coords &lt;- st_centroid(dengue_village$geometry) |&gt;\n  st_coordinates() |&gt; \n  as_tibble()\n\nwm_q &lt;- dengue_village |&gt;\n  mutate(nb = st_contiguity(geometry),\n         wt = st_inverse_distance(nb, cent_coords,\n                                  scale = 1),\n         .before = 1)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-local-getis-ord-gi",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-local-getis-ord-gi",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Computing Local Getis-Ord Gi*",
    "text": "Computing Local Getis-Ord Gi*\nNow, let’s compute the local Getis-Ord Gi* statistic using the local_gstar_perm() function from the sfdep package. We will use the distance matrix found in the previous part and set the number of simulations to 999 to find the significance of the local Gi* statistic.\n\nhcsa &lt;- wm_q |&gt; \n  mutate(local_gi = local_gstar_perm(\n    num_cases, nb, wt, nsim=999),\n    .before = 1) |&gt; \n  unnest(local_gi) |&gt;\n  select(gi_star, p_sim, VILLCODE, num_cases) |&gt;\n  mutate(p_sim = replace(p_sim, p_sim &gt; 0.05, NA),\n         gi_star = ifelse(is.na(p_sim), NA, gi_star))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-the-local-getis-ord-gi",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-the-local-getis-ord-gi",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Visualizing the Local Getis-Ord Gi*",
    "text": "Visualizing the Local Getis-Ord Gi*\nNow, let’s visualize the local Getis-Ord Gi* statistic using the tm_shape() and tm_fill() functions from the tmap package. We will use the gi_star as the attribute data and the p_sim as the significance level.\n\ntmap_mode(\"plot\")\ntm_shape(hcsa) +\n  tm_polygons(\"gi_star\", \n              palette = \"-RdYlBu\",\n              style = \"cont\",\n              title = \"Local Getis-Ord Gi*\")\n\n\n\n\nAs seen from the plot above, the red areas are the hotspots, meaning that the number of dengue cases in the village is high, and so are the surrounding villages. On the other hand, the blue areas indicate villages that have low dengue cases and is surrounded by villages that also have low dengue cases.\nWe can also see that most of the coldspots are situated on the outer part of the city, away from the city center. This might be because there are fewer people living in these parts of the city with greater land area, such that the mosquitos have fewer hosts to bite and breed. On the other hand, the hotspots are situated near the city center, where there are more people living in a smaller land area, such that the mosquitos have more hosts to bite and breed. However, it is surprising that the city center itself is not a hotspot. This might be due to the fact that the city center is more developed and has better infrastructure, especially good drainage systems, such that the mosquitos have fewer places to breed."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-preparation",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nCreate empty dataframe\nWe need to create an empty dataframe containing all the possible combinations of the village code and the epidemiology week. This is so that the dimension of our dataframe will suit the criterias for a spacetime cube.\n\nvill_code_unique &lt;- unique(tainan$VILLCODE)\nepiwk_unique &lt;- unique(dengue$EPIWEEK)\ndengue_empty &lt;- expand.grid(VILLCODE = vill_code_unique, EPIWEEK = epiwk_unique) |&gt; \n  mutate(VILLCODE = as.character(VILLCODE))\n\n\n\nCombine the sf objects to find cases in each village\nWe then filter the dengue cases by using the st_join() function from the sf package to make sure that all the cases are located within our interested boundery. We will use the st_contains as the join argument to find the cases that are within the area of interest.\n\ndengue_vill &lt;- st_join(tainan, dengue_sf, join=st_contains)\n\ndengue_vill_summ &lt;- dengue_vill |&gt; \n  group_by(VILLNAME, VILLCODE, TOWNID, EPIWEEK) |&gt; \n  summarise(num_cases = n())\n\nsaveRDS(dengue_vill, \"rds/dengue_vill.rds\")\nsaveRDS(dengue_vill_summ, \"rds/dengue_vill_summ.rds\")\n\n\ndengue_vill &lt;- readRDS(\"rds/dengue_vill.rds\")\ndengue_vill_summ &lt;- readRDS(\"rds/dengue_vill_summ.rds\")\n\n\n\nCreate dataframe to compile all the number of cases in each village per week\nNext, we use ‘left_join()’ to join the empty dataframe with the dengue cases dataframe. Then, we use ‘mutate()’ to replace the NA values with 0.\nWe also drop the geometry column from the dengue_vill_summ dataframe as we only require the attribute data to make the dengue data frame.\n\ndengue_df &lt;- st_drop_geometry(dengue_vill_summ)\n\ndengue_df &lt;- left_join(dengue_empty, dengue_df, by=c(\"VILLCODE\" = \"VILLCODE\", \"EPIWEEK\" = \"EPIWEEK\"))\n\ndengue_df &lt;- dengue_df |&gt; \n  select(VILLCODE, VILLNAME, TOWNID, EPIWEEK, num_cases) |&gt;\n  mutate(num_cases = replace_na(num_cases, 0))\n\ntainan_village &lt;- tainan |&gt; \n  st_drop_geometry() |&gt; \n  select(VILLCODE, VILLNAME, TOWNID)\n\ndengue_df &lt;- rows_patch(dengue_df, tainan_village, by=c(\"VILLCODE\"))\n\n\n\nCreate spacetime object\nTo create the spacetime object, we use the spacetime() function from the sfdep package. We will use the dengue_df as the data, tainan as the geometry, VILLCODE as the location column, and EPIWEEK as the time column. We also need to make sure that the location and time columns are inside the dataframe and the geometry dataset.\n\ndengue_st &lt;- spacetime(\n  .data = dengue_df, \n  .geometry = tainan, \n  .loc_col = \"VILLCODE\", \n  .time_col = \"EPIWEEK\"\n)\n\n\n\nActivate the spacetime object into data\nTo see what the spacetime object is like and what it contains, we can activate the spactime object into data.\n\nactivate(dengue_st, \"data\")\n\n\nglimpse(dengue_st)\n\nRows: 5,160\nColumns: 5\n$ VILLCODE  &lt;chr&gt; \"67000350032\", \"67000270011\", \"67000370005\", \"67000330004\", …\n$ VILLNAME  &lt;chr&gt; \"青草里\", \"保安里\", \"赤嵌里\", \"大成里\", \"城北里\", \"城南里\", …\n$ TOWNID    &lt;chr&gt; \"D06\", \"D32\", \"D08\", \"D02\", \"D06\", \"D06\", \"D08\", \"D06\", \"D06…\n$ EPIWEEK   &lt;dbl&gt; 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, …\n$ num_cases &lt;int&gt; 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 34, 2,…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#emerging-hotspot-analysis-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#emerging-hotspot-analysis-1",
    "title": "Take Home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan",
    "section": "Emerging Hotspot Analysis",
    "text": "Emerging Hotspot Analysis\n\nCheck for time-series cube\nBefore we can do the emerging hotspot analysis, we need to check if the spacetime object is a spacetime cube.\n\nis_spacetime_cube(dengue_st)\n\n[1] TRUE\n\n\n\n\nComputing Spatial Weights\nNow, we compute the spatial weights using the st_contiguity() function from the sfdep package. We will use the include_self() function to include itself in the spatial weights, and the st_inverse_distance() function to compute the inverse distance weights, as we assume that the neighbouring areas are more similar to each other.\n\ncoords_center &lt;- st_centroid(dengue_village$geometry) |&gt; \n  st_coordinates() |&gt; \n  as_tibble()\n\ndengue_nb &lt;- dengue_st |&gt;\n  activate(\"geometry\") |&gt;\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, coords_center,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) |&gt;  \n  set_wts(\"wt\") |&gt;\n  set_nbs(\"nb\")\n\n\n\nComputing local Gi*\nNext, we compute the local Gi* for each week using the local_gstar_perm() function from the sfdep package. We will also set the number of simulations to 999.\n\ngi_star_ehsa &lt;- dengue_nb |&gt; \n  group_by(EPIWEEK) |&gt;\n  mutate(gi_star = local_gstar_perm(\n    num_cases, nb, wt, nsim=999),\n    .before = 1) |&gt; \n  unnest(gi_star)\n\n\n\nMann-Kendall Test\nWe then use the Mann-Kendall test to check for the monotonic trend in the series. However, we need to define the null and alternative hypothesis first and set the significance level.\n\nH0: There is no monotonic trend in the series\nH1: A trend exists, can be positive, negative, or non-null\nSignificance level: 0.05\n\n\n\nSelecting Study Area\nFor this analysis, we will focus on selecting 3 villages from different TOWNID to see the different trends across the area of interest.\nFirst, we select the top 5 Towns with the highest number of cases in the first, middle, and last week of the timeframe.\n\ndengue_df |&gt; \n  filter(EPIWEEK == 31) |&gt;\n  group_by(TOWNID) |&gt;\n  summarise(tot_cases = sum(num_cases)) |&gt;\n  top_n(5, tot_cases) |&gt;\n  arrange(desc(tot_cases)) |&gt;\n  pull(TOWNID)\n\n[1] \"D39\" \"D01\" \"D06\" \"D32\" \"D04\"\n\n\n\ndengue_df |&gt;\n  filter(EPIWEEK == 40) |&gt; \n  group_by(TOWNID) |&gt;\n  summarise(tot_cases = sum(num_cases)) |&gt;\n  top_n(5, `tot_cases`) |&gt;\n  arrange(desc(`tot_cases`)) |&gt;\n  pull(TOWNID)\n\n[1] \"D01\" \"D02\" \"D04\" \"D06\" \"D39\"\n\n\n\ndengue_df |&gt; \n  filter(EPIWEEK == 47) |&gt; \n  group_by(TOWNID) |&gt;\n  summarise(tot_cases = sum(num_cases)) |&gt;\n  top_n(5, `tot_cases`) |&gt;\n  arrange(desc(`tot_cases`)) |&gt;\n  pull(TOWNID)\n\n[1] \"D01\" \"D04\" \"D39\" \"D02\" \"D32\"\n\n\nWe can see that the cases in towns D39, D04, and D01 are the highest in the first, middle, and last week of the timeframe.\nSo, let’s us take a look closer on the villages that are within the towns D39, D04, and D01.\n\nD39D04D01\n\n\n\ndengue_df |&gt; \n  filter(EPIWEEK == 31 & TOWNID == \"D39\") |&gt; \n  top_n(5, `num_cases`) |&gt;\n  arrange(desc(`num_cases`)) |&gt;\n  pull(VILLNAME)\n\n[1] \"五王里\" \"勝利里\" \"二王里\" \"復華里\" \"崑山里\" \"東橋里\" \"三合里\" \"六合里\"\n\n\n\ndengue_df |&gt; \n  filter(EPIWEEK == 40 & TOWNID == \"D39\") |&gt; \n  top_n(5, `num_cases`) |&gt;\n  arrange(desc(`num_cases`)) |&gt;\n  pull(VILLNAME)\n\n[1] \"復華里\" \"勝利里\" \"二王里\" \"中華里\" \"六合里\"\n\n\n\ndengue_df |&gt; \n  filter(EPIWEEK == 50 & TOWNID == \"D39\") |&gt; \n  top_n(5, `num_cases`) |&gt;\n  arrange(desc(`num_cases`)) |&gt;\n  pull(VILLNAME)\n\n[1] \"東橋里\" \"西灣里\" \"三合里\" \"二王里\" \"塩行里\" \"塩興里\"\n\n\nWe can see here that the number of cases in the 二王里 village of D39 keeps being in the top 5 most number of dengue cases. So, we are interested in finding more on the trend of the dengue cases for this village.\n\n\n\ndengue_df |&gt; \n  filter(EPIWEEK == 31 & TOWNID == \"D04\") |&gt; \n  top_n(5, `num_cases`) |&gt;\n  arrange(desc(`num_cases`)) |&gt;\n  pull(VILLNAME)\n\n[1] \"公園里\" \"成德里\" \"大豐里\" \"北門里\" \"元寶里\" \"合興里\" \"振興里\"\n\n\n\ndengue_df |&gt; \n  filter(EPIWEEK == 40 & TOWNID == \"D04\") |&gt; \n  top_n(5, `num_cases`) |&gt;\n  arrange(desc(`num_cases`)) |&gt;\n  pull(VILLNAME)\n\n[1] \"大港里\" \"大豐里\" \"北門里\" \"大和里\" \"大興里\" \"小北里\"\n\n\n\ndengue_df |&gt; \n  filter(EPIWEEK == 50 & TOWNID == \"D04\") |&gt; \n  top_n(5, `num_cases`) |&gt;\n  arrange(desc(`num_cases`)) |&gt;\n  pull(VILLNAME)\n\n[1] \"公園里\" \"北門里\" \"中樓里\" \"正覺里\" \"小北里\" \"力行里\" \"開元里\" \"振興里\"\n[9] \"文元里\"\n\n\nThe village 北門里 of D04 is the only village that keeps being in the top 5 most number of dengue cases. As such, we want to know more about the trend of the dengue cases happening in this village.\n\n\n\ndengue_df |&gt; \n  filter(EPIWEEK == 31 & TOWNID == \"D01\") |&gt; \n  top_n(5, `num_cases`) |&gt;\n  arrange(desc(`num_cases`)) |&gt;\n  pull(VILLNAME)\n\n[1] \"崇學里\" \"德光里\" \"崇德里\" \"大智里\" \"崇善里\"\n\n\n\ndengue_df |&gt; \n  filter(EPIWEEK == 40 & TOWNID == \"D01\") |&gt; \n  top_n(5, `num_cases`) |&gt;\n  arrange(desc(`num_cases`)) |&gt;\n  pull(VILLNAME)\n\n[1] \"自強里\" \"東明里\" \"新東里\" \"莊敬里\" \"裕農里\"\n\n\n\ndengue_df |&gt; \n  filter(EPIWEEK == 50 & TOWNID == \"D01\") |&gt; \n  top_n(5, `num_cases`) |&gt;\n  arrange(desc(`num_cases`)) |&gt;\n  pull(VILLNAME)\n\n [1] \"富強里\" \"裕聖里\" \"關聖里\" \"大智里\" \"崇文里\" \"崇成里\" \"崇明里\" \"大福里\"\n [9] \"崇德里\" \"大德里\" \"崇學里\" \"和平里\" \"崇善里\" \"路東里\" \"虎尾里\" \"忠孝里\"\n[17] \"崇信里\" \"德光里\" \"復興里\" \"自強里\" \"文聖里\" \"富裕里\" \"龍山里\" \"新東里\"\n[25] \"泉南里\" \"東聖里\" \"東安里\" \"大同里\" \"衛國里\" \"裕農里\" \"南聖里\" \"崇誨里\"\n[33] \"東門里\" \"中西里\" \"東明里\" \"圍下里\" \"東光里\" \"後甲里\" \"莊敬里\" \"小東里\"\n[41] \"大學里\" \"成大里\" \"德高里\" \"仁和里\" \"東智里\"\n\n\nThere are no village that always appear in top 5. However, the village 大智里 of D01 appears in the beginning and at the end, while disappearing in the middle. It is interesting to see how the number of cases changes over the course of the timeframe for this village.\n\n\n\nFrom the list of villages above, we then choose one village that reflects a similar trend to the number of cases in each town. We will also plot the time series graph of the number of cases in the village and perform the Mann-Kendall test.\n\n二王里 of D39北門里 of D04大智里 of D01\n\n\n\nerwang_ehsa &lt;- gi_star_ehsa |&gt; \n  ungroup() |&gt;\n  filter(VILLNAME == \"二王里\") |&gt; \n  select(VILLNAME, EPIWEEK, gi_star)\n\nggplot(data = erwang_ehsa, \n       aes(x = EPIWEEK, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\nerwang_ehsa |&gt;\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) |&gt; \n  unnest_wider(mk)\n\n# A tibble: 1 × 5\n     tau       sl     S     D  varS\n   &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 -0.621 0.000147  -118  190.   950\n\n\n\n\n\nbeimen_ehsa &lt;- gi_star_ehsa |&gt;\n  ungroup() |&gt;\n  filter(VILLNAME == \"北門里\") |&gt; \n  select(VILLNAME, EPIWEEK, gi_star)\n\nggplot(data = beimen_ehsa, \n       aes(x = EPIWEEK, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\nbeimen_ehsa |&gt;\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) |&gt; \n  unnest_wider(mk)\n\n# A tibble: 1 × 5\n     tau    sl     S     D  varS\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 0.0947 0.581    18  190.   950\n\n\n\n\n\ndazhi_ehsa &lt;- gi_star_ehsa |&gt;\n  ungroup() |&gt;\n  filter(VILLNAME == \"大智里\") |&gt; \n  select(VILLNAME, EPIWEEK, gi_star)\n\nggplot(data = dazhi_ehsa, \n       aes(x = EPIWEEK, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\ndazhi_ehsa |&gt;\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) |&gt; \n  unnest_wider(mk)\n\n# A tibble: 1 × 5\n     tau    sl     S     D  varS\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 -0.200 0.230   -38  190.   950\n\n\n\n\n\n\nAnalysis\n\n二王里 of D39: From the time-series graph, we can see that the number of cases across the weeks decreases. The Mann-Kendall test also shows that there is a significant decreasing trend in the number of cases. As such, we can reject the null hypothesis that there is no monotonic trend in the series and conclude that the rate of dengue cases happening per week decreases over time.\n北門里 of D04: From the time-series graph, we can see that the number of cases are at a constant high until the end. From the result of the Mann-Kendall test, we can see that there is no significant trend in the number of cases. As such, we cannot reject the null hypothesis and conclude that there is no monotonic trend in the series. This means that the rate of dengue cases happening per week fluctuates and there is no trend in the number of dengue cases.\n大智里 of D01: From the time-series graph, we can see that the number of cases decreases in the beginning but increases towards the end. True as what the Mann-Kendall test shows, that there is no significant trend in the number of cases. As such, we cannot reject the null hypothesis and conclude that there is no monotonic trend in the series. This means that the number of dengue cases fluctuates from time to time.\n\n\n\n\nEHSA for all the villages\nNow, let us do the emerging hotspot analysis for all the villages in Tainan City using the emerging_hostpost_analysis() function from sfdep package.\n\nset.seed(19)\nehsa &lt;- emerging_hotspot_analysis(x = dengue_st, \n                                  .var = \"num_cases\", \n                                  k = 1, nsim = 99)\nsaveRDS(ehsa, \"rds/ehsa.rds\")\n\n\nehsa &lt;- readRDS(\"rds/ehsa.rds\")\ncount(ehsa, classification)\n\n        classification   n\n1 consecutive coldspot   5\n2  consecutive hotspot   7\n3          new hotspot   3\n4  no pattern detected   6\n5  oscilating coldspot  53\n6   oscilating hotspot 110\n7  persistent coldspot   6\n8    sporadic coldspot  36\n9     sporadic hotspot  32\n\n\nThe count table shows how many villages are in each classification. We can see that there are 5 villages that are persistent coldspots, 109 villages in the oscilating hotspot, and 1 village as a new coldspot.\n\n\nPlot the result of emerging hotspot analysis\nLet us see the distribution of the different classifications of the villages in Tainan City.\n\nggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar(fill=\"light blue\")\n\n\n\n\nTo see the locations of the different classifications of the villages, we will plot the map of Tainan City and overlay the emerging hotspot analysis result on the map.\nFirst, we need to combine the emerging hotspot analysis result with the Tainan geospatial data using the left_join() function from the dplyr package. We also need to remove the insignificant rows by replacing the rows that has p-value more than 0.05 with NA.\n\ntainan_ehsa &lt;- left_join(ehsa, tainan, by=c('location'='VILLCODE')) |&gt; \n  mutate(`p_value` = replace(`p_value`, `p_value` &gt; 0.05, NA), \n         `classification` = ifelse(is.na(`p_value`), NA, `classification`))\n\nSince the above dataset is still in a dataframe format, we need to change it into a sf object using the st_as_sf() function from the sf package to be able to plot it using the tmap package.\n\ntainan_ehsa_sf &lt;- tainan_ehsa |&gt; \n  select(location, tau, p_value, classification, geometry)\n\nehsa_sf &lt;- st_as_sf(tainan_ehsa_sf)\n\ntmap_mode(\"plot\")\ntm_shape(ehsa_sf) +\n  tm_fill(col=\"classification\", palette=\"Paired\") +\n  tm_borders()\n\n\n\n\nFrom the map above, we can see that most of the villages are oscillating hotspot, meaning that they are statistically significant hotspot at the end of the timeframe although they are statistically significant coldspot at the beginning of the timeframe. Most of these villages are located on the D06 town. This might be because as more mosquitoes breed, the range of reach for these mosquitoes widen, especially to the more rural part of the city.\nIn conclusion, based on the analysis, we can say that the dengue cases in Tainan City are spatially and spatio-temporally correlated. As seen from the HCSA, there are hotspot and coldspot clusters identified. Moreover, the ESHA shows that though the number of cases in many of the village fluctuates we can still see a trend to the number of dengue cases happening in each village."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "title": "In-class Exercise 6",
    "section": "",
    "text": "Library import\n\npacman::p_load(sf, spdep, tmap, tidyverse, ClustGeo, ggpubr, cluster, factoextra, NbClust, sp, heatmaply, corrplot, psych, GGally)\n#gdal already retired\n\n\n\nData import\n\nshan_sf &lt;- st_read(dsn = \"data/geospatial\", layer=\"myanmar_township_boundaries\") |&gt; filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) |&gt; \n  select(c(2:7)) #make the data frame smaller to increase computational speed and less memory usage\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\Users\\emily\\OneDrive\\Documents\\SMU\\Y3S2\\Geospatial Analysis\\IS415-GAA\\In-class_Ex\\In-class_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\nshan_sf #see if it is an sf object\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1  Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2  Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3  Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4  Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5  Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6  Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7  Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8  Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9  Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                         geometry\n1  MULTIPOLYGON (((96.96001 23...\n2  MULTIPOLYGON (((96.7731 21....\n3  MULTIPOLYGON (((96.78483 21...\n4  MULTIPOLYGON (((96.49518 20...\n5  MULTIPOLYGON (((96.66306 24...\n6  MULTIPOLYGON (((96.49518 20...\n7  MULTIPOLYGON (((97.14738 19...\n8  MULTIPOLYGON (((96.94981 22...\n9  MULTIPOLYGON (((96.75648 22...\n10 MULTIPOLYGON (((96.95498 22...\n\nclass(shan_sf) #check the class of the object\n\n[1] \"sf\"         \"data.frame\"\n\n\n\nict &lt;- read.csv(\"data/aspatial/Shan-ICT.csv\")\nsummary(ict)\n\n District.Pcode     District.Name      Township.Pcode     Township.Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total.households     Radio         Television    Land.line.phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile.phone      Computer      Internet.at.home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total.households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total.households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land.line.phone`/`Total.households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile.phone`/`Total.households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total.households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet.at.home`/`Total.households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District.Pcode`,`DT`=`District.Name`,\n         `TS_PCODE`=`Township.Pcode`, `TS`=`Township.Name`,\n         `TT_HOUSEHOLDS`=`Total.households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land.line.phone`, `MPHONE`=`Mobile.phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet.at.home`) \n\n\n\nEDA\n\n#build a lot of histograms together\nradio &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv &lt;- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone &lt;- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone &lt;- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer &lt;- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet &lt;- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2) # to combine the graphs together\n\n\n\n\n\nshan_sf &lt;- left_join(shan_sf, ict_derived, by=c(\"TS_PCODE\" = \"TS_PCODE\")) #in reality you dont need the by statement as the name of the column is the same\n# if you want to combine the data, it is recommended to do the spatial in the beginning for left_join\n\nwrite_rds(shan_sf, 'data/rds/shan_sf.rds')\n\n\nshan_sf &lt;- read_rds('data/rds/shan_sf.rds')\n\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n#prepare data for cluster analysis\ncluster_vars &lt;- shan_sf |&gt;\n  st_set_geometry(NULL) |&gt;\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\n\nhead(cluster_vars, 10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n#change row name to the township name\nrow.names(cluster_vars) &lt;- cluster_vars$TS.x\nhead(cluster_vars, 10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\nshan_ict &lt;- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n#min-max standardization\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\n\n#z-score standardization\nshan_ict.z &lt;- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\nProximity matrix\n\nproxmat &lt;- dist(shan_ict, method = \"euclidean\")\n#methods can be changed to other types provided in the documentation\n#type is list\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n#will retain the row names of the data frame\n\n\nhclust_ward &lt;- hclust(proxmat, method = \"ward.D\")\n#other methods are available\n\n\nplot(hclust_ward, cex = 0.6)\n\n\n\n#the cex is the size of the text\n\n\n\nDetermine optimal clusters\n\nset.seed(12345)\ngap_stat &lt;- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\n\nfviz_gap_stat(gap_stat)\n\n\n\n\nThe graph goes down adn the up then down and up again, so choose the highest optimization value on the first bump, which is 5 or 6 in this case. From the statistic, the cluster 6 has a higher optimization, so that we can use cluster 6. see the gap value in the statistic\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, #number of cluster that you want to stop at\n            border = 2:5)\n\n\n\n\ntry going for a 10 cluster\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 10, #number of cluster that you want to stop at\n            border = 2:5)\n\n\n\n\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;% # use cbind because this one is just a list, and no unique identifier, but no sorting\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n# the cluster number is a factor, so the cluster is nominal\n\ndont need to use the as_Spatial() function because the latest version of spdep accepts sf object\n\nshan.nb &lt;- poly2nb(shan_sf)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\n\n\nplot\n\nplot(st_geometry(shan_sf), # st_geometry to output only one layer of geometry, without the st_geometry--&gt; then will plot the different columns; this is for the map \n     border=grey(.5))\n\npts&lt;- st_coordinates(st_centroid(shan_sf))\nplot(shan.nb, #give the edge\n     pts, #give the points\n     col=\"blue\", \n     add=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "Topics covered:\n\nHow to delineate homogenous region by using geographically referenced multivariate data\nTwo major analysis:\n\nHierarchical cluster analysis\nSpatially constrained cluster analysis\n\n\n\n\nIt is a common practice to delineate the market or planning area into homogenous regions in geobusiness and spatial policy using multivariate data.\nThis hands-on exercise will lok at the Shan State, Myanmar and delineate it into homogenous regions by using multiple information and communication technology (ICT) measures.\n\n\n\n\nMyanmar Township Boundary Data: a GIS data in ESRI shapefile format.\n\nconsists of township boundary information of Myanmar\nin polygon features\ntaken from Myanmar Information Management Unit (MIMU)\n\nShan-ICT.csv\n\nan extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level\ntaken from Myanmar Information Management Unit (MIMU)\n\n\n\n\n\n\nSpatial data handling\n\nsf, rgdal and spdep\n\nAttribute data handling\n\ntidyverse (readr, ggplot2, dplyr)\n\nchoropleth map\n\ntmap\n\nmultivariate data visualization and analysis\n\ncoorplot, ggpubr, heatmaply\n\ncluster analysis\n\ncluster, ClustGeo\n\n\n\npacman::p_load(rgdal, spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#the-analytical-question",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#the-analytical-question",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "It is a common practice to delineate the market or planning area into homogenous regions in geobusiness and spatial policy using multivariate data.\nThis hands-on exercise will lok at the Shan State, Myanmar and delineate it into homogenous regions by using multiple information and communication technology (ICT) measures."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#data",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#data",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "Myanmar Township Boundary Data: a GIS data in ESRI shapefile format.\n\nconsists of township boundary information of Myanmar\nin polygon features\ntaken from Myanmar Information Management Unit (MIMU)\n\nShan-ICT.csv\n\nan extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level\ntaken from Myanmar Information Management Unit (MIMU)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#install-and-load-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#install-and-load-r-packages",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "Spatial data handling\n\nsf, rgdal and spdep\n\nAttribute data handling\n\ntidyverse (readr, ggplot2, dplyr)\n\nchoropleth map\n\ntmap\n\nmultivariate data visualization and analysis\n\ncoorplot, ggpubr, heatmaply\n\ncluster analysis\n\ncluster, ClustGeo\n\n\n\npacman::p_load(rgdal, spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#geospatial-data",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Geospatial Data",
    "text": "Geospatial Data\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf.\n\nshan_sf &lt;- st_read(dsn = \"data/geospatial\", \n                   layer = \"myanmar_township_boundaries\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\Users\\emily\\OneDrive\\Documents\\SMU\\Y3S2\\Geospatial Analysis\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe imported township boundary object is called shan_sf. It is saved in simple feature data.frame format. We can view the content of the newly created shan_sf simple features data.frame by using the code chunk below.\n\nshan_sf\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1  Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2  Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3  Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4  Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5  Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6  Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7  Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8  Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9  Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                         geometry\n1  MULTIPOLYGON (((96.96001 23...\n2  MULTIPOLYGON (((96.7731 21....\n3  MULTIPOLYGON (((96.78483 21...\n4  MULTIPOLYGON (((96.49518 20...\n5  MULTIPOLYGON (((96.66306 24...\n6  MULTIPOLYGON (((96.49518 20...\n7  MULTIPOLYGON (((97.14738 19...\n8  MULTIPOLYGON (((96.94981 22...\n9  MULTIPOLYGON (((96.75648 22...\n10 MULTIPOLYGON (((96.95498 22...\n\n\nNotice that sf.data.frame is conformed to Hardy Wickham’s tidy framework.\nSince shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it’s fields.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       &lt;chr&gt; \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (South)…\n$ ST_PCODE &lt;chr&gt; \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\", \"…\n$ DT       &lt;chr&gt; \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"Ta…\n$ DT_PCODE &lt;chr&gt; \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MMR0…\n$ TS       &lt;chr&gt; \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kalaw…\n$ TS_PCODE &lt;chr&gt; \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR01501…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (((…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#aspatial-data",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Aspatial Data",
    "text": "Aspatial Data\nThe csv file will be import using read_csv function of readr package.\n\nict &lt;- read_csv (\"data/aspatial/Shan-ICT.csv\")\n\nThe imported InfoComm variables are extracted from The 2014 Myanmar Population and Housing Census Myanmar. The attribute data set is called ict. It is saved in R’s * tibble data.frame* format.\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of eleven fields and 55 observation in the tibble data.frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#derive-new-variable-using-dplyr-package",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#derive-new-variable-using-dplyr-package",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Derive new variable using dplyr package",
    "text": "Derive new variable using dplyr package\nThe unit of measurement of the values are number of household. Using these values directly will be bias by the underlying total number of households. In general, the townships with relatively higher total number of households will also have higher number of households owning radio, TV, etc.\nIn order to overcome this problem, we will derive the penetration rate of each ICT variable by using the code chunk below.\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\nLet us review the summary statistics of the newly derived penetration rates using the code chunk below.\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\nNotice that six new fields have been added into the data.frame. They are RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR, and INTERNET_PR."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#statistical-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#statistical-graphics",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Statistical graphics",
    "text": "Statistical graphics\nWe can plot the distribution of the variables (i.e. Number of households with radio) by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\nHistogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\nBoxplot is useful to detect if there are outliers.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\nNext, we will also plotting the distribution of the newly derived variables (i.e. Radio penetration rate) by using the code chunk below.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\nWhat can you observed from the distributions reveal in the histogram and boxplot?\n\nThe distribution for the radio penetration rate is more normally distributed as compared to the raw radio data. There are also fewer outliers in the data. As the penetration rate is more of a standardized metrics to see how many households have the ICT technologies, it is a good measure to compare between the different regions of the ICT penetration.\n\nWe can also plot multiple histograms to reveal the distribution of the selected variables in the ict_derived data.frame.\nThe code chunks below are used to create the data visualisation. They consist of two main parts. First, we will create the individual histograms using the code chunk below.\n\nradio &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv &lt;- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone &lt;- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone &lt;- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer &lt;- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet &lt;- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nNext, the ggarrange() function of ggpubr package is used to group these histograms together.\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#choropleth-map",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#choropleth-map",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Choropleth map",
    "text": "Choropleth map\n\nJoining geospatial data with aspatial data\nBefore we can prepare the choropleth map, we need to combine both the geospatial data object (i.e. shan_sf) and aspatial data.frame object (i.e. ict_derived) into one. This will be performed by using the left_join function of dplyr package. The shan_sf simple feature data.frame will be used as the base data object and the ict_derived data.frame will be used as the join table.\nThe code chunks below is used to perform the task. The unique identifier used to join both data objects is TS_PCODE.\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")\n\nThe message above shows that TS_CODE field is the common field used to perform the left-join.\nIt is important to note that there is no new output data been created. Instead, the data fields from ict_derived data frame are now updated into the data frame of shan_sf.\n\nshan_sf &lt;- read_rds(\"data/rds/shan_sf.rds\")\nglimpse(shan_sf)\n\nRows: 55\nColumns: 23\n$ ST            &lt;chr&gt; \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (S…\n$ ST_PCODE      &lt;chr&gt; \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR01…\n$ DT.x          &lt;chr&gt; \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\"…\n$ DT_PCODE.x    &lt;chr&gt; \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", …\n$ TS.x          &lt;chr&gt; \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"…\n$ TS_PCODE      &lt;chr&gt; \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR…\n$ DT_PCODE.y    &lt;chr&gt; \"MMR015D003\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", …\n$ DT.y          &lt;chr&gt; \"Kyaukme\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Kyaukme\"…\n$ TS.y          &lt;chr&gt; \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"…\n$ TT_HOUSEHOLDS &lt;dbl&gt; 13652, 17544, 18348, 25504, 8632, 41341, 20084, 25957, 3…\n$ RADIO         &lt;dbl&gt; 3907, 7324, 8890, 5908, 3880, 11607, 6399, 10048, 11257,…\n$ TV            &lt;dbl&gt; 7565, 8862, 4781, 13816, 6117, 25285, 10762, 16353, 1765…\n$ LLPHONE       &lt;dbl&gt; 482, 348, 219, 728, 628, 1739, 800, 818, 1239, 1123, 310…\n$ MPHONE        &lt;dbl&gt; 3559, 2849, 2207, 6363, 3389, 16900, 4315, 8321, 10409, …\n$ COMPUTER      &lt;dbl&gt; 166, 226, 81, 351, 142, 1225, 381, 565, 508, 878, 2028, …\n$ INTERNET      &lt;dbl&gt; 321, 136, 152, 737, 165, 1741, 316, 556, 1216, 936, 2020…\n$ RADIO_PR      &lt;dbl&gt; 286.18517, 417.46466, 484.52147, 231.64994, 449.49027, 2…\n$ TV_PR         &lt;dbl&gt; 554.1313, 505.1300, 260.5734, 541.7189, 708.6423, 611.62…\n$ LLPHONE_PR    &lt;dbl&gt; 35.306182, 19.835841, 11.935906, 28.544542, 72.752549, 4…\n$ MPHONE_PR     &lt;dbl&gt; 260.69440, 162.39170, 120.28559, 249.49028, 392.60890, 4…\n$ COMPUTER_PR   &lt;dbl&gt; 12.159391, 12.881897, 4.414650, 13.762547, 16.450417, 29…\n$ INTERNET_PR   &lt;dbl&gt; 23.513038, 7.751938, 8.284282, 28.897428, 19.114921, 42.…\n$ geometry      &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((96.96001 23..., MULTIPOLYGO…\n\n\n\n\nPreparing a choropleth map\nTo have a quick look at the distribution of Radio penetration rate of Shan State at township level, a choropleth map will be prepared.\nThe code chunks below are used to prepare the choroplethby using the qtm() function of tmap package.\n\ntmap_mode(\"plot\")\nqtm(shan_sf, \"RADIO_PR\")\n\n\n\n\nIn order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map) by using the code chunk below.\n\nTT_HOUSEHOLDS.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\nNotice that the choropleth maps above clearly show that townships with relatively larger number ot households are also showing relatively higher number of radio ownership.\nNow let us plot the choropleth maps showing the distribution of total number of households and Radio penetration rate by using the code chunk below.\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\nCan you identify the differences?\n\nWhen comparing the number of radios per region with the total population number, we can only roughly tell that the regions with high number of households has more numbers of radio, but we cannot clearly tell if most of the people in the region has a radio, especially with the low number of households.\nHowever, when we see the radio penetration rate, we can clearly see the regions where most of the households has a radio, which mostly are the regions that has lower number of population."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#extracting-clustering-variables",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#extracting-clustering-variables",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Extracting clustering variables",
    "text": "Extracting clustering variables\nThe code chunk below will be used to extract the clustering variables from the shan_sf simple feature object into data.frame.\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR.\nNext, we need to change the rows by township name instead of row number by using the code chunk below\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the row number has been replaced into the township name.\nNow, we will delete the TS.x field by using the code chunk below.\n\nshan_ict &lt;- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#data-standardization",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#data-standardization",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Data Standardization",
    "text": "Data Standardization\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\nMin-Max standardization\nIn the code chunk below, normalize() of heatmaply package is used to stadardisation the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.\n\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nNotice that the values range of the Min-max standardised clustering variables are 0-1 now.\n\n\nZ-score standardization\nZ-score standardisation can be performed easily by using scale() of Base R. The code chunk below will be used to stadardisation the clustering variables by using Z-score method.\n\nshan_ict.z &lt;- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nNotice the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\nNote: describe() of psych package is used here instead of summary() of Base R because the earlier provides standard deviation.\nWarning: Z-score standardisation method should only be used if we would assume all variables come from some normal distribution.\n\n\nVisualize the standardized clustering variables\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.\nThe code chunk below plot the scaled Radio_PR field.\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\nWhat statistical conclusion can you draw from the histograms above?\n\nThe distribution of the standardized data for min-max and z-score is very similar.\n\nDensity plot of the distribution of data\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#computing-proximity-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#computing-proximity-matrix",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Computing proximity matrix",
    "text": "Computing proximity matrix\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\n\nThe code chunk below can then be used to list the content of proxmat for visual inspection.\n\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#computing-hierarchical-clustering",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#computing-hierarchical-clustering",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Computing hierarchical clustering",
    "text": "Computing hierarchical clustering\nIn R, there are several packages provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below.\n\nplot(hclust_ward, cex = 0.6)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#selecting-the-optimal-clustering-algorithm",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#selecting-the-optimal-clustering-algorithm",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Selecting the optimal clustering algorithm",
    "text": "Selecting the optimal clustering algorithm\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\nm &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac &lt;- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#determining-optimal-clusters",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#determining-optimal-clusters",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Determining Optimal Clusters",
    "text": "Determining Optimal Clusters\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\nGap Statistic Method\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(12345)\ngap_stat &lt;- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\n\nfviz_gap_stat(gap_stat)\n\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.\n\n\nInterpreting the dendograms\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\nVisually-driven hierarchical clustering analysis\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\nTransforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform shan_ict data frame into a data matrix.\n\nshan_ict_mat &lt;- data.matrix(shan_ict)\n\n\n\nPlotting interactive cluster heatmap using heatmaply()\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#mapping-the-clusters-formed",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#mapping-the-clusters-formed",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Mapping the clusters formed",
    "text": "Mapping the clusters formed\nWith closed examination of the dendragram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#converting-into-spatialpolygonsdataframe",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#converting-into-spatialpolygonsdataframe",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Converting into SpatialPolygonsDataFrame",
    "text": "Converting into SpatialPolygonsDataFrame\nFirst, we need to convert shan_sf into SpatialPolygonsDataFrame. This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below uses as_Spatial() of sf package to convert shan_sf into a SpatialPolygonDataFrame called shan_sp.\n\nshan_sp &lt;- as_Spatial(shan_sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#computing-neighbour-list",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#computing-neighbour-list",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Computing Neighbour List",
    "text": "Computing Neighbour List\nNext, poly2nb() of spdep package will be used to compute the neighbours list from polygon list.\n\nshan.nb &lt;- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\nWe can plot the neighbours list on shan_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\n#this set of codes cannot work so I change to the one in In class exercise\nplot(shan_sp, \n     border=grey(.5))\nplot(shan.nb, \n     coordinates(shan_sp), \n     col=\"blue\", \n     add=TRUE)\n\n\nplot(st_geometry(shan_sf), # st_geometry to output only one layer of geometry, without the st_geometry--&gt; then will plot the different columns; this is for the map \n     border=grey(.5))\n\npts&lt;- st_coordinates(st_centroid(shan_sf))\nplot(shan.nb, #give the edge\n     pts, #give the points\n     col=\"blue\", \n     add=TRUE)\n\n\n\n\nNote that if you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#computing-minimum-spanning-tree",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#computing-minimum-spanning-tree",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Computing minimum spanning tree",
    "text": "Computing minimum spanning tree\n\nCalculating edge costs\nNext, nbcosts() of spdep package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.\nThe code chunk below is used to compute the cost of each edge.\n\nlcosts &lt;- nbcosts(shan.nb, shan_ict)\n\nFor each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, We will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.\nIn order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below.\nNote that we specify the style as B to make sure the cost values are not row-standardised.\n\nshan.w &lt;- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\n\nComputing minimum spanning tree\nThe minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below.\n\nshan.mst &lt;- mstree(shan.w)\n\nAfter computing the MST, we can check its class and dimension by using the code chunk below.\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\nWe can display the content of shan.mst by using head() as shown in the code chunk below.\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   54   48  47.79331\n[2,]   54   17 109.08506\n[3,]   54   45 127.42203\n[4,]   45   52 146.78891\n[5,]   52   13 110.55197\n[6,]   13   28  92.79567\n\n\nThe plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\nplot(st_geometry(shan_sf), border=gray(.5))\npts&lt;- st_coordinates(st_centroid(shan_sf))\nplot.mst(shan.mst, \n         pts, \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#computing-spatially-constrained-clusters-using-skater-method",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#computing-spatially-constrained-clusters-using-skater-method",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Computing spatially constrained clusters using SKATER method",
    "text": "Computing spatially constrained clusters using SKATER method\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\n\nclust6 &lt;- spdep::skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\nThe skater() takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts. Note: It is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 52 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 25 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\nWe can check the cluster assignment by using the conde chunk below.\n\nccs6 &lt;- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\nWe can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 12, which is also the number of observations in the first cluster.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nLastly, we can also plot the pruned tree that shows the five clusters on top of the townshop area.\n\nplot(st_geometry(shan_sf), border=gray(.5))\nplot(clust6, \n     pts, \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-the-clusters-in-choropleth-map",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-the-clusters-in-choropleth-map",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Visualising the clusters in choropleth map",
    "text": "Visualising the clusters in choropleth map\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\n\ngroups_mat &lt;- as.matrix(clust6$groups)\nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, as.factor(groups_mat)) %&gt;%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\nhclust.map &lt;- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map &lt;- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#a-short-note-about-clustgeo-package",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#a-short-note-about-clustgeo-package",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "A short note about ClustGeo package",
    "text": "A short note about ClustGeo package\nClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space. D1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#ward-like-hierarchical-clustering-clustgeo",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#ward-like-hierarchical-clustering-clustgeo",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Ward-like hierarchical clustering: ClustGeo",
    "text": "Ward-like hierarchical clustering: ClustGeo\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() you learned in previous section.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\n\nnongeo_cluster &lt;- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). For sample code chunk, please refer to 5.7.6 Computing proximity matrix\n\nMapping the clusters formed\nSimilarly, we can plot the clusters on a categorical area shaded map by using the steps we learned in 5.7.12 Mapping the clusters formed.\n\ngroups &lt;- as.factor(cutree(nongeo_cluster, k=6))\n\n\nshan_sf_ngeo_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#spatially-constrained-hierarchical-clustering",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#spatially-constrained-hierarchical-clustering",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Spatially Constrained Hierarchical Clustering",
    "text": "Spatially Constrained Hierarchical Clustering\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package.\n\ndist &lt;- st_distance(shan_sf, shan_sf)\ndistmat &lt;- as.dist(dist)\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.\n\ncr &lt;- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\nWith reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below.\n\nclustG &lt;- hclustgeo(proxmat, distmat, alpha = 0.3)\n\nNext, cutree() is used to derive the cluster object.\n\ngroups &lt;- as.factor(cutree(clustG, k=6))\n\nWe will then join back the group list with shan_sf polygon feature data frame by using the code chunk below.\n\nshan_sf_Gcluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nWe can now plot the map of the newly delineated spatially constrained clusters.\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-individual-clustering-variable",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-individual-clustering-variable",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Visualising individual clustering variable",
    "text": "Visualising individual clustering variable\nCode chunk below is used to reveal the distribution of a clustering variable (i.e RADIO_PR) by cluster.\n\nggplot(data = shan_sf_ngeo_cluster,\n       aes(x = CLUSTER, y = RADIO_PR)) +\n  geom_boxplot()\n\n\n\n\nThe boxplot reveals Cluster 3 displays the highest mean Radio Ownership Per Thousand Household. This is followed by Cluster 2, 1, 4, 6 and 5."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#multivariate-visualisation",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#multivariate-visualisation",
    "title": "Hands-on Exercise 7: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Multivariate Visualisation",
    "text": "Multivariate Visualisation\nPast studies shown that parallel coordinate plot can be used to reveal clustering variables by cluster very effectively. In the code chunk below, ggparcoord() of GGally package\n\nggparcoord(data = shan_sf_ngeo_cluster, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\nThe parallel coordinate plot above reveals that households in Cluster 4 townships tend to own the highest number of TV and mobile-phone. On the other hand, households in Cluster 5 tends to own the lowest of all the five ICT.\nNote that the scale argument of ggparcoor() provide several methods to scale the clustering variables. They are:\n\nstd: univariately, subtract mean and divide by standard deviation.\nrobust: univariately, subtract median and divide by median absolute deviation.\nuniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.\nglobalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.\ncenter: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\nThere is no one best scaling method to use. You should explore them and select the one that best meet your analysis need.\nLast but not least, we can also compute the summary statistics such as mean, median, sd, etc to complement the visual interpretation.\nIn the code chunk below, group_by() and summarise() of dplyr are used to derive mean values of the clustering variables.\n\nshan_sf_ngeo_cluster %&gt;% \n  st_set_geometry(NULL) %&gt;%\n  group_by(CLUSTER) %&gt;%\n  summarise(mean_RADIO_PR = mean(RADIO_PR),\n            mean_TV_PR = mean(TV_PR),\n            mean_LLPHONE_PR = mean(LLPHONE_PR),\n            mean_MPHONE_PR = mean(MPHONE_PR),\n            mean_COMPUTER_PR = mean(COMPUTER_PR))\n\n# A tibble: 6 × 6\n  CLUSTER mean_RADIO_PR mean_TV_PR mean_LLPHONE_PR mean_MPHONE_PR\n  &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;\n1 1               221.        521.            44.2           246.\n2 2               237.        402.            23.9           134.\n3 3               300.        611.            52.2           392.\n4 4               196.        744.            99.0           651.\n5 5               124.        224.            38.0           132.\n6 6                98.6       499.            74.5           468.\n# ℹ 1 more variable: mean_COMPUTER_PR &lt;dbl&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "",
    "text": "When predicting the price of a house, not only the attributes of the house that is taken into account, but also the surrounding environment and factors that affects the price of the house. As such, geographically weighted regression (GWR) helps in taking into account the non-stationary variables into consideration and models the local relationships between these independent variables and an outcome of interest.\nThis hands-on exercise will focus on building hedonic pricing models using GWR methods. The dependent variables is the resale prices of condominiums in 2015 and the independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#import-data",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Import Data",
    "text": "Import Data\nThe geospatial data used in this hands-on exercise is called MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014’s planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in svy21 projected coordinates systems.\nWe will use st_read() of the sf package to import the MP_SUBZONE_WEB_PL shapefile.\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\emily\\OneDrive\\Documents\\SMU\\Y3S2\\Geospatial Analysis\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe output of the code above shows the details of the sf object mpsz along with the geometry type of the object. It is also important to note that mpsz simple feature object does not have EPSG information."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#update-the-crs-information",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#update-the-crs-information",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Update the CRS information",
    "text": "Update the CRS information\nTo find out more about the EPSG information of the sf object, we can use st_crs() from the sf package to check for the EPSG code.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nFrom the code above, we find that the EPSG code, which in this case is 9001, is not equal to the projection of Singapore (i.e. 3414). As such, we need to correct the EPSG code using st_transform() function from the sf package.\n\nmpsz_svy21 &lt;- st_transform(mpsz, 3414)\n\nThen, we can verify if the EPSG code is already correct using st_crs() function from the sf package\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNow, the EPSG is already in 3414 and we can now check the extent of the mpsz_svy21 using st_bbox() of sf package.\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#import-data-1",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#import-data-1",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Import data",
    "text": "Import data\nThe condo_resale_2015 is in csv file format. The codes chunk below uses read_csv() function of readr package to import condo_resale_2015 into R as a tibble data frame called condo_resale.\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe codes chunks below uses glimpse() to display the data structure of will do the job.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             &lt;dbl&gt; 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            &lt;dbl&gt; 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\nNext, summary() of base R is used to display the summary statistics of cond_resale tibble data frame.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#converting-aspatial-data-frame-into-a-sf-object",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#converting-aspatial-data-frame-into-a-sf-object",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Converting aspatial data frame into a sf object",
    "text": "Converting aspatial data frame into a sf object\nWe can make the aspatial data into an sf object using st_as_sf() function from the sf package so that we can have the point data of the location of the condominiums.\n\ncondo_resale.sf &lt;- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nNotice that st_transform() of sf package is used to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414).\nNext, head() is used to list the content of condo_resale.sf object.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLING_PRICE AREA_SQM   AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n     &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n1   118635       3000000      309    30     7.94          0.166            2.52 \n2   288420       3880000      290    32     6.61          0.280            1.93 \n3   267833       3325000      248    33     6.90          0.429            0.502\n4   258380       4250000      127     7     4.04          0.395            1.99 \n5   467169       1400000      145    28    11.8           0.119            1.12 \n6   466472       1320000      139    22    10.3           0.125            0.789\n# ℹ 15 more variables: PROX_URA_GROWTH_AREA &lt;dbl&gt;, PROX_HAWKER_MARKET &lt;dbl&gt;,\n#   PROX_KINDERGARTEN &lt;dbl&gt;, PROX_MRT &lt;dbl&gt;, PROX_PARK &lt;dbl&gt;,\n#   PROX_PRIMARY_SCH &lt;dbl&gt;, PROX_TOP_PRIMARY_SCH &lt;dbl&gt;,\n#   PROX_SHOPPING_MALL &lt;dbl&gt;, PROX_SUPERMARKET &lt;dbl&gt;, PROX_BUS_STOP &lt;dbl&gt;,\n#   NO_Of_UNITS &lt;dbl&gt;, FAMILY_FRIENDLY &lt;dbl&gt;, FREEHOLD &lt;dbl&gt;,\n#   LEASEHOLD_99YR &lt;dbl&gt;, geometry &lt;POINT [m]&gt;\n\n\nNotice that the output is in point feature data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#statistical-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#statistical-graphics",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Statistical graphics",
    "text": "Statistical graphics\nLet’s plot the SELLING_PRICE of the condominiums\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nThe figure above reveals a right skewed distribution. This means that more condominium units were transacted at relative lower prices.\nStatistically, the skewed dsitribution can be normalised by using log transformation. The code chunk below is used to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE. It is performed using mutate() of dplyr package.\n\ncondo_resale.sf &lt;- condo_resale.sf %&gt;%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\nLet’s now see the distribution of the LOG_SELLING_PRICE\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nNotice that the distribution is relatively less skewed after the transformation.\n\nMultiple Histogram Plots distribution of variables\nThe code chunk below is used to create 12 histograms. Then, ggarrange() function from the ggpubr() is used to organised these histogram into a 3 columns by 4 rows small multiple plot.\n\nAREA_SQM &lt;- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE &lt;- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#drawing-statistical-point-map",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#drawing-statistical-point-map",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Drawing Statistical Point Map",
    "text": "Drawing Statistical Point Map\nLastly, we want to reveal the geospatial distribution condominium resale prices in Singapore. The map will be prepared by using tmap package.\nFirst, we will turn on the interactive mode of tmap by using the code chunk below.\n\ntmap_mode(\"view\")\n\nNext, the code chunks below is used to create an interactive point symbol map.\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(st_geometry(mpsz_svy21))+\n  tm_polygons() \n\n\n\n\n\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nNotice that tm_dots() is used instead of tm_bubbles().\nset.zoom.limits argument of tm_view() sets the minimum and maximum zoom level to 11 and 14 respectively.\nBefore moving on to the next section, the code below will be used to turn R display into plot mode.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#simple-linear-regression-method",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#simple-linear-regression-method",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Simple Linear Regression Method",
    "text": "Simple Linear Regression Method\nNow, let’s build a simple linear regression model using the lm() function by using SELLING_PRICE as the dependent variable and AREA_SQM as the independent variable.\n\ncondo.slr &lt;- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nThe function lm() returns an object class “lm” or multiple responses of class c(“mlm”, “lm”).\nThe functions summary() and anova() can be used to obtain and print a summary and analysis of variance table of the results. The generic accessor functions coefficients, effects, fitted.values and residuals extract various useful features of the value returned by lm.\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: &lt; 2.2e-16\n\n\n\nanova(condo.slr)\n\nAnalysis of Variance Table\n\nResponse: SELLING_PRICE\n            Df     Sum Sq    Mean Sq F value    Pr(&gt;F)    \nAREA_SQM     1 1.0504e+15 1.0504e+15    1182 &lt; 2.2e-16 ***\nResiduals 1434 1.2743e+15 8.8861e+11                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThe output of the summary() function report reveals that the SELLING_PRICE can be explained by using the formula:\n      *y = -258121.1 + 14719x1*\nThe R-squared of 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\nSince p-value is much smaller than 0.0001, as seen from the result of summary() function and anova() function, we will reject the null hypothesis that mean is a good estimator of SELLING_PRICE. This will allow us to infer that simple linear regression model above is a good estimator of SELLING_PRICE.\nTo find the best fit line to predict the price of the condominiums, we can plot a scatterplot by incorporating lm() as a method function in ggplot’s geometry as shown in the code chunk below.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\nWe can see from the figure above that there are a few outliers with relatively high selling prices."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#multiple-linear-regression-method",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#multiple-linear-regression-method",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Multiple Linear Regression Method",
    "text": "Multiple Linear Regression Method\n\nVisualizing the relationships of the independent variables\nWhen thinking of using multiple regression model, it is important to check for multicollinearity among the independent variables. This means that the independent variables should not be highly correlated with each other.\nTo check for multicollinearity, we can use the corrplot() function from the corrplot package. This function will show the correlation matrix of the independent variables. The code chunk below is used to create a correlation matrix of the independent variables.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\", tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\nMatrix reorder is very important for mining the hidden structure and pattern in the matrix. There are four methods in corrplot (parameter order), named “AOE”, “FPC”, “hclust”, “alphabet”. In the code chunk above, AOE order is used. It orders the variables by using the angular order of the eigenvectors method suggested by Michael Friendly.\nFrom the scatterplot matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, LEASE_99YEAR is excluded in the subsequent model building.\n\n\nBuilding a hedonic pricing model using mutiple linear regression\nWe can also use the lm() function to build a multiple linear regression model.\n\ncondo.mlr &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  &lt; 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  &lt; 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  &lt; 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: &lt; 2.2e-16\n\n\n\n\nPreparing Publication Quality Table\n\nolsrr method\nFrom the result above, we can see that not all teh independent variables are statistically significant. As such, we need to remove the variables that are not statistically significant.\nBelow is the code chunk to caliberate the revised model.\n\ncondo.mlr1 &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751998.679 \nR-Squared                    0.651       MSE                571471422208.591 \nAdj. R-Squared               0.647       Coef. Var                    43.168 \nPred R-Squared               0.638       AIC                       42966.758 \nMAE                     414819.628       SBC                       43051.072 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\n\ngtsummary method\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables in R.\nIn the code chunk below, tbl_regression() is used to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nWith gtsummary package, model statistics can be included in the report by either appending them to the report table by using add_glance_table() or adding as a table source note by using add_glance_source_note() as shown in the code chunk below.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %&gt;% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = &lt;0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nTo customize, refer to the Tutorial: tbl_regression documentation."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#the-olsrr-package",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#the-olsrr-package",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "The olsrr package",
    "text": "The olsrr package\n\nChecking for multicolinearity\nThere is a package specially programmed for perfoming OLS regression. It is called olsrr. The olsrr package provides tools for diagnosing collinearity, calculating VIF, and other regression diagnostics. THe collection of very useful methods for building better multiple linear regression models are:\n\ncomprehensive regression output\nresidual diagnostics\nmeasures of influence\nheteroskedasticity tests\ncollinearity diagnostics\nmodel fit assessment\nvariable contribution assessment\nvariable selection procedures\n\nThe ols_vif_tol() function is used to test if there are sign of multicolinearity\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nSince the VIF values are less than 10, we can conclude that there is no multicolinearity amongst the independent variables.\n\n\nTest for Non-Linearity\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nIn the code chunk below, the ols_plot_resid_fit() of olsrr package is used to perform linearity assumption test.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\nThe plot above shows that the residuals are randomly scattered around the horizontal line. This means that the linearity assumption is not violated.\n\n\nTest for Normality Assumption\nThe normality assumption of the residuals can be tested using the ols_plot_resid_hist() function of the olsrr package.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nThe figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\nIf you prefer formal statistical test methods, the ols_test_normality() of olsrr package can be used as shown in the code chun below.\n\nols_test_normality(condo.mlr1)\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nThe summary table shows that the p-values of the four tests are smaller than the alpha value of 0.05. This means that we can reject the null hypothesis that the residuals are normally distributed.\n\n\nTesting for Spatial Autocorrelation\nThe hedonic model we try to build are using geographically referenced attributes, hence it is also important for us to visual the residual of the hedonic pricing model.\nIn order to perform spatial autocorrelation test, we need to convert condo_resale.sf from sf data frame into a SpatialPointsDataFrame.\nFirst, we will export the residual of the hedonic pricing model and save it as a data frame.\n\nmlr.output &lt;- as.data.frame(condo.mlr1$residuals)\n\nNext, we will join the newly created data frame with condo_resale.sf object.\n\ncondo_resale.res.sf &lt;- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %&gt;%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\nThen, we will convert the condo_resale.res.sf into a SpatialPointsDataFrame. This is because spdep package requires the input to be in SpatialPointsDataFrame format.\n\ncondo_resale.sp &lt;- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nNext, we will use tmap package to display the distribution of the residuals on an interactive map.\nThe code churn below will turn on the interactive mode of tmap.\n\ntmap_mode(\"view\")\n\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nThe figure above reveal that there is sign of spatial autocorrelation.\nTo proof that our observation is indeed true, the Moran’s I test will be performed\nFirst, we will compute the distance-based weight matrix by using dnearneigh() function of spdep.\n\nnb &lt;- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nNext, nb2listw() of spdep packge will be used to convert the output neighbours lists (i.e. nb) into a spatial weights.\n\nnb_lw &lt;- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nNext, lm.morantest() of spdep package will be used to perform Moran’s I test for residual spatial autocorrelation\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than 2.2e-16 which is less than the alpha value of 0.05. Hence, we will reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1424418 which is greater than 0, we can infer than the residuals resemble cluster distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#building-fixed-bandwidth-gwr-model",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#building-fixed-bandwidth-gwr-model",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Building Fixed Bandwidth GWR Model",
    "text": "Building Fixed Bandwidth GWR Model\n\nComputing fixed bandwidth\nThe bw.gwr() of GWModel package is used to compute the optimal fixed bandwidth of the GWR model. The adaptive is set to FALSE to compute the fixed bandwidth.\nThere are two possible stopping rule methods: CV cross validation approach and AIC corrected (AICc) approach. We can indicate the stopping rule in the approach arguement.\n\nbw.fixed &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\nThe output of the code above shows that the recommended optimal fixed bandwidth is 971.3405 metres.\nThe measurement is in metres because the data is in svy21 projected coordinate system. If the data is in wgs84, the measurement will be in degrees.\n\n\nGWModel method - fixed bandwidth\nNow we can use the code chunk below to calibrate the gwr model using fixed bandwidth and gaussian kernel.\n\ngwr.fixed &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\nThe output is saved in a list of class “gwrm”. The code below can be used to display the model output.\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-03-11 00:10:54.225558 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2024-03-11 00:10:54.878568 \n\n\nThe report shows that the AICc of the gwr is 42263.61 which is significantly smaller than the global multiple linear regression model of 42967.1."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#building-adaptive-bandwidth-gwr-model",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#building-adaptive-bandwidth-gwr-model",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Building Adaptive Bandwidth GWR Model",
    "text": "Building Adaptive Bandwidth GWR Model\n\nComputing adaptive bandwidth\nThe bw.gwr() of GWModel package is used to compute the optimal adaptive bandwidth of the GWR model. The adaptive is set to TRUE to compute the adaptive bandwidth.\n\nbw.adaptive &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nIt shows that 30 is the recommended data points to be used.\n\n\nConstructing the adaptive bandwidth GWR Model\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel as shown in the code chunk below.\n\ngwr.adaptive &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-03-11 00:10:59.722703 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2024-03-11 00:11:00.499474 \n\n\nThe report shows that the AICc the adaptive distance gwr is 41982.22 which is even smaller than the AICc of the fixed distance gwr of 42263.61."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualizing-gwr-output",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualizing-gwr-output",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Visualizing GWR Output",
    "text": "Visualizing GWR Output\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\nPredicted: these are the estimated (or fitted) y values 3. computed by GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produce by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#converting-sdf-into-sf-data.frame",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#converting-sdf-into-sf-data.frame",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Converting SDF into sf data.frame",
    "text": "Converting SDF into sf data.frame\nTo visualise the fields in SDF, we need to first covert it into sf data.frame by using the code chunk below.\n\ncondo_resale.sf.adaptive &lt;- st_as_sf(gwr.adaptive$SDF) %&gt;%\n  st_transform(crs=3414)\n\n\n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output &lt;- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive &lt;- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\nNext, glimpse() is used to display the content of condo_resale.sf.adaptive sf data frame.\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       &lt;dbl&gt; 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 &lt;dbl&gt; -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               &lt;dbl&gt; 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              &lt;dbl&gt; 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   &lt;dbl&gt; -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              &lt;dbl&gt; -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        &lt;dbl&gt; 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      &lt;dbl&gt; -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  &lt;dbl&gt; -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              &lt;dbl&gt; -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             &lt;dbl&gt; -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      &lt;dbl&gt; 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    &lt;dbl&gt; 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         &lt;dbl&gt; 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           &lt;dbl&gt; 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       &lt;dbl&gt; -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              &lt;dbl&gt; 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    &lt;dbl&gt; 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                &lt;dbl&gt; 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           &lt;dbl&gt; 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            &lt;dbl&gt; 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             &lt;dbl&gt; 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  &lt;dbl&gt; 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             &lt;dbl&gt; 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       &lt;dbl&gt; 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     &lt;dbl&gt; 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE &lt;dbl&gt; 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             &lt;dbl&gt; 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            &lt;dbl&gt; 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     &lt;dbl&gt; 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   &lt;dbl&gt; 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        &lt;dbl&gt; 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          &lt;dbl&gt; 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      &lt;dbl&gt; 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             &lt;dbl&gt; 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            &lt;dbl&gt; 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             &lt;dbl&gt; 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  &lt;dbl&gt; -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             &lt;dbl&gt; -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       &lt;dbl&gt; 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     &lt;dbl&gt; -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV &lt;dbl&gt; -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             &lt;dbl&gt; -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            &lt;dbl&gt; -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     &lt;dbl&gt; 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   &lt;dbl&gt; 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        &lt;dbl&gt; 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          &lt;dbl&gt; 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      &lt;dbl&gt; -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             &lt;dbl&gt; 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                &lt;dbl&gt; 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               &lt;dbl&gt; 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               &lt;dbl&gt; 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                &lt;POINT [m]&gt; POINT (22085.12 29951.54), POINT (25656.…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualizing-local-r2",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualizing-local-r2",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Visualizing local R2",
    "text": "Visualizing local R2\n\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualizing-coefficient-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualizing-coefficient-estimates",
    "title": "Hands-on Exercise 8: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Visualizing coefficient estimates",
    "text": "Visualizing coefficient estimates\n\ntmap_mode(\"view\")\nAREA_SQM_SE &lt;- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV &lt;- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\nBy URA Planning Region\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html",
    "title": "In-Class Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "",
    "text": "When predicting the price of a house, not only the attributes of the house that is taken into account, but also the surrounding environment and factors that affects the price of the house. As such, geographically weighted regression (GWR) helps in taking into account the non-stationary variables into consideration and models the local relationships between these independent variables and an outcome of interest.\nThis hands-on exercise will focus on building hedonic pricing models using GWR methods. The dependent variables is the resale prices of condominiums in 2015 and the independent variables are divided into either structural and locational."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#import-data",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#import-data",
    "title": "In-Class Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Import Data",
    "text": "Import Data\nThe geospatial data used in this hands-on exercise is called MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014’s planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in svy21 projected coordinates systems.\nWe will use st_read() of the sf package to import the MP_SUBZONE_WEB_PL shapefile.\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\emily\\OneDrive\\Documents\\SMU\\Y3S2\\Geospatial Analysis\\IS415-GAA\\In-class_Ex\\In-class_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe output of the code above shows the details of the sf object mpsz along with the geometry type of the object. It is also important to note that mpsz simple feature object does not have EPSG information."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#update-the-crs-information",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#update-the-crs-information",
    "title": "In-Class Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Update the CRS information",
    "text": "Update the CRS information\nTo find out more about the EPSG information of the sf object, we can use st_crs() from the sf package to check for the EPSG code.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nFrom the code above, we find that the EPSG code, which in this case is 9001, is not equal to the projection of Singapore (i.e. 3414). As such, we need to correct the EPSG code using st_transform() function from the sf package.\n\nmpsz_svy21 &lt;- st_transform(mpsz, 3414)\n\nThen, we can verify if the EPSG code is already correct using st_crs() function from the sf package\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNow, the EPSG is already in 3414 and we can now check the extent of the mpsz_svy21 using st_bbox() of sf package.\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#import-data-1",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#import-data-1",
    "title": "In-Class Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Import data",
    "text": "Import data\nThe condo_resale_2015 is in csv file format. The codes chunk below uses read_csv() function of readr package to import condo_resale_2015 into R as a tibble data frame called condo_resale.\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe codes chunks below uses glimpse() to display the data structure of will do the job.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             &lt;dbl&gt; 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            &lt;dbl&gt; 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\nNext, summary() of base R is used to display the summary statistics of cond_resale tibble data frame.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#converting-aspatial-data-frame-into-a-sf-object",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#converting-aspatial-data-frame-into-a-sf-object",
    "title": "In-Class Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Converting aspatial data frame into a sf object",
    "text": "Converting aspatial data frame into a sf object\nWe can make the aspatial data into an sf object using st_as_sf() function from the sf package so that we can have the point data of the location of the condominiums.\n\ncondo_resale.sf &lt;- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nNotice that st_transform() of sf package is used to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414).\nNext, head() is used to list the content of condo_resale.sf object.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLING_PRICE AREA_SQM   AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n     &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n1   118635       3000000      309    30     7.94          0.166            2.52 \n2   288420       3880000      290    32     6.61          0.280            1.93 \n3   267833       3325000      248    33     6.90          0.429            0.502\n4   258380       4250000      127     7     4.04          0.395            1.99 \n5   467169       1400000      145    28    11.8           0.119            1.12 \n6   466472       1320000      139    22    10.3           0.125            0.789\n# ℹ 15 more variables: PROX_URA_GROWTH_AREA &lt;dbl&gt;, PROX_HAWKER_MARKET &lt;dbl&gt;,\n#   PROX_KINDERGARTEN &lt;dbl&gt;, PROX_MRT &lt;dbl&gt;, PROX_PARK &lt;dbl&gt;,\n#   PROX_PRIMARY_SCH &lt;dbl&gt;, PROX_TOP_PRIMARY_SCH &lt;dbl&gt;,\n#   PROX_SHOPPING_MALL &lt;dbl&gt;, PROX_SUPERMARKET &lt;dbl&gt;, PROX_BUS_STOP &lt;dbl&gt;,\n#   NO_Of_UNITS &lt;dbl&gt;, FAMILY_FRIENDLY &lt;dbl&gt;, FREEHOLD &lt;dbl&gt;,\n#   LEASEHOLD_99YR &lt;dbl&gt;, geometry &lt;POINT [m]&gt;\n\n\nNotice that the output is in point feature data frame."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#statistical-graphics",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#statistical-graphics",
    "title": "In-Class Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Statistical graphics",
    "text": "Statistical graphics\nLet’s plot the SELLING_PRICE of the condominiums\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nThe figure above reveals a right skewed distribution. This means that more condominium units were transacted at relative lower prices.\nStatistically, the skewed dsitribution can be normalised by using log transformation. The code chunk below is used to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE. It is performed using mutate() of dplyr package.\n\ncondo_resale.sf &lt;- condo_resale.sf %&gt;%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\nLet’s now see the distribution of the LOG_SELLING_PRICE\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nNotice that the distribution is relatively less skewed after the transformation.\n\nMultiple Histogram Plots distribution of variables\nThe code chunk below is used to create 12 histograms. Then, ggarrange() function from the ggpubr() is used to organised these histogram into a 3 columns by 4 rows small multiple plot.\n\nAREA_SQM &lt;- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE &lt;- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#drawing-statistical-point-map",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#drawing-statistical-point-map",
    "title": "In-Class Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Drawing Statistical Point Map",
    "text": "Drawing Statistical Point Map\nLastly, we want to reveal the geospatial distribution condominium resale prices in Singapore. The map will be prepared by using tmap package.\nFirst, we will turn on the interactive mode of tmap by using the code chunk below.\n\ntmap_mode(\"view\")\n\nNext, the code chunks below is used to create an interactive point symbol map.\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(st_geometry(mpsz_svy21))+\n  tm_polygons() \n\n\n\n\n\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nNotice that tm_dots() is used instead of tm_bubbles().\nset.zoom.limits argument of tm_view() sets the minimum and maximum zoom level to 11 and 14 respectively.\nBefore moving on to the next section, the code below will be used to turn R display into plot mode.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#simple-linear-regression-method",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#simple-linear-regression-method",
    "title": "In-Class Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Simple Linear Regression Method",
    "text": "Simple Linear Regression Method\nNow, let’s build a simple linear regression model using the lm() function by using SELLING_PRICE as the dependent variable and AREA_SQM as the independent variable.\n\ncondo.slr &lt;- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nThe function lm() returns an object class “lm” or multiple responses of class c(“mlm”, “lm”).\nThe functions summary() and anova() can be used to obtain and print a summary and analysis of variance table of the results. The generic accessor functions coefficients, effects, fitted.values and residuals extract various useful features of the value returned by lm.\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: &lt; 2.2e-16\n\n\n\nanova(condo.slr)\n\nAnalysis of Variance Table\n\nResponse: SELLING_PRICE\n            Df     Sum Sq    Mean Sq F value    Pr(&gt;F)    \nAREA_SQM     1 1.0504e+15 1.0504e+15    1182 &lt; 2.2e-16 ***\nResiduals 1434 1.2743e+15 8.8861e+11                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThe output of the summary() function report reveals that the SELLING_PRICE can be explained by using the formula:\n      *y = -258121.1 + 14719x1*\nThe R-squared of 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\nSince p-value is much smaller than 0.0001, as seen from the result of summary() function and anova() function, we will reject the null hypothesis that mean is a good estimator of SELLING_PRICE. This will allow us to infer that simple linear regression model above is a good estimator of SELLING_PRICE.\nTo find the best fit line to predict the price of the condominiums, we can plot a scatterplot by incorporating lm() as a method function in ggplot’s geometry as shown in the code chunk below.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\nWe can see from the figure above that there are a few outliers with relatively high selling prices."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#multiple-linear-regression-method",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#multiple-linear-regression-method",
    "title": "In-Class Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Multiple Linear Regression Method",
    "text": "Multiple Linear Regression Method\n\nVisualizing the relationships of the independent variables\nWhen thinking of using multiple regression model, it is important to check for multicollinearity among the independent variables. This means that the independent variables should not be highly correlated with each other.\nTo check for multicollinearity, we can use the corrplot() function from the corrplot package. This function will show the correlation matrix of the independent variables. The code chunk below is used to create a correlation matrix of the independent variables.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\", tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\n\nggcorrmat(condo_resale[, 5:23]) #another way to visualize the correlation matrix\n\n\n\n#more detailed version of the correlation matrix\n\nMatrix reorder is very important for mining the hidden structure and pattern in the matrix. There are four methods in corrplot (parameter order), named “AOE”, “FPC”, “hclust”, “alphabet”. In the code chunk above, AOE order is used. It orders the variables by using the angular order of the eigenvectors method suggested by Michael Friendly.\nFrom the scatterplot matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, LEASE_99YEAR is excluded in the subsequent model building.\n\n\nBuilding a hedonic pricing model using mutiple linear regression\nWe can also use the lm() function to build a multiple linear regression model.\n\ncondo.mlr &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  &lt; 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  &lt; 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  &lt; 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: &lt; 2.2e-16\n\n\n\n\nPreparing Publication Quality Table\n\nolsrr method\nFrom the result above, we can see that not all teh independent variables are statistically significant. As such, we need to remove the variables that are not statistically significant.\nBelow is the code chunk to caliberate the revised model.\n\ncondo.mlr1 &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751998.679 \nR-Squared                    0.651       MSE                571471422208.591 \nAdj. R-Squared               0.647       Coef. Var                    43.168 \nPred R-Squared               0.638       AIC                       42966.758 \nMAE                     414819.628       SBC                       43051.072 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\n\ngtsummary method\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables in R.\nIn the code chunk below, tbl_regression() is used to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nWith gtsummary package, model statistics can be included in the report by either appending them to the report table by using add_glance_table() or adding as a table source note by using add_glance_source_note() as shown in the code chunk below.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %&gt;% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = &lt;0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nTo customize, refer to the Tutorial: tbl_regression documentation.\n\nggcoefstats(condo.mlr1, sort = \"ascending\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#the-olsrr-package",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#the-olsrr-package",
    "title": "In-Class Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "The olsrr package",
    "text": "The olsrr package\n\nChecking for multicolinearity\nThere is a package specially programmed for perfoming OLS regression. It is called olsrr. The olsrr package provides tools for diagnosing collinearity, calculating VIF, and other regression diagnostics. THe collection of very useful methods for building better multiple linear regression models are:\n\ncomprehensive regression output\nresidual diagnostics\nmeasures of influence\nheteroskedasticity tests\ncollinearity diagnostics\nmodel fit assessment\nvariable contribution assessment\nvariable selection procedures\n\nThe ols_vif_tol() function is used to test if there are sign of multicolinearity\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nSince the VIF values are less than 10, we can conclude that there is no multicolinearity amongst the independent variables.\n\n\nTest for Non-Linearity\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nIn the code chunk below, the ols_plot_resid_fit() of olsrr package is used to perform linearity assumption test.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\nThe plot above shows that the residuals are randomly scattered around the horizontal line. This means that the linearity assumption is not violated.\n\n\nTest for Normality Assumption\nThe normality assumption of the residuals can be tested using the ols_plot_resid_hist() function of the olsrr package.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nThe figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\nIf you prefer formal statistical test methods, the ols_test_normality() of olsrr package can be used as shown in the code chun below.\n\nols_test_normality(condo.mlr1)\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nThe summary table shows that the p-values of the four tests are smaller than the alpha value of 0.05. This means that we can reject the null hypothesis that the residuals are normally distributed.\n\n\nTesting for Spatial Autocorrelation\nThe hedonic model we try to build are using geographically referenced attributes, hence it is also important for us to visual the residual of the hedonic pricing model.\nIn order to perform spatial autocorrelation test, we need to convert condo_resale.sf from sf data frame into a SpatialPointsDataFrame.\nFirst, we will export the residual of the hedonic pricing model and save it as a data frame.\n\nmlr.output &lt;- as.data.frame(condo.mlr1$residuals)\n\nNext, we will join the newly created data frame with condo_resale.sf object.\n\ncondo_resale.res.sf &lt;- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %&gt;%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\nThen, we will convert the condo_resale.res.sf into a SpatialPointsDataFrame. This is because spdep package requires the input to be in SpatialPointsDataFrame format.\n\ncondo_resale.sp &lt;- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nNext, we will use tmap package to display the distribution of the residuals on an interactive map.\nThe code churn below will turn on the interactive mode of tmap.\n\ntmap_mode(\"view\")\n\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nThe figure above reveal that there is sign of spatial autocorrelation.\nTo proof that our observation is indeed true, the Moran’s I test will be performed\nFirst, we will compute the distance-based weight matrix by using dnearneigh() function of spdep.\n\nnb &lt;- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nNext, nb2listw() of spdep packge will be used to convert the output neighbours lists (i.e. nb) into a spatial weights.\n\nnb_lw &lt;- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nNext, lm.morantest() of spdep package will be used to perform Moran’s I test for residual spatial autocorrelation\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than 2.2e-16 which is less than the alpha value of 0.05. Hence, we will reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1424418 which is greater than 0, we can infer than the residuals resemble cluster distribution."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#building-fixed-bandwidth-gwr-model",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#building-fixed-bandwidth-gwr-model",
    "title": "In-Class Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Building Fixed Bandwidth GWR Model",
    "text": "Building Fixed Bandwidth GWR Model\n\nComputing fixed bandwidth\nThe bw.gwr() of GWModel package is used to compute the optimal fixed bandwidth of the GWR model. The adaptive is set to FALSE to compute the fixed bandwidth.\nThere are two possible stopping rule methods: CV cross validation approach and AIC corrected (AICc) approach. We can indicate the stopping rule in the approach arguement.\n\nbw.fixed &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\nThe output of the code above shows that the recommended optimal fixed bandwidth is 971.3405 metres.\nThe measurement is in metres because the data is in svy21 projected coordinate system. If the data is in wgs84, the measurement will be in degrees.\n\n\nGWModel method - fixed bandwidth\nNow we can use the code chunk below to calibrate the gwr model using fixed bandwidth and gaussian kernel.\n\ngwr.fixed &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\nThe output is saved in a list of class “gwrm”. The code below can be used to display the model output.\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-03-11 10:41:51.027747 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2024-03-11 10:41:51.994906 \n\n\nThe report shows that the AICc of the gwr is 42263.61 which is significantly smaller than the global multiple linear regression model of 42967.1."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#building-adaptive-bandwidth-gwr-model",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#building-adaptive-bandwidth-gwr-model",
    "title": "In-Class Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Building Adaptive Bandwidth GWR Model",
    "text": "Building Adaptive Bandwidth GWR Model\n\nComputing adaptive bandwidth\nThe bw.gwr() of GWModel package is used to compute the optimal adaptive bandwidth of the GWR model. The adaptive is set to TRUE to compute the adaptive bandwidth.\n\nbw.adaptive &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nIt shows that 30 is the recommended data points to be used.\n\n\nConstructing the adaptive bandwidth GWR Model\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel as shown in the code chunk below.\n\ngwr.adaptive &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-03-11 10:42:01.304107 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2024-03-11 10:42:02.616211 \n\n\nThe report shows that the AICc the adaptive distance gwr is 41982.22 which is even smaller than the AICc of the fixed distance gwr of 42263.61."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#visualizing-gwr-output",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#visualizing-gwr-output",
    "title": "In-Class Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Visualizing GWR Output",
    "text": "Visualizing GWR Output\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\nPredicted: these are the estimated (or fitted) y values 3. computed by GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produce by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#converting-sdf-into-sf-data.frame",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#converting-sdf-into-sf-data.frame",
    "title": "In-Class Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Converting SDF into sf data.frame",
    "text": "Converting SDF into sf data.frame\nTo visualise the fields in SDF, we need to first covert it into sf data.frame by using the code chunk below.\n\ncondo_resale.sf.adaptive &lt;- st_as_sf(gwr.adaptive$SDF) %&gt;%\n  st_transform(crs=3414)\n\n\n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output &lt;- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive &lt;- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\nNext, glimpse() is used to display the content of condo_resale.sf.adaptive sf data frame.\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       &lt;dbl&gt; 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 &lt;dbl&gt; -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               &lt;dbl&gt; 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              &lt;dbl&gt; 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   &lt;dbl&gt; -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              &lt;dbl&gt; -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        &lt;dbl&gt; 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      &lt;dbl&gt; -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  &lt;dbl&gt; -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              &lt;dbl&gt; -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             &lt;dbl&gt; -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      &lt;dbl&gt; 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    &lt;dbl&gt; 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         &lt;dbl&gt; 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           &lt;dbl&gt; 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       &lt;dbl&gt; -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              &lt;dbl&gt; 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    &lt;dbl&gt; 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                &lt;dbl&gt; 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           &lt;dbl&gt; 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            &lt;dbl&gt; 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             &lt;dbl&gt; 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  &lt;dbl&gt; 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             &lt;dbl&gt; 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       &lt;dbl&gt; 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     &lt;dbl&gt; 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE &lt;dbl&gt; 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             &lt;dbl&gt; 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            &lt;dbl&gt; 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     &lt;dbl&gt; 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   &lt;dbl&gt; 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        &lt;dbl&gt; 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          &lt;dbl&gt; 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      &lt;dbl&gt; 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             &lt;dbl&gt; 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            &lt;dbl&gt; 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             &lt;dbl&gt; 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  &lt;dbl&gt; -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             &lt;dbl&gt; -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       &lt;dbl&gt; 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     &lt;dbl&gt; -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV &lt;dbl&gt; -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             &lt;dbl&gt; -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            &lt;dbl&gt; -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     &lt;dbl&gt; 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   &lt;dbl&gt; 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        &lt;dbl&gt; 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          &lt;dbl&gt; 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      &lt;dbl&gt; -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             &lt;dbl&gt; 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                &lt;dbl&gt; 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               &lt;dbl&gt; 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               &lt;dbl&gt; 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                &lt;POINT [m]&gt; POINT (22085.12 29951.54), POINT (25656.…"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#visualizing-local-r2",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#visualizing-local-r2",
    "title": "In-Class Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Visualizing local R2",
    "text": "Visualizing local R2\n\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#visualizing-coefficient-estimates",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#visualizing-coefficient-estimates",
    "title": "In-Class Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Visualizing coefficient estimates",
    "text": "Visualizing coefficient estimates\n\ntmap_mode(\"view\")\nAREA_SQM_SE &lt;- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV &lt;- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\nBy URA Planning Region\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html",
    "title": "Hands-on Exercise 9: Geographically Weighted Predictive Models",
    "section": "",
    "text": "When dealing with predictions, we want to predict what is the outcome in the future. To do this, we need to identify the set of predictors/variables that affects the predicted variables. Geospatial predictive modelling is conceptually rooted in the principle that the occurrences of events being modeled are limited in distribution. This means that the occurrences of event are neither uniform nor random in distribution over space when geographically referenced data are used. Geospatial predictive modeling attempts to describe the factors that constrain and influence where the locations of events occur by sptially correlating occurrences of historical geosptail locations with environmental factors that represent those constraints and influences."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#aspatial-data",
    "title": "Hands-on Exercise 9: Geographically Weighted Predictive Models",
    "section": "Aspatial Data",
    "text": "Aspatial Data\n\nHDB Resale Data: a list of HDB resale transacted prices in Singapore from Jan 2017 onwards. It is in csv format which can be downloaded from Data.gov.sg."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#geospatial-data",
    "title": "Hands-on Exercise 9: Geographically Weighted Predictive Models",
    "section": "Geospatial Data",
    "text": "Geospatial Data\n\nMP14_SUBZONE_WEB_PL: a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#locational-factors",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#locational-factors",
    "title": "Hands-on Exercise 9: Geographically Weighted Predictive Models",
    "section": "Locational factors",
    "text": "Locational factors\n\nLocational factors with geographic coordinates:\n\nDownloaded from Data.gov.sg.\n\nEldercare data is a list of eldercare in Singapore. It is in shapefile format.\nHawker Centre data is a list of hawker centres in Singapore. It is in geojson format.\nParks data is a list of parks in Singapore. It is in geojson format.\nSupermarket data is a list of supermarkets in Singapore. It is in geojson format.\nCHAS clinics data is a list of CHAS clinics in Singapore. It is in geojson format.\nChildcare service data is a list of childcare services in Singapore. It is in geojson format.\nKindergartens data is a list of kindergartens in Singapore. It is in geojson format.\n\nDownloaded from Datamall.lta.gov.sg.\n\nMRT data is a list of MRT/LRT stations in Singapore with the station names and codes. It is in shapefile format.\nBus stops data is a list of bus stops in Singapore. It is in shapefile format.\n\n\nLocational factors without geographic coordinates:\n\nDownloaded from Data.gov.sg.\n\nPrimary school data is extracted from the list on General information of schools from data.gov portal. It is in csv format.\n\nRetrieved/Scraped from other sources\n\nCBD coordinates obtained from Google.\nShopping malls data is a list of Shopping malls in Singapore obtained from Wikipedia.\nGood primary schools is a list of primary schools that are ordered in ranking in terms of popularity and this can be found at Local Salary Forum."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#converting-the-sf-data.frame-to-spatialpointdataframe",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#converting-the-sf-data.frame-to-spatialpointdataframe",
    "title": "Hands-on Exercise 9: Geographically Weighted Predictive Models",
    "section": "Converting the sf data.frame to SpatialPointDataFrame",
    "text": "Converting the sf data.frame to SpatialPointDataFrame\n\ntrain_data_sp &lt;- as_Spatial(train_data)\ntrain_data_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 10335 \nextent      : 11597.31, 42623.63, 28217.39, 48741.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,          PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,   PROX_GOOD_PRISCH,        PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       218000,             74,            1,                  555, 0.999393538715878, 1.98943787433087e-08, 0.0333358643817954, 0.0220407324774434, 0.0441643212802781, 0.0652540365486641,                0, 6.20621206270077e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1186888,            133,           17,                 1164,  19.6500691667807,     3.30163731686804,   2.86763031236184,   2.13060636038504,   2.41313695915468,   10.6223726149914, 2.27100643784442,    0.808332738794272,     1.57131703651196,                        7,                    20, ..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#computing-adaptive-bandwidth",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#computing-adaptive-bandwidth",
    "title": "Hands-on Exercise 9: Geographically Weighted Predictive Models",
    "section": "Computing adaptive bandwidth",
    "text": "Computing adaptive bandwidth\nWe then use bw.gwr() of GWmodel package to find the optimal bandwidth to be used.\n\nbw_adaptive &lt;- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=train_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n\nThe result shows that 40 neighbour points will be the optimal bandwidth to be used if adaptive bandwidth is used for this data set.\n\nwrite_rds(bw_adaptive, \"data/aspatial/bw_adaptive.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#constructing-the-adaptive-bandwidth-gwr-model",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#constructing-the-adaptive-bandwidth-gwr-model",
    "title": "Hands-on Exercise 9: Geographically Weighted Predictive Models",
    "section": "Constructing the adaptive bandwidth GWR model",
    "text": "Constructing the adaptive bandwidth GWR model\nLet’s first call the saved bandwidth\n\nbw_adaptive &lt;- read_rds(\"data/aspatial/bw_adaptive.rds\")\n\nThen, we calibrate the gwr-based hedonic pricing model using the adaptive bandwidth adn Gaussian kernel.\n\n#|eval: false\ngwr_adaptive &lt;- gwr.basic(formula = resale_price ~\n                            floor_area_sqm + storey_order +\n                            remaining_lease_mths + PROX_CBD + \n                            PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH,\n                          data=train_data_sp,\n                          bw=bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n\n\nwrite_rds(gwr_adaptive, \"data/aspatial/gwr_adaptive.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#retrieve-gwr-output-object",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#retrieve-gwr-output-object",
    "title": "Hands-on Exercise 9: Geographically Weighted Predictive Models",
    "section": "Retrieve GWR output object",
    "text": "Retrieve GWR output object\n\ngwr_adaptive &lt;- read_rds(\"data/aspatial/gwr_adaptive.rds\")\n\nTo show the output:\n\ngwr_adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-03-17 00:05:41.832505 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order + \n    remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n    PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data_sp, bw = bw_adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm storey_order remaining_lease_mths PROX_CBD PROX_ELDERLYCARE PROX_HAWKER PROX_MRT PROX_PARK PROX_MALL PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN WITHIN_350M_CHILDCARE WITHIN_350M_BUS WITHIN_1KM_PRISCH\n   Number of data points: 10335\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-205193  -39120   -1930   36545  472355 \n\n   Coefficients:\n                              Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)              107601.073  10601.261  10.150  &lt; 2e-16 ***\n   floor_area_sqm             2780.698     90.579  30.699  &lt; 2e-16 ***\n   storey_order              14299.298    339.115  42.167  &lt; 2e-16 ***\n   remaining_lease_mths        344.490      4.592  75.027  &lt; 2e-16 ***\n   PROX_CBD                 -16930.196    201.254 -84.124  &lt; 2e-16 ***\n   PROX_ELDERLYCARE         -14441.025    994.867 -14.516  &lt; 2e-16 ***\n   PROX_HAWKER              -19265.648   1273.597 -15.127  &lt; 2e-16 ***\n   PROX_MRT                 -32564.272   1744.232 -18.670  &lt; 2e-16 ***\n   PROX_PARK                 -5712.625   1483.885  -3.850 0.000119 ***\n   PROX_MALL                -14717.388   2007.818  -7.330 2.47e-13 ***\n   PROX_SUPERMARKET         -26881.938   4189.624  -6.416 1.46e-10 ***\n   WITHIN_350M_KINDERGARTEN   8520.472    632.812  13.464  &lt; 2e-16 ***\n   WITHIN_350M_CHILDCARE     -4510.650    354.015 -12.741  &lt; 2e-16 ***\n   WITHIN_350M_BUS             813.493    222.574   3.655 0.000259 ***\n   WITHIN_1KM_PRISCH         -8010.834    491.512 -16.298  &lt; 2e-16 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 61650 on 10320 degrees of freedom\n   Multiple R-squared: 0.7373\n   Adjusted R-squared: 0.737 \n   F-statistic:  2069 on 14 and 10320 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 3.922202e+13\n   Sigma(hat): 61610.08\n   AIC:  257320.2\n   AICc:  257320.3\n   BIC:  247249\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 40 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                   Min.     1st Qu.      Median     3rd Qu.\n   Intercept                -3.2478e+08 -4.7727e+05 -8.3004e+03  5.5025e+05\n   floor_area_sqm           -2.8714e+04  1.4475e+03  2.3011e+03  3.3900e+03\n   storey_order              3.3186e+03  8.5899e+03  1.0826e+04  1.3397e+04\n   remaining_lease_mths     -1.4431e+03  2.6063e+02  3.9048e+02  5.2865e+02\n   PROX_CBD                 -1.0837e+07 -5.7697e+04 -1.3787e+04  2.6552e+04\n   PROX_ELDERLYCARE         -3.2195e+07 -4.0643e+04  1.0562e+04  6.1054e+04\n   PROX_HAWKER              -2.3985e+08 -5.1365e+04  3.0026e+03  6.4287e+04\n   PROX_MRT                 -1.1632e+07 -1.0488e+05 -4.9373e+04  5.1037e+03\n   PROX_PARK                -6.5961e+06 -4.8671e+04 -8.8128e+02  5.3498e+04\n   PROX_MALL                -1.8112e+07 -7.4238e+04 -1.3982e+04  4.9779e+04\n   PROX_SUPERMARKET         -4.5761e+06 -6.3461e+04 -1.7429e+04  3.5616e+04\n   WITHIN_350M_KINDERGARTEN -4.1823e+05 -6.0040e+03  9.0209e+01  4.7127e+03\n   WITHIN_350M_CHILDCARE    -1.0273e+05 -2.2375e+03  2.6668e+02  2.6388e+03\n   WITHIN_350M_BUS          -1.1757e+05 -1.4719e+03  1.1626e+02  1.7584e+03\n   WITHIN_1KM_PRISCH        -6.6465e+05 -5.5959e+03  2.6916e+02  5.7500e+03\n                                  Max.\n   Intercept                1.6493e+08\n   floor_area_sqm           5.0907e+04\n   storey_order             2.9537e+04\n   remaining_lease_mths     1.8119e+03\n   PROX_CBD                 2.2411e+07\n   PROX_ELDERLYCARE         8.2444e+07\n   PROX_HAWKER              5.9654e+06\n   PROX_MRT                 2.0189e+08\n   PROX_PARK                1.5188e+07\n   PROX_MALL                1.0443e+07\n   PROX_SUPERMARKET         3.8330e+06\n   WITHIN_350M_KINDERGARTEN 6.6799e+05\n   WITHIN_350M_CHILDCARE    1.0802e+05\n   WITHIN_350M_BUS          3.7313e+04\n   WITHIN_1KM_PRISCH        5.0231e+05\n   ************************Diagnostic information*************************\n   Number of data points: 10335 \n   Effective number of parameters (2trace(S) - trace(S'S)): 1730.101 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 8604.899 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 238871.9 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 237036.9 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 238209.1 \n   Residual sum of squares: 4.829191e+12 \n   R-square value:  0.967657 \n   Adjusted R-square value:  0.9611534 \n\n   ***********************************************************************\n   Program stops at: 2024-03-17 00:06:37.579771"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#converting-the-test-data-from-sf-data.frame-to-spatialpointdataframe",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#converting-the-test-data-from-sf-data.frame-to-spatialpointdataframe",
    "title": "Hands-on Exercise 9: Geographically Weighted Predictive Models",
    "section": "Converting the test data from sf data.frame to SpatialPointDataFrame",
    "text": "Converting the test data from sf data.frame to SpatialPointDataFrame\n\ntest_data_sp &lt;- test_data %&gt;%\n  as_Spatial()\ntest_data_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 5566 \nextent      : 11597.31, 42623.63, 28287.8, 48669.59  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,         PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,   PROX_GOOD_PRISCH,        PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       230888,             74,            1,                  546, 1.00583660772922, 3.34897933104965e-07, 0.0474019664161957, 0.0414043955932523, 0.0502664084494264, 0.0907500295577619,                0, 4.55547870890763e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1050000,            138,           14,                 1151,  19.632402730488,     3.30163731686804,   2.83106651960209,   2.13060636038504,   2.41313695915468,   10.6169590126272, 2.26056404492346,     0.79249074802552,     1.53786629004208,                        7,                    16, ..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#computing-adaptive-bandwidth-for-the-test-data",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#computing-adaptive-bandwidth-for-the-test-data",
    "title": "Hands-on Exercise 9: Geographically Weighted Predictive Models",
    "section": "Computing adaptive bandwidth for the test data",
    "text": "Computing adaptive bandwidth for the test data\n\ngwr_bw_test_adaptive &lt;- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=test_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n\nTake a cup of tea and have a break, it will take a few minutes.\n          -----A kind suggestion from GWmodel development group\nAdaptive bandwidth: 3447 CV score: 1.902155e+13 \nAdaptive bandwidth: 2138 CV score: 1.752645e+13 \nAdaptive bandwidth: 1328 CV score: 1.556299e+13 \nAdaptive bandwidth: 828 CV score: 1.357498e+13 \nAdaptive bandwidth: 518 CV score: 1.030751e+13 \nAdaptive bandwidth: 327 CV score: 8.348364e+12 \nAdaptive bandwidth: 208 CV score: 6.860544e+12 \nAdaptive bandwidth: 135 CV score: 5.969504e+12 \nAdaptive bandwidth: 89 CV score: 5.242221e+12 \nAdaptive bandwidth: 62 CV score: 4.742767e+12 \nAdaptive bandwidth: 43 CV score: 4.357839e+12 \nAdaptive bandwidth: 34 CV score: 4.125848e+12 \nAdaptive bandwidth: 25 CV score: 4.04299e+12 \nAdaptive bandwidth: 23 CV score: 1.549626e+13 \nAdaptive bandwidth: 30 CV score: 4.074906e+12 \nAdaptive bandwidth: 25 CV score: 4.04299e+12 \n\n\nFrom the result above, we can see that the optimal bandwidth to be used for the test data is 25 neighbour."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#computing-predicted-values-of-the-test-data",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#computing-predicted-values-of-the-test-data",
    "title": "Hands-on Exercise 9: Geographically Weighted Predictive Models",
    "section": "Computing predicted values of the test data",
    "text": "Computing predicted values of the test data\n\ngwr_pred &lt;- gwr.predict(formula = resale_price ~\n                            floor_area_sqm + storey_order +\n                            remaining_lease_mths + PROX_CBD + \n                            PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH, \n                        data=train_data_sp, \n                        predictdata = test_data_sp, \n                        bw=gwr_bw_test_adaptive,\n                        kernel = 'gaussian', \n                        adaptive=TRUE, \n                        longlat = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#extracting-coordinates-data",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#extracting-coordinates-data",
    "title": "Hands-on Exercise 9: Geographically Weighted Predictive Models",
    "section": "Extracting coordinates data",
    "text": "Extracting coordinates data\nWe can use st_coordiantes() from the sf package to extract the x and y coordiantes of the full, training and test datasets.\n\ncoords &lt;- st_coordinates(mdata)\ncoords_train &lt;- st_coordinates(train_data)\ncoords_test &lt;- st_coordinates(test_data)\n\n\ncoords_train &lt;- write_rds(coords_train, \"data/aspatial/coords_train.rds\" )\ncoords_test &lt;- write_rds(coords_test, \"data/aspatial/coords_test.rds\" )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#dropping-the-geometry-column",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#dropping-the-geometry-column",
    "title": "Hands-on Exercise 9: Geographically Weighted Predictive Models",
    "section": "Dropping the geometry column",
    "text": "Dropping the geometry column\nWe can use st_drop_geometry() from the sf package to drop the geometry column.\n\ntrain_data &lt;- train_data %&gt;% \n  st_drop_geometry()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#calibrating-using-training-data",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#calibrating-using-training-data",
    "title": "Hands-on Exercise 9: Geographically Weighted Predictive Models",
    "section": "Calibrating using training data",
    "text": "Calibrating using training data\n\nset.seed(1234)\ngwRF_adaptive &lt;- grf(formula = resale_price ~ floor_area_sqm + storey_order +\n                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +\n                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +\n                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                     dframe=train_data, \n                     bw=55,\n                     kernel=\"adaptive\",\n                     coords=coords_train)\n\n\nwrite_rds(gwRF_adaptive, \"data/aspatial/gwRF_adaptive.rds\")\n\n\ngwRF_adaptive &lt;- read_rds(\"data/aspatial/gwRF_adaptive.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#predicting-by-using-test-data",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#predicting-by-using-test-data",
    "title": "Hands-on Exercise 9: Geographically Weighted Predictive Models",
    "section": "Predicting by using test data",
    "text": "Predicting by using test data\n\nPreparing the test data\n\ntest_data &lt;- cbind(test_data, coords_test) %&gt;%\n  st_drop_geometry()\n\n\n\nPRedicting with test data\nWe use predict.grf() function of the SpatialML package to predict the HDB resale value by using the test data and the calibrated geographical random forest model.\n\ngwRF_pred &lt;- predict.grf(gwRF_adaptive, \n                           test_data, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n\n\nGRF_pred &lt;- write_rds(gwRF_pred, \"data/aspatial/GRF_pred.rds\")\n\n\n\nConverting the predicting output into a data frame\nThe output of the predict.grf() is a vector of predicted values. It is wiser to convert it into a data frame for further visualisation and analysis.\n\nGRF_pred &lt;- read_rds(\"data/aspatial/GRF_pred.rds\")\nGRF_pred_df &lt;- as.data.frame(GRF_pred)\n\nIn the code chunk below, cbind() is used to append the predicted values onto test_data\n\ntest_data_p &lt;- cbind(test_data, GRF_pred_df)\n\n\nwrite_rds(test_data_p, \"data/aspatial/test_data_p.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#calculating-root-mean-square-error",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#calculating-root-mean-square-error",
    "title": "Hands-on Exercise 9: Geographically Weighted Predictive Models",
    "section": "Calculating Root Mean Square Error",
    "text": "Calculating Root Mean Square Error\nThe root mean square error (RMSE) allows us to measure how far predicted values are from observed values in a regression analysis. In the code chunk below, rmse() of Metrics package is used to compute the RMSE.\n\nrmse(test_data_p$resale_price, \n     test_data_p$GRF_pred)\n\n[1] 27302.9"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#visualizing-the-predicted-values",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#visualizing-the-predicted-values",
    "title": "Hands-on Exercise 9: Geographically Weighted Predictive Models",
    "section": "Visualizing the predicted values",
    "text": "Visualizing the predicted values\nAlternatively, scatterplot can be used to visualise the actual resale price and the predicted resale price by using the code chunk below.\n\ntest_data_p &lt;- test_data_p |&gt; select(1:19)\nggplot(data = test_data_p,\n       aes(x = GRF_pred,\n           y = resale_price)) +\n  geom_point()\n\n\n\n\nA better predictive model should have the scatter point close to the diagonal line. The scatter plot can be also used to detect if any outliers in the model."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on_Ex/Hands-on_Ex09/data/geospatial/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-Class Exercise 9.html",
    "href": "In-class_Ex/In-class_Ex09/In-Class Exercise 9.html",
    "title": "In-Class Exercise 9: Geographically Weighted Predictive Model",
    "section": "",
    "text": "pacman::p_load(sf, spdep, GWmodel, SpatialML, tmap, rsample, tidymodels, tidyverse, gtsummary, rpart, rpart.plot, ggstatsplot, performance)\n\n\nrs_sf &lt;- read_rds(\"data/rds/HDB_resale.rds\")\n\n\nglimpse(rs_sf)\n\nRows: 15,901\nColumns: 18\n$ RESALE_PRICE             &lt;dbl&gt; 330000, 360000, 370000, 375000, 380000, 38000…\n$ FLOOR_AREA_SQM           &lt;dbl&gt; 92, 91, 92, 99, 92, 92, 92, 92, 93, 91, 91, 9…\n$ STOREY_ORDER             &lt;int&gt; 1, 3, 1, 2, 2, 4, 3, 2, 4, 3, 3, 3, 4, 3, 2, …\n$ REMAINING_LEASE_MTHS     &lt;dbl&gt; 684, 738, 733, 700, 715, 732, 706, 745, 731, …\n$ PROX_CBD                 &lt;dbl&gt; 8.824749, 9.841309, 9.560780, 9.609731, 8.351…\n$ PROX_ELDERLYCARE         &lt;dbl&gt; 0.2514065, 0.6318448, 1.0824168, 0.3473195, 0…\n$ PROX_HAWKER              &lt;dbl&gt; 0.44182653, 0.26972560, 0.25829513, 0.4364751…\n$ PROX_MRT                 &lt;dbl&gt; 0.6885144, 1.0969096, 0.8862859, 1.4093169, 0…\n$ PROX_PARK                &lt;dbl&gt; 0.7450859, 0.4294870, 0.7800777, 0.1776163, 0…\n$ PROX_GOOD_PRISCH         &lt;dbl&gt; 1.2703931, 0.4045792, 2.0942375, 0.1375070, 1…\n$ PROX_MALL                &lt;dbl&gt; 0.5534331, 1.0677012, 0.9751113, 1.1752392, 1…\n$ PROX_CHAS                &lt;dbl&gt; 1.364596e-01, 2.569863e-01, 1.906189e-01, 2.9…\n$ PROX_SUPERMARKET         &lt;dbl&gt; 0.2708222, 0.3101889, 0.3187560, 0.4586748, 0…\n$ WITHIN_350M_KINDERGARTEN &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, …\n$ WITHIN_350M_CHILDCARE    &lt;int&gt; 6, 5, 2, 3, 3, 2, 3, 4, 3, 2, 4, 4, 4, 5, 2, …\n$ WITHIN_350M_BUS          &lt;int&gt; 8, 8, 8, 7, 6, 9, 6, 6, 5, 4, 10, 5, 6, 9, 8,…\n$ WITHIN_1KM_PRISCH        &lt;int&gt; 2, 2, 1, 2, 2, 1, 3, 2, 2, 2, 2, 2, 3, 2, 2, …\n$ geometry                 &lt;POINT [m]&gt; POINT (29179.92 38822.08), POINT (28423…\n\n\nSplit the train and test data into a 50-50 ratio\n\nset.seed(1234)\nresale_split &lt;- initial_split(rs_sf, prop=5/10) #will do random sampling, if strata = TRUE, then it is stratified sampling\ntrain_sf &lt;- training(resale_split)\ntest_sf &lt;- testing(resale_split)\n\nYou can save the train and test data as rds and then read it again to save memory space\nThe models in SpatialML only receives data frames as input, so we need to convert the spatial data into data frames\n\ntrain_df &lt;- train_sf |&gt; st_drop_geometry() |&gt; as.data.frame()\n\ntest_df &lt;- test_sf |&gt; st_drop_geometry() |&gt; as.data.frame()\n\n\nrs_sf1 &lt;- rs_sf |&gt; st_drop_geometry()\nggcorrmat(rs_sf1[,2:17])\n\n\n\n\n\ntrain_df &lt;- train_df |&gt; select(-c(PROX_CHAS))\ntrain_sf &lt;- train_sf |&gt; select(-c(PROX_CHAS))\ntest_df &lt;- test_df |&gt; select(-c(PROX_CHAS))\ntest_sf &lt;- test_sf |&gt; select(-c(PROX_CHAS))\n\n\nrs_mlr &lt;- lm(formula = RESALE_PRICE ~ .,\n                data=train_df)\n\n\ntbl_regression(rs_mlr, intercept=TRUE)\n\n\n\n\n\n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n105,081\n81,622, 128,540\n&lt;0.001\n    FLOOR_AREA_SQM\n2,791\n2,589, 2,992\n&lt;0.001\n    STOREY_ORDER\n14,038\n13,286, 14,789\n&lt;0.001\n    REMAINING_LEASE_MTHS\n346\n335, 356\n&lt;0.001\n    PROX_CBD\n-17,907\n-18,422, -17,392\n&lt;0.001\n    PROX_ELDERLYCARE\n-14,588\n-16,783, -12,392\n&lt;0.001\n    PROX_HAWKER\n-17,434\n-20,247, -14,621\n&lt;0.001\n    PROX_MRT\n-31,752\n-35,590, -27,914\n&lt;0.001\n    PROX_PARK\n-9,366\n-12,708, -6,023\n&lt;0.001\n    PROX_GOOD_PRISCH\n2,758\n2,008, 3,508\n&lt;0.001\n    PROX_MALL\n-12,220\n-16,674, -7,765\n&lt;0.001\n    PROX_SUPERMARKET\n-28,049\n-37,298, -18,800\n&lt;0.001\n    WITHIN_350M_KINDERGARTEN\n8,722\n7,312, 10,131\n&lt;0.001\n    WITHIN_350M_CHILDCARE\n-4,515\n-5,295, -3,735\n&lt;0.001\n    WITHIN_350M_BUS\n1,084\n590, 1,578\n&lt;0.001\n    WITHIN_1KM_PRISCH\n-8,201\n-9,285, -7,117\n&lt;0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nextract out the coordinates to be used for the coordinates pair for the grf.bw() function\n\ncoords &lt;- st_coordinates(rs_sf)\ncoords_train &lt;- st_coordinates(train_sf)\ncoords_test &lt;- st_coordinates(test_sf)\n\n\nset.seed(1234)\nrs_rp &lt;- rpart(formula = RESALE_PRICE ~ ., data = train_df)\n\nrs_rp\n\nn= 7950 \n\nnode), split, n, deviance, yval\n      * denotes terminal node\n\n 1) root 7950 1.139546e+14 433705.6  \n   2) PROX_CBD&gt;=7.974483 6665 4.472144e+13 403736.0  \n     4) REMAINING_LEASE_MTHS&lt; 1020.5 4228 1.573100e+13 370187.4  \n       8) PROX_GOOD_PRISCH&gt;=3.629405 2271 3.851141e+12 340796.1 *\n       9) PROX_GOOD_PRISCH&lt; 3.629405 1957 7.641480e+12 404294.6 *\n     5) REMAINING_LEASE_MTHS&gt;=1020.5 2437 1.597594e+13 461940.1  \n      10) PROX_CBD&gt;=10.40657 2331 9.762718e+12 451754.4  \n        20) PROX_GOOD_PRISCH&gt;=4.866983 1123 2.801796e+12 423493.8 *\n        21) PROX_GOOD_PRISCH&lt; 4.866983 1208 5.230246e+12 478026.4 *\n      11) PROX_CBD&lt; 10.40657 106 6.532500e+11 685929.1 *\n   3) PROX_CBD&lt; 7.974483 1285 3.219685e+13 589151.4  \n     6) REMAINING_LEASE_MTHS&lt; 930.5 745 6.613365e+12 486637.6  \n      12) FLOOR_AREA_SQM&lt; 98.5 451 2.446537e+12 442460.5 *\n      13) FLOOR_AREA_SQM&gt;=98.5 294 1.936449e+12 554405.7 *\n     7) REMAINING_LEASE_MTHS&gt;=930.5 540 6.952722e+12 730582.5  \n      14) REMAINING_LEASE_MTHS&lt; 1071.5 314 2.461969e+12 676641.3 *\n      15) REMAINING_LEASE_MTHS&gt;=1071.5 226 2.307737e+12 805527.4 *\n\n\n\nrpart.plot(rs_rp)\n\n\n\n\n\nset.seed(1234)\nrs_rf &lt;- ranger(formula = RESALE_PRICE ~ ., data = train_df, importance = \"impurity\")\nrs_rf\n\nRanger result\n\nCall:\n ranger(formula = RESALE_PRICE ~ ., data = train_df, importance = \"impurity\") \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      7950 \nNumber of independent variables:  15 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       738005688 \nR squared (OOB):                  0.9485198 \n\n\nTo extract the feature importance\n\nvi &lt;- as.data.frame(rs_rf$variable.importance)\nvi$variables &lt;- rownames(vi)\nvi &lt;- vi |&gt; rename(vi = \"rs_rf$variable.importance\")\n\n\nggplot(data=vi, aes(x = vi, y = reorder(variables, vi))) +\n  geom_bar(stat = \"identity\") #treat every column as single observation\n\n\n\n\n\nggplot(data = vi) +\n  geom_col(aes(x = vi, y = reorder(variables, vi)))\n\n\n\n\nThe above graph shows that the model work well with the variables provided. However, if the model cannot utilize the variables, your model might suffer from quasi-separation or quasi complete separation problem. This is a problem where the model cannot differentiate between the two classes of the dependent variable. This is a common problem in logistic regression, but it can also happen in other models.\n\ngrf_pred &lt;- read_rds(\"data/models/grf_pred.rds\")\ngrf_pred_df &lt;- as.data.frame(grf_pred)\n\n\ntest_pred &lt;- test_df |&gt; select(RESALE_PRICE) |&gt; cbind(grf_pred_df)\n\n\nrf_pred &lt;- predict(rs_rf, test_df)\n\n\nrf_pred_df &lt;- as.data.frame(rf_pred$predictions) |&gt; rename(rf_pred = \"rf_pred$predictions\")\n\n\ntest_pred &lt;- test_pred |&gt; cbind(rf_pred_df)\n\n\nmlr_pred &lt;- predict(rs_mlr, test_df)\nmlr_pred_df &lt;- as.data.frame(mlr_pred) |&gt; rename(mlr_pred = \"mlr_pred\")\ntest_pred &lt;- cbind(test_pred, mlr_pred_df)\n\nto comparison between the models\n\nmc &lt;- test_pred |&gt; pivot_longer(cols=c(2:4),\n                                names_to = \"models\",\n                                values_to = \"predicted\")\n\noutput table to do comparison of the models using the RMSE\n\nmc |&gt; group_by(models) |&gt; yardstick::rmse(RESALE_PRICE, predicted)\n\n# A tibble: 3 × 4\n  models   .metric .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 grf_pred rmse    standard      28745.\n2 mlr_pred rmse    standard      61617.\n3 rf_pred  rmse    standard      28348.\n\n\nfrom the output, random forest outperform the multi regression model. The basic non geographic random forest model is better than the geographic random forest model. such that in this use casem just use the rf model because it runs faster than the grf.\n\nggplot(data = test_pred,\n       aes(x = grf_pred,\n           y=RESALE_PRICE)) +\n  geom_point()\n\n\n\n\n\nggplot(data = test_pred,\n       aes(x = mlr_pred,\n           y=RESALE_PRICE)) +\n  geom_point()\n\n\n\n\nThe outlier is quite big for multiple linear regression such that it has higher rmse than the grf."
  }
]