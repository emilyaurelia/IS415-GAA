{
  "hash": "5b624132ca6c7ebecb4b76b9a20545d3",
  "result": {
    "markdown": "---\ntitle: \"Take Home Exercise 3: Geographically Weighted Predictive Models\"\nauthor: \"Emily Aurelia\"\nformat:\n  html:\n    toc-depth: 4\nexecute: \n  warning: false #to remove the warning in the webpage\n  freeze: True\ndate: \"23 March 2024\"\n---\n\n\n# Introduction\n\nIn this Take Home Exercise 3, we will be doing a geographically weighted predictive models on rental units in Jakarta. This is a prototype of one of the feature of my IS415 Geospatial Analytics and Applications Project.\n\n# Importing of Packages\n\nThe packages that I am using for this exercise are used in the class' In-Class Exercise 9.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, tmap, sf, spdep, GWmodel, SpatialML, rsample, tidymodels, gtsummary, rpart, rpart.plot, ggstatsplot, performance, geosphere, stringr, matrixStats)\n```\n:::\n\n\n# Data\n\n## Geospatial Data\n\n-   [Jakarta Shapefile](https://www.indonesia-geospasial.com/2020/01/shp-rbi-provinsi-dki-jakarta-perwilayah.html)\n\n    -   This dataset is taken from the Indonesia Geospasial website\n\n    -   It is divided based on the different administrative cities in Jakarta, consisting of the POIs available in each city.\n\n## Aspatial Data\n\n-   [Mamikos Dataset](https://mamikos.com/)\n\n    -   This dataset is scraped from Mamikos website\n    -   The dataset consists of rental units in Jakarta and the facilities provided in each rental unit\n\n-   [School and University dataset in Jakarta](https://referensi.data.kemdikbud.go.id/pendidikan/dikti/010000/1)\n\n    -   This dataset is scraped from Indonesia's Ministry of Education and Culture (Kemendikbud) website\n\n## Data Preprocessing\n\n### Jakarta Map\n\nFirst, we need to combine the shapefiles of each administrative 'desa' in Jakarta to create a map of Jakarta.\n\n\n::: {.cell code-description='Calling the shapefiles of each administrative \\'desa\\' in Jakarta'}\n\n```{.r .cell-code  code-fold=\"true\"}\njakbar_adm_desa <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_BARAT\", layer = \"ADMINISTRASIDESA_AR_25K\")\njakbar_adm_desa <- st_zm(jakbar_adm_desa, zm=\"Z\")\njakbar_adm_desa_sf <- jakbar_adm_desa |> st_transform(crs = 4326)\n\njakpus_adm_desa <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_PUSAT\", layer = \"ADMINISTRASIDESA_AR_25K\")\njakpus_adm_desa <- st_zm(jakpus_adm_desa, zm=\"Z\")\njakpus_adm_desa_sf <- jakpus_adm_desa |> st_transform(crs = 4326)\n\njaksel_adm_desa <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_SELATAN\", layer = \"ADMINISTRASIDESA_AR_25K\")\njaksel_adm_desa <- st_zm(jaksel_adm_desa, zm=\"Z\")\njaksel_adm_desa_sf <- jaksel_adm_desa |> st_transform(crs = 4326)\n\njakut_adm_desa <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_UTARA\", layer = \"ADMINISTRASIDESA_AR_25K\")\njakut_adm_desa <- st_zm(jakut_adm_desa, zm=\"Z\")\njakut_adm_desa_sf <- jakut_adm_desa |> st_transform(crs = 4326)\n\njaktim_adm_desa <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_TIMUR\", layer = \"ADMINISTRASIDESA_AR_25K\")\njaktim_adm_desa <- st_zm(jaktim_adm_desa, zm=\"Z\")\njaktim_adm_desa_sf <- jaktim_adm_desa |> st_transform(crs = 4326)\njaktim_adm_desa_sf <- st_make_valid(jaktim_adm_desa_sf)\n```\n:::\n\n\nTo combine the sf objects, we use the `rbind` function. Then, we save the sf object as an shp file using st_write so that we can just call it in the future.\n\n\n::: {.cell code-description='Combine the sf objects of each administrative \\'desa\\' in Jakarta and save it as an shp file'}\n\n```{.r .cell-code  code-fold=\"true\"}\njakarta_adm_desa <- rbind(jakbar_adm_desa_sf, jakpus_adm_desa_sf, jaksel_adm_desa_sf, jakut_adm_desa_sf, jaktim_adm_desa_sf)\nsaveRDS(jakarta_adm_desa, \"rds/jakarta.rds\")\n```\n:::\n\n::: {.cell code-description='Read the shapefile of Jakarta'}\n\n```{.r .cell-code}\njakarta <- readRDS(\"rds/jakarta.rds\")\nst_crs(jakarta)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n```\n:::\n\n```{.r .cell-code}\nqtm(jakarta)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n### Mamikos Dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmamikos <- read_csv(\"data/mamikos.csv\")\n```\n:::\n\n\n#### Selecting Relevant Columns\n\nSome of the important columns in the dataset include:\n\n-   **\\_id**: The unique identifier for each unit.\n\n-   **price_monthly**: The monthly price of the unit.\n\n-   **latitude**: The latitude of the unit.\n\n-   **longitude**: The longitude of the unit.\n\n-   **gender**: The gender preference for potential tenants (mixed, male, or female).\n\n-   **size** : The size of the accommodation.\n\n-   **fac_room**: Facilities available within the room itself (e.g., air conditioning, bed, wardrobe, etc.).\n\n-   **fac_share**: Shared facilities that tenants can use (e.g., kitchen, living room).\n\n-   **fac_bath**: Bathroom facilities (private or shared, including features like hot water).\n\n-   **fac_near**: Facilities or points of interest near the accommodation (e.g., supermarket, campus, public transport).\n\n-   **fac_park**: Parking facilities (availability and type, such as for cars or motorbikes).\n\n-   **kos_rule**: The rules or regulations tenants must follow (e.g., no pets, curfew times).\n\n-   **fac_price**: Additional costs for facilities (e.g., laundry fees, cleaning service fees).\n\n-   **building_year**: The year the building was constructed or established.\n\n-   **number_success_owner_trx**: The number of successful transactions the owner has completed on the platform.\n\n-   **number_success_kos_trx**: The number of successful transactions for this specific listing.\n\nFor the purpose of this prototyping, we will only focus on **price_monthly**, **latitude**, **longitude**, **gender**, **size**, and **building_year**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmamikos <- mamikos |> \n  select(`_id`, price_monthly, latitude, longitude, gender, size, building_year)\n```\n:::\n\n\n#### Reformatting the Size Column\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalculate_area <-  function(size_string) {\n  # Deal with potential NA values upfront\n  if (is.na(size_string)) {\n    return(NA)\n  }\n  \n  # lowercase the string for easier matching\n  size <- tolower(size_string)\n  \n  # Replace all non-standard x's and commas with a standard format\n  size <- gsub(\"×\", \"x\", size)\n  \n  # Normalize decimal separator from comma to dot and remove spaces\n  size <- gsub(\",\\\\s*\", \".\", size) # Changes \"2,5 x 3\" to \"2.5 x 3\"\n  \n  # Remove any \"m2\" text, assuming that the presence of 'x' or '×' already denotes area calculation\n  size <- gsub(\"m2\", \"\", size, ignore.case = TRUE)\n  \n  # Extract numeric values\n  numbers <- as.numeric(unlist(str_extract_all(size, \"[0-9.]+\")))\n  \n  # Simple heuristic: if more than 2 numbers, take first two assuming additional info is irrelevant\n  if (length(numbers) > 2) {\n    numbers <- numbers[1:2]\n  }\n  \n  # Calculate the area; if it's a single number, assume it's already the area\n  area <- if (length(numbers) == 2) prod(numbers) else if (length(numbers) == 1) numbers else 0\n  \n  if (area > 10000) {\n    area <- area / 10000\n  } else if (area > 100) {\n    area <- area / 100\n  } else if (area == 0 ) {\n    area <- NA\n  }\n  \n  return (area)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmamikos <- mamikos |>\n  mutate(size = sapply(size, calculate_area))\n```\n:::\n\n\n#### Removing Invalid Building Years\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmamikos <- mamikos |>\n  filter(building_year > 0)\n```\n:::\n\n\n#### Handling Missing Values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmamikos <- mamikos |> \n  drop_na()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmamikos_sf <- st_as_sf(mamikos, coords = c(\"longitude\", \"latitude\"), crs=4326)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmamikos_sf <- st_intersection(mamikos_sf, jakarta)\nmamikos_sf <- mamikos_sf  |> select(X_id, price_monthly, gender, size, building_year, geometry)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(mamikos_sf, \"rds/mamikos_sf.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmamikos_sf <- readRDS(\"rds/mamikos_sf.rds\")\n```\n:::\n\n\n### Jakarta POIs\n\nFor the purpose of this Take-Home Exercise to show as a prototype of the project, we will be focusing on the following Points of Interest (POIs) in Jakarta:\n\n1.  Airport\n2.  StasiunKA - Train Stations\n3.  Kesehatan - Health Facilities\n4.  KantorPos - Post Offices\n5.  SaranaIbadah - Places of Worship\n\nWe choose these POIs as we think that it is important for potential tenants to have easy access to these facilities.\n\n#### AIRPORT\n\nSince the airport shapefile in the Jakarta dataset are all empty, we will manually input the coordinates of the two airports in Jakarta.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname <- c(\"Soekarno-Hatta International Airport\", \"Halim Perdanakusuma International Airport\")\nlat <- c(-6.123335553024524, -6.265380365738848)\nlon <- c(106.65980883674271, 106.8851665557591)\nREMARK <- c(\"AIRPORT\", \"AIRPORT\")\n\nairport <- data.frame(REMARK, lat, lon) |> st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326)\n```\n:::\n\n\n#### STASIUNKA\n\nWe will read the shapefiles of the train stations in each administrative 'desa' in Jakarta and combine them into one.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nstasiunka_jakbar <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_BARAT\", layer = \"STASIUNKA_PT_25K\")\nstasiunka_jakbar_sf <- stasiunka_jakbar |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nstasiunka_jakpus <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_PUSAT\", layer = \"STASIUNKA_PT_25K\")\nstasiunka_jakpus_sf <- stasiunka_jakpus |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nstasiunka_jaksel <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_SELATAN\", layer = \"STASIUNKA_PT_25K\")\nstasiunka_jaksel_sf <- stasiunka_jaksel |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nstasiunka_jakut <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_UTARA\", layer = \"STASIUNKA_PT_25K\")\nstasiunka_jakut_sf <- stasiunka_jakut |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nstasiunka_jaktim <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_TIMUR\", layer = \"STASIUNKA_PT_25K\")\nstasiunka_jaktim_sf <- stasiunka_jaktim |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nstasiunka <- rbind(stasiunka_jakbar_sf, stasiunka_jakpus_sf, stasiunka_jaksel_sf, stasiunka_jakut_sf, stasiunka_jaktim_sf) |> mutate(REMARK = \"STASIUNKA\") |> st_zm(zm=\"Z\")\n```\n:::\n\n\n##### CALCULATING MEDIAN DISTANCE BETWEEN THE STASIUNKA\n\nWe will calculate the median distance between each train station in Jakarta. This is going to be used for when we are counting the number of POIs within a certain distance from the rental units.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# the function to remove the unit from the distance in the data frame and change the data type to numeric\nrm_unit <- function(x) {\n  as.numeric(str_sub(x, 1, -4))\n}\n\nstasiunka_dist <- st_distance(stasiunka) # to calculate\nstasiunka_dist <- data.frame(stasiunka_dist)\nstasiunka_dist <- sapply(stasiunka_dist, rm_unit)\ncolnames(stasiunka_dist) <- stasiunka$REMARK\nrownames(stasiunka_dist) <- stasiunka$REMARK\nstasiunka_dist_med <- apply(stasiunka_dist, 1, median, na.rm = TRUE)\nstasiunka_dist_med <- data.frame(stasiunka_dist_med)\nstasiunka_med <- median(stasiunka_dist_med$stasiunka_dist_med)\n```\n:::\n\n\n#### KESEHATAN\n\nNext, we will read the shapefiles of the health facilities in each administrative 'desa' in Jakarta and combine them into one.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nkesehatan_jakbar <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_BARAT\", layer = \"KESEHATAN_PT_25K\")\nkesehatan_jakbar_sf <- kesehatan_jakbar |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nkesehatan_jakpus <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_PUSAT\", layer = \"KESEHATAN_PT_25K\")\nkesehatan_jakpus_sf <- kesehatan_jakpus |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nkesehatan_jaksel <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_SELATAN\", layer = \"KESEHATAN_PT_25K\")\nkesehatan_jaksel_sf <- kesehatan_jaksel |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nkesehatan_jakut <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_UTARA\", layer = \"KESEHATAN_PT_25K\")\nkesehatan_jakut_sf <- kesehatan_jakut |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nkesehatan_jaktim <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_TIMUR\", layer = \"KESEHATAN_PT_25K\")\nkesehatan_jaktim_sf <- kesehatan_jaktim |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nkesehatan <- rbind(kesehatan_jakbar_sf, kesehatan_jakpus_sf, kesehatan_jaksel_sf, kesehatan_jakut_sf, kesehatan_jaktim_sf) |> mutate(REMARK = \"KESEHATAN\") |> st_zm(zm=\"Z\")\n```\n:::\n\n\n##### CALCULATING MEDIAN DISTANCE BETWEEN KESEHATAN\n\nSame as the STASIUNKA POI, we will calculate the median distance between each health facility in Jakarta, which will be used when we are counting the number of POIs within a certain distance from the rental units.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nkesehatan_dist <- st_distance(kesehatan)\nkesehatan_dist <- data.frame(kesehatan_dist)\nkesehatan_dist <- sapply(kesehatan_dist, rm_unit)\ncolnames(kesehatan_dist) <- kesehatan$REMARK\nrownames(kesehatan_dist) <- kesehatan$REMARK\nkesehatan_dist_med <- apply(kesehatan_dist, 1, median, na.rm = TRUE)\nkesehatan_dist_med <- data.frame(kesehatan_dist_med)\nkesehatan_med <- median(kesehatan_dist_med$kesehatan_dist_med)\n```\n:::\n\n\n#### PENDIDIKAN\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npendidikan_jakbar <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_BARAT\", layer = \"PENDIDIKAN_PT_25K\")\npendidikan_jakbar_sf <- pendidikan_jakbar |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\npendidikan_jakpus <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_PUSAT\", layer = \"PENDIDIKAN_PT_25K\")\npendidikan_jakpus_sf <- pendidikan_jakpus |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\npendidikan_jaksel <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_SELATAN\", layer = \"PENDIDIKAN_PT_25K\")\npendidikan_jaksel_sf <- pendidikan_jaksel |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\npendidikan_jakut <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_UTARA\", layer = \"PENDIDIKAN_PT_25K\")\npendidikan_jakut_sf <- pendidikan_jakut |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\npendidikan_jaktim <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_TIMUR\", layer = \"PENDIDIKAN_PT_25K\")\npendidikan_jaktim_sf <- pendidikan_jaktim |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\npendidikan <- rbind(pendidikan_jakbar_sf, pendidikan_jakpus_sf, pendidikan_jaksel_sf, pendidikan_jakut_sf, pendidikan_jaktim_sf) |> mutate(REMARK = \"PENDIDIKAN\") |> st_zm(zm=\"Z\")\n```\n:::\n\n\n##### CALCULATING MEDIAN DISTANCE BETWEEN PENDIDIKAN\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npendidikan_dist <- st_distance(pendidikan)\npendidikan_dist <- data.frame(pendidikan_dist)\npendidikan_dist <- sapply(pendidikan_dist, rm_unit)\ncolnames(pendidikan_dist) <- pendidikan$REMARK\nrownames(pendidikan_dist) <- pendidikan$REMARK\npendidikan_dist_med <- apply(pendidikan_dist, 1, median, na.rm = TRUE)\npendidikan_dist_med <- data.frame(pendidikan_dist_med)\npendidikan_med <- median(pendidikan_dist_med$pendidikan_dist_med)\n```\n:::\n\n\n#### KANTORPOS\n\nWe will also read the shapefiles of the post offices in each administrative 'desa' in Jakarta and combine them into one.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nkantorpos_jakbar <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_BARAT\", layer = \"KANTORPOS_PT_25K\")\nkantorpos_jakbar_sf <- kantorpos_jakbar |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nkantorpos_jakpus <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_PUSAT\", layer = \"KANTORPOS_PT_25K\")\nkantorpos_jakpus_sf <- kantorpos_jakpus |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nkantorpos_jaksel <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_SELATAN\", layer = \"KANTORPOS_PT_25K\")\nkantorpos_jaksel_sf <- kantorpos_jaksel |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nkantorpos_jakut <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_UTARA\", layer = \"KANTORPOS_PT_25K\")\nkantorpos_jakut_sf <- kantorpos_jakut |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nkantorpos_jaktim <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_TIMUR\", layer = \"KANTORPOS_PT_25K\")\nkantorpos_jaktim_sf <- kantorpos_jaktim |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nkantorpos <- rbind(kantorpos_jakbar_sf, kantorpos_jakpus_sf, kantorpos_jaksel_sf, kantorpos_jakut_sf, kantorpos_jaktim_sf) |> mutate(REMARK = \"KANTORPOS\") |> st_zm(zm=\"Z\")\n```\n:::\n\n\n##### CALCULATING MEDIAN DISTANCE BETWEEN KANTORPOS\n\nWe will calculate the median distance between each post office in Jakarta, which will be used when we are counting the number of POIs within a certain distance from the rental units.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nkantorpos_dist <- st_distance(kantorpos)\nkantorpos_dist <- data.frame(kantorpos_dist)\nkantorpos_dist <- sapply(kantorpos_dist, rm_unit)\ncolnames(kantorpos_dist) <- kantorpos$REMARK\nrownames(kantorpos_dist) <- kantorpos$REMARK\nkantorpos_dist_med <- apply(kantorpos_dist, 1, median, na.rm = TRUE)\nkantorpos_dist_med <- data.frame(kantorpos_dist_med)\nkantorpos_med <- median(kantorpos_dist_med$kantorpos_dist_med)\n```\n:::\n\n\n#### SARANAIBADAH\n\nThis time, we will read the shapefiles of the places of worship in each administrative 'desa' in Jakarta and combine them into one.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nsaranaibadah_jakbar <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_BARAT\", layer = \"SARANAIBADAH_PT_25K\")\nsaranaibadah_jakbar_sf <- saranaibadah_jakbar |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nsaranaibadah_jakpus <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_PUSAT\", layer = \"SARANAIBADAH_PT_25K\")\nsaranaibadah_jakpus_sf <- saranaibadah_jakpus |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nsaranaibadah_jaksel <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_SELATAN\", layer = \"SARANAIBADAH_PT_25K\")\nsaranaibadah_jaksel_sf <- saranaibadah_jaksel |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nsaranaibadah_jakut <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_UTARA\", layer = \"SARANAIBADAH_PT_25K\")\nsaranaibadah_jakut_sf <- saranaibadah_jakut |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nsaranaibadah_jaktim <- st_read(dsn = \"data/Jakarta/KOTA_JAKARTA_TIMUR\", layer = \"SARANAIBADAH_PT_25K\")\nsaranaibadah_jaktim_sf <- saranaibadah_jaktim |> st_transform(crs = 4326) |> select(REMARK, geometry)\n\nsaranaibadah <- rbind(saranaibadah_jakbar_sf, saranaibadah_jakpus_sf, saranaibadah_jaksel_sf, saranaibadah_jakut_sf, saranaibadah_jaktim_sf) |> st_zm(zm=\"Z\")\n```\n:::\n\n\n##### CALCULATING MEDIAN DISTANCE BETWEEN SARANAIBADAH\n\nWe will calculate the median distance between each place of worship in Jakarta, which will be used when we are counting the number of POIs within a certain distance from the rental units.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nmasjid <- saranaibadah |> filter(REMARK == \"Masjid\")\ngereja <- saranaibadah |> filter(REMARK == \"Gereja\")\nvihara <- saranaibadah |> filter(REMARK == \"Vihara\")\npura <- saranaibadah |> filter(REMARK == \"Pura\")\nother_saranaibadah <- saranaibadah |> filter(REMARK == \"Peribadatan/Sosial Lainnya\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nmasjid_dist <- st_distance(masjid)\nmasjid_dist <- data.frame(masjid_dist)\nmasjid_dist <- sapply(masjid_dist, rm_unit)\nmasjid_dist_med <- apply(masjid_dist, 1, median, na.rm = TRUE)\nmasjid_dist_med <- data.frame(masjid_dist_med)\nmasjid_med <- median(masjid_dist_med$masjid_dist_med)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ngereja_dist <- st_distance(gereja)\ngereja_dist <- data.frame(gereja_dist)\ngereja_dist <- sapply(gereja_dist, rm_unit)\ngereja_dist_med <- apply(gereja_dist, 1, median, na.rm = TRUE)\ngereja_dist_med <- data.frame(gereja_dist_med)\ngereja_med <- median(gereja_dist_med$gereja_dist_med)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nvihara_dist <- st_distance(vihara)\nvihara_dist <- data.frame(vihara_dist)\nvihara_dist <- sapply(vihara_dist, rm_unit)\nvihara_dist_med <- apply(vihara_dist, 1, median, na.rm = TRUE)\nvihara_dist_med <- data.frame(vihara_dist_med)\nvihara_med <- median(vihara_dist_med$vihara_dist_med)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npura_dist <- st_distance(pura)\npura_dist <- data.frame(pura_dist)\npura_dist <- sapply(pura_dist, rm_unit)\npura_dist_med <- apply(pura_dist, 1, median, na.rm = TRUE)\npura_dist_med <- data.frame(pura_dist_med)\npura_med <- median(pura_dist_med$pura_dist_med)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nother_saranaibadah_dist <- st_distance(other_saranaibadah)\nother_saranaibadah_dist <- data.frame(other_saranaibadah_dist)\nother_saranaibadah_dist <- sapply(other_saranaibadah_dist, rm_unit)\nother_saranaibadah_dist_med <- apply(other_saranaibadah_dist, 1, median, na.rm = TRUE)\nother_saranaibadah_dist_med <- data.frame(other_saranaibadah_dist_med)\nother_saranaibadah_med <- median(other_saranaibadah_dist_med$other_saranaibadah_dist_med)\n```\n:::\n\n\n#### Combining the data of the POIs\n\nAfter getting all the data of the POI, we will now combine them into one single dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoi <- rbind(airport, stasiunka, kesehatan, kantorpos, saranaibadah, pendidikan)\nsaveRDS(poi, \"rds/poi.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npoi <- readRDS(\"rds/poi.rds\")\n```\n:::\n\n\n### Distance Calculation\n\n#### Calculating the distance matrix of each rental unit to each POI\n\nIn order to examine the influence of the POIs to the rent price of the rental units, we need to calculate the distance matrix between each of the rental units and each of the POIs. To find the distance, we can use st_distance() function from the sf package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistance <- st_distance(mamikos_sf, poi)\ndistance <- data.frame(distance)\ncolnames(distance) <- poi$REMARK\nrownames(distance) <- mamikos_sf$`X_id`\n```\n:::\n\n\nTo make it easier for us to read and process the data, we need to remove the unit from the distance in the data frame and change the data type to numeric. We also need to pivot the data frame so that it can be easier for us to process the data when finding the minimum proximity to the POIs and the number of POIs within the median distance that we calculated earlier. We also save the data into an RDS file so that we can just call it when we want to use it in the future.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistance <- sapply(distance, rm_unit)\nrownames(distance) <- mamikos_sf$`X_id`\ndistance <- as.data.frame(distance)\ndistance$id <- as.numeric(rownames(distance))\ndistance_pair <- distance |> pivot_longer(!id, names_to = \"POI\", values_to = \"Distance\")\nsaveRDS(distance_pair, \"rds/distance_pair.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndistance_pair <- readRDS(\"rds/distance_pair.rds\")\n```\n:::\n\n\n#### Finding the nearest distance to each POI for each rental unit\n\nIn order to find the nearest distance to each POI for each rental unit, we can use the dplyr package to group the data by the rental unit id and the POI, then summarize the data by finding the minimum distance. We can also pivot the data so that it can be easier for us to process the data when we want to join it with the mamikos dataset. We also save the data into an RDS file so that we can just call it when we want to use it in the future.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistance_min_prox <- distance_pair |> \n  group_by(id, POI) |> \n  summarise(min_distance = min(Distance)) |>\n  pivot_wider(names_from = POI, values_from = min_distance)\n\nsaveRDS(distance_min_prox, \"rds/distance_min_prox.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndistance_min_prox <- readRDS(\"rds/distance_min_prox.rds\")\n```\n:::\n\n\n#### Counting the number of POIs within the median distance for each rental unit\n\nTo count the number of POIs within the median distance for each rental unit, we need to group by the id of each rental unit then use the summarise() function from the dplyr package to count the number of POIs within the median distance. We also save the data into an RDS file so that we can just call it when we want to use it in the future.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistance_within <- distance_pair |>\n  group_by(id) |> \n  summarise(airport_within_10km = sum(POI == \"AIRPORT\" & Distance <= 10000), \n            stasiunka_within_med = sum(POI == \"STASIUNKA\" & Distance <= stasiunka_med), \n            kesehatan_within_med = sum(POI == \"KESEHATAN\" & Distance <= kesehatan_med), \n            kantorpos_within_med = sum(POI == \"KANTORPOS\" & Distance <= kantorpos_med), \n            masjid_within_med = sum(POI == \"Masjid\" & Distance <= masjid_med),\n            gereja_within_med = sum(POI == \"Gereja\" & Distance <= gereja_med),\n            vihara_within_med = sum(POI == \"Vihara\" & Distance <= vihara_med),\n            pura_within_med = sum(POI == \"Pura\" & Distance <= pura_med),\n            other_saranaibadah_within_med = sum(POI == \"Peribadatan/Sosial Lainnya\" & Distance <= other_saranaibadah_med),\n            pendidikan_within_med = sum(POI == \"PENDIDIKAN\" & Distance <= pendidikan_med))\n\n\nsaveRDS(distance_within, \"rds/distance_within.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndistance_within <- readRDS(\"rds/distance_within.rds\")\n```\n:::\n\n\n#### Combine proximity data and POI count data with the mamikos dataset\n\nAfter finding the minimum proximity and the count of the POIs to each rental unit, we now combine these columns into the mamikos dataset to put it in our model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmamikos_full <- left_join(mamikos_sf, distance_min_prox, by = c(\"X_id\" = \"id\")) |> left_join(distance_within, by = c(\"X_id\" = \"id\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmamikos_full <- rename(mamikos_full, \"PROX_AIRPORT\" = \"AIRPORT\", \"PROX_STASIUNKA\" = \"STASIUNKA\", \"PROX_KESEHATAN\" = \"KESEHATAN\", \"PROX_KANTORPOS\" = \"KANTORPOS\", \"PROX_MASJID\" = \"Masjid\", \"PROX_GEREJA\" = \"Gereja\", \"PROX_VIHARA\" = \"Vihara\", \"PROX_PURA\" = \"Pura\", \"PROX_OTHER_SARANAIBADAH\" = \"Peribadatan/Sosial Lainnya\", \"AIRPORT_WITHIN_10KM\" = \"airport_within_10km\", \"STASIUNKA_WITHIN_MED\" = \"stasiunka_within_med\", \"KESEHATAN_WITHIN_MED\" = \"kesehatan_within_med\", \"KANTORPOS_WITHIN_MED\" = \"kantorpos_within_med\", \"MASJID_WITHIN_MED\" = \"masjid_within_med\", \"GEREJA_WITHIN_MED\" = \"gereja_within_med\", \"VIHARA_WITHIN_MED\" = \"vihara_within_med\", \"PURA_WITHIN_MED\" = \"pura_within_med\", \"OTHER_SARANAIBADAH_WITHIN_MED\" = \"other_saranaibadah_within_med\", \"PROX_PENDIDIKAN\" = \"PENDIDIKAN\", \"PENDIDIKAN_WITHIN_MED\" = \"pendidikan_within_med\")\n\nnames(mamikos_full) <- tolower(names(mamikos_full))\nsaveRDS(mamikos_full, \"rds/mamikos_full.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmamikos_full <- readRDS(\"rds/mamikos_full.rds\")\n```\n:::\n\n\n# Computing Correlation Matrix\n\nBefore loading hte predictors into a predictive model, we need to see the correlation between each of the predictors to see if there is a sign of multicolinearity.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmamikos_nogeo <- mamikos_full |> st_drop_geometry()\ncorrplot::corrplot(cor(mamikos_nogeo[, -1]),\n                   diag = FALSE,\n                   order = \"AOE\",\n                   tl.pos = \"td\", \n                   tl.cex = 0.5, \n                   method = \"number\", \n                   type = \"upper\")\n```\n:::\n\n\nThere are several variables that are highly correlated with each other. We will remove the variables that have a correlation of more than 0.7 with other variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmamikos_full_nocorr <- mamikos_full |> select(c(`x_id`, price_monthly, gender, building_year, size, prox_airport, prox_kesehatan, prox_masjid, prox_kantorpos, pendidikan_within_med, prox_stasiunka))\nsaveRDS(mamikos_full_nocorr, \"rds/mamikos_full_nocorr.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmamikos_full_nocorr <- readRDS(\"rds/mamikos_full_nocorr.rds\")\n```\n:::\n\n\n# Random Forest Predictive Model\n\n## Data Sampling\n\nSince the full mamikos data set contains around 15 thousand rows of rental units, this can take a very long time for the model to run. Therefore, we will sample the data to the first 5000 units. We will split the data into training and testing data with a ratio of 8:2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nmamikos_sample <- mamikos_full_nocorr |> slice_sample(n = 5000)\nmamikos_split <- initial_split(mamikos_sample[, -1], \n                              prop = 8/10,)\ntrain_data <- training(mamikos_split)\ntest_data <- testing(mamikos_split)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(train_data, \"rds/train_data.rds\")\nwrite_rds(test_data, \"rds/test_data.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data <- read_rds(\"rds/train_data.rds\")\ntest_data <- read_rds(\"rds/test_data.rds\")\n```\n:::\n\n\n## Preparing coordinates data\n\nFor the Geographical Random Forest model, we need to prepare the coordinates data for the training and testing data. We will use the st_coordinates() function from the sf package to extract the coordinates data from the sf data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(mamikos_full)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_train <- write_rds(coords_train, \"rds/coords_train.rds\" )\ncoords_test <- write_rds(coords_test, \"rds/coords_test.rds\" )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_train <- read_rds(\"rds/coords_train.rds\")\ncoords_test <- read_rds(\"rds/coords_test.rds\")\n```\n:::\n\n\n## Converting the sf data.frame to SpatialPointDataFrame\n\nIn order to get the adaptive bandwidth for the predictive model, we first need to convert the sf data frame to a SpatialPointDataFrame object as the bw.gwr() function from the spgwr package only accepts SpatialPointDataFrame object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_sp <- as_Spatial(train_data)\ntrain_data_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 4000 \nextent      : 106.7275, 106.9457, -6.303448, -6.110441  (xmin, xmax, ymin, ymax)\ncrs         : +proj=longlat +datum=WGS84 +no_defs \nvariables   : 10\nnames       : price_monthly, gender, building_year, size,  prox_airport, prox_kesehatan,   prox_masjid, prox_kantorpos, pendidikan_within_med, prox_stasiunka \nmin values  :         4e+05,      0,          1950, 1.05, 278.342294772,  11.5702517416, 5.21611837169,  35.1420547534,                   195,  10.7938033163 \nmax values  :       9500000,      2,          2024,  100, 17439.1169096,  3329.17344029, 1324.66432546,  4207.45053915,                   564,   10469.369721 \n```\n:::\n:::\n\n\n## Computing adaptive bandwidth\n\nWe will compute the adaptive bandwidth for the Geographical Random Forest model using the bw.gwr() function from the spgwr package. We will use the cross-validation approach to find the optimal bandwidth for the model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive <- bw.gwr(price_monthly ~ .,\n                  data=train_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE,\n                  parallel.method = \"omp\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(bw_adaptive, \"rds/bw_adaptive.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive <- read_rds(\"rds/bw_adaptive.rds\")\n```\n:::\n\n\n## Calibrating Geographical Random Forest Model\n\nWe will calibrate the Geographical Random Forest model using the grf() function from the grf package. We will use the adaptive bandwidth that we have computed earlier to calibrate the model. But first, we need to drop the geometry of the training data as we will use the coordinates that we found earlier for the coords parameter for the model to run.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_nogeo <- train_data |> st_drop_geometry()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ngwRF_adaptive <- grf(formula = price_monthly ~ gender + building_year + size + prox_airport + prox_kesehatan + prox_masjid + prox_kantorpos + pendidikan_within_med + prox_stasiunka,\n                     dframe=train_data_nogeo, \n                     bw=bw_adaptive,\n                     kernel=\"adaptive\",\n                     coords=coords_train)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwRF_adaptive, \"rds/gwRF_adaptive.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_adaptive <- read_rds(\"rds/gwRF_adaptive.rds\")\n```\n:::\n\n\n## Predict using test data\n\nWe will now predict the rent price of the rental units using the test data and the Geographical Random Forest model that we have calibrated earlier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data <- cbind(test_data, coords_test) |>\n  st_drop_geometry()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_pred <- predict.grf(gwRF_adaptive, \n                           test_data, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred <- write_rds(gwRF_pred, \"rds/GRF_pred.rds\")\n```\n:::\n\n\n# Visualizing the predicted values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred <- read_rds(\"rds/GRF_pred.rds\")\nGRF_pred_df <- as.data.frame(GRF_pred)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_p <- cbind(test_data, GRF_pred_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(test_data_p, \"rds/test_data_p.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_p <- read_rds(\"rds/test_data_p.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = test_data_p,\n       aes(x = GRF_pred,\n           y = price_monthly)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-67-1.png){width=672}\n:::\n:::\n\n\n# UI Design\n\nThe user will be able to change the region of the rental units. They can also vary the variables that they are interested in to analyse. The bandwidth can also be changed into adaptive or fixed with a slider to choose the bandwidth value. The graph will then be displayed accordingly to the user's inputs.\n\n![UI Design for GWRF page.](Screenshot%202024-03-24%20234858.png)\n",
    "supporting": [
      "Take-home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}